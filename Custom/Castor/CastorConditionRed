#!/bin/env perl

##H Prevent Castor melt-down situation
##H
##H This script checks the history of the Castor pending queue and returns an
##H alarm flag, if a 'meltdown' is about to happen.
##H
##H If there were more than 800 jobs pending during the last 15 minutes, the
##H situation is considered critical and an alarm flag is returned to the Castor
##H stager agent.
##H The alarm is keept, if there were more than 800 jobs during the last 30 - 45
##H minutes and more than 500 jobs during the last 15 minutes. This indicates
##H that the queue did not yet recover from the previous high load.
##H
##H Usage:
##H   CastorConditionRed [-node NODE] [-lemon LEMONSCRIPT]
##H
##H Examples:
##H   CastorConditionRed -node c2cms_castor -lemon /usr/sbin/lemon-cli
##H
##H NODE:         Castor node to monitor, default: c2cms_castor
##H LEMONSCRIPT:  Full path to Lemon client script, default: /usr/sbin/lemon-cli
##H

BEGIN {
  $^W = 1; use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

# Process command line arguments.
use Getopt::Long;
use UtilsHelp;
use UtilsTiming;

my %args = ( NODE => 'c2cms_castor', LEMON => '/usr/sbin/lemon-cli' );
&GetOptions ("node=s"      => \$args{NODE},
	     "lemon=s"     => \$args{LEMON},
	     "help|h"      => sub { &usage() });

# Check if we find the Lemon client script
die "Lemon command line client not found at $args{LEMON}" if !-e $args{LEMON};

# Get pending queue info for the last 45 minutes
my $now = int( &mytimeofday() );
my $start = $now - 2700;

my @LemonDump = `$args{LEMON} -m 6259 -n $args{NODE} --server --script --start $start --end $now |cut -d" " -f 3-6`;
my %CastorStatus = ();

foreach my $entry ( @LemonDump )
{
    my @stats = split m|\s|, $entry;
    %{$CastorStatus{$stats[0]}} = ('running'   => $stats[1],
				   'pending'   => $stats[2],
				   'suspended' => $stats[3]);
}

# Choose for each time window (0-15, 15-30, 30-45 ago) the entry with the greatest pending queue
my @MaxPending  = ( 0, 0, 0 );
my @old_pending = ( 0, 0, 0 );
foreach my $entry ( keys %CastorStatus )
{
    my $pending = ${$CastorStatus{$entry}}{pending};
    # 45 - 30 minutes time window
    if ( $entry > $now - 2700 && $entry < $now - 1800 )
    {
	$MaxPending[0] = $pending if ( $pending > $old_pending[0] );
	$old_pending[0] = $pending;
    }
    # 30 - 15 minutes time window
    elsif ( $entry > $now - 1800 && $entry < $now - 900 )
    {
	$MaxPending[1] = $pending if ( $pending > $old_pending[1] );
	$old_pending[1] = $pending;
    }
    # 15 minutes - now time window
    elsif ( $entry > $now - 900 && $entry < $now )
    {
	$MaxPending[2] = $pending if ( $pending > $old_pending[2] );
	$old_pending[2] = $pending;
    }
}

# Decide if we have an alarm situation
# 1. more than 800 jobs within the last 30 minutes
# 2. more than 800 jobs in the 45 - 30 minutes time window and
#    more than 500 jobs within the last 30 minutes

my $alarm = 0;

if ( $MaxPending[1] > 800 || $MaxPending[2] > 800 )
{
    print "More than 800 jobs in Castor pending queue during last 30 minutes !\n";
    $alarm = 1;
}
elsif ( $MaxPending[0] > 800 && $MaxPending[2] > 500 )
{
    print "Castor recovering from heavy load, but still more than 500 jobs during last 15 minutes !\n";
    $alarm = 2;
}

exit $alarm;
