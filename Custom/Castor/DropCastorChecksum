#!/usr/bin/perl

## Checksum files in castor if the drops don't have checksum info.
##
## The agent scans the XML catalog, and checks whether each file
## listed has an entry in the checksum data.  Files that don't are
## copied from castor and the checksum data is updated.
##
## This agent periodically inspects the drop box, looking for new
## incoming directories from completed batch jobs.  For each such
## new assignment, it goes through the checksumming process.  At
## each step we update the state so that if the script terminates,
## crashes or is otherwise stopped, it will pick up in the right
## place.  At the end, we pass the assignment to the next agent.

BEGIN { use strict; $^W = 1; }
my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
$ENV{STAGE_HOST} ||= "stagecmsprod";	# Castor stage host
$ENV{STAGE_POOL} ||= "cms_prod2";	# Castor stage pool
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-stagehost' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_HOST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-stagepool' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_POOL} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-rfcp' && scalar @ARGV > 1)
    { shift (@ARGV); $args{NRFCP} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$args{DROPDIR})
{
    print STDERR
	"usage: $me\n",
	"    -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-stagehost STAGE-HOST] [-stagepool POOL]\n",
	"    [-rfcp N-PARALLEL-RFCP] [-wait SECS-TO-WAIT]\n";
    exit (1);
}

(new DropCastorChecksum (%args))->process();

######################################################################
# Routines specific to this agent.
package DropCastorChecksum;
use strict;
use Exporter;
use File::Path;
use UtilsReaders;
use UtilsAgent;
use base 'UtilsAgent';

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (NRFCP => 5);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Update checksums for all files that don't have it.  Copies files from
# castor to the local working directory and checksums them there.
sub updateChecksums
{
    my ($self, $drop, $catalogue, $checksums) = @_;

    # Create working directories
    my $filesdir = "$self->{WORKDIR}/$drop/files";
    &rmtree ($filesdir);
    eval { &mkpath ($filesdir); };
    do { &alert ("could not create working directories: $@"); return 0; } if $@;

    # Download files we don't have checksums for.
    my %local = ();
    foreach my $guid (keys %$catalogue)
    {
	my $pfn = $catalogue->{$guid}{PFN}[0];
	my $lfn = $catalogue->{$guid}{LFN}[0];
	next if grep ($_->[2] eq $lfn, @$checksums);

	$local{$pfn} = "$filesdir/$lfn";
    }

    my %status = &rfcpmany ($self->{NRFCP}, %local);
    my $failed = scalar (grep ($_, values %status));
    do { &alert ("$drop: failed to copy $failed files"); &rmtree ($filesdir); return 0; }
        if $failed;

    # Checksum the new files
    foreach my $local (values %local)
    {
	my $lfn = ($local =~ m|.*/([^/]+)$|)[0];
	my $cksum = &cksum($filesdir, $lfn);
	do { &alert ("$drop: failed to cksum $lfn"); &rmtree ($filesdir); return 0; }
	    if ! $cksum;

	push (@$checksums, [ split(/\s+/, $cksum) ]);
    }

    &rmtree ($filesdir);

    # Generate new checksum file
    my $checkdata = join("\n", map { join(" ", @$_) } @$checksums);
    $checkdata .= "\n" if $checkdata;
    do { &alert ("$drop: failed to write checksum file"); return 0; }
        if (! &output ("$self->{WORKDIR}/$drop/CheckSum.$drop.txt", $checkdata));

    # Mark drop itself done
    do { &alert ("could not mark drop done: $!"); return 0; }
	if ! &touch ("$self->{WORKDIR}/$drop/done");

    return 1;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Find and read the catalogue and the checksum data
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $xmlcat = (<$dropdir/XMLCatFragment.*.{xml,txt}>)[0];
    my $cksum = (<$dropdir/CheckSum.*.txt>)[0];
    if (! defined $xmlcat)
    {
        &alert ("no xml catalogue in $drop");
        $self->markBad ($drop);
        return;
    }

    my $catalogue = eval { &readXMLCatalog ($drop, $xmlcat) };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    my @checksums = eval { $cksum ? &readChecksumData ($drop, $cksum) : () };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    # Stage files in, but leave drop in queue if files are still pending
    return if ! $self->updateChecksums ($drop, $catalogue, \@checksums);
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
