#!/usr/bin/env perl

## Checksum files in castor if the drops don't have checksum info.
##
## The agent scans the XML catalog, and checks whether each file
## listed has an entry in the checksum data.  Files that don't are
## copied from castor and the checksum data is updated.
##
## This agent periodically inspects the drop box, looking for new
## incoming directories from completed batch jobs.  For each such
## new assignment, it goes through the checksumming process.  At
## each step we update the state so that if the script terminates,
## crashes or is otherwise stopped, it will pick up in the right
## place.  At the end, we pass the assignment to the next agent.
##
## This agent works somewhat specially in that it works both as
## a slave and a master.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
$ENV{STAGE_HOST} ||= "stagecmsprod";	# Castor stage host
$ENV{STAGE_POOL} ||= "cms_prod2";	# Castor stage pool
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-stagehost' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_HOST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-stagepool' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_POOL} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-rfcp' && scalar @ARGV > 1)
    { shift (@ARGV); $args{NRFCP} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-workers' && scalar @ARGV > 1)
    { shift (@ARGV); $args{NWORKERS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$args{DROPDIR})
{
    print STDERR
	"usage: $me [-workers N-SLAVE-WORKERS]\n",
	"    -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-stagehost STAGE-HOST] [-stagepool POOL]\n",
	"    [-rfcp N-PARALLEL-RFCP] [-wait SECS-TO-WAIT]\n";
    exit (1);
}

(new DropCastorChecksum (%args))->process();

######################################################################
# Routines specific to this agent.
package DropCastorChecksum; use strict; use base 'UtilsAgent';
use File::Path;
use UtilsCache;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsReaders;
use UtilsRFIO;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (NRFCP => 5);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Start a worker.  Note that I am my own worker.
sub startWorker
{
    my ($self, $i) = @_;
    my $workerdir = "$self->{DROPDIR}/worker-$i";
    &mkpath ($workerdir) if ! -d $workerdir;

    my $pid = undef;
    while (1)
    {
	last if defined ($pid = fork ());
        &logmsg ("cannot fork: $!; trying again in 10 seconds");
	sleep (10);
    }

    # Return child pid in parent;
    return $pid if $pid;

    # Child.
    my @args = ($0, "-in", $workerdir,
		(map { ("-out", $_) } @{$self->{NEXTDIR}}),
		"-stagehost", $ENV{STAGE_HOST},
		"-stagepool", $ENV{STAGE_POOL},
		"-rfcp", $self->{NRFCP},
		"-wait", $self->{WAITTIME});

    exec { $args[0] } @args;
    die "Cannot start worker: $!\n";
}

# Update file attribute cache for files, and return the hash of files
# that miss the required information.
sub updateCache
{
    my ($self, $drop, $attrs, $checksums) = @_;
    my @missing = ();
    foreach my $file (@$attrs)
    {
	my $pfn = $file->{PFN};
	my $lfn = $file->{LFN};
	my $csum = (grep ($_->[2] eq $lfn, @$checksums))[0];

	# Verify any existing data
	if (defined $csum)
	{
	    &warn ("$drop: discarding cached file size for $pfn"
		   . " (old=$file->{FILESIZE}, new=$csum->[1])")
	        if defined $file->{FILESIZE} && $file->{FILESIZE} ne $csum->[1];
	    &warn ("$drop: discarding cached checksum for $pfn"
		   . " (old=$file->{CHECKSUM}, new=$csum->[0])")
	        if defined $file->{CHECKSUM} && $file->{CHECKSUM} ne $csum->[0];
	    $file->{CHECKSUM} = $csum->[0];
	    $file->{FILESIZE} = $csum->[1];
	}

	# If we have cached checksum, skip this file
	next if defined $file->{CHECKSUM} && defined $file->{FILESIZE};

	# This needs to be recalculated
	push (@missing, [ $pfn, $lfn ]);
    }

    return @missing;
}

# Update checksums for all files that don't have it.  Copies files from
# castor to the local working directory and checksums them there.
sub updateChecksums
{
    my ($self, $drop, $attrs, $checksums) = @_;

    # Create working directories
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $filesdir = "$dropdir/files";
    &rmtree ($filesdir);
    eval { &mkpath ($filesdir); };
    do { &alert ("$drop: failed to create working diretories: $@"); return 0; } if $@;

    # Download files we don't have checksums for.
    my @missing = $self->updateCache ($drop, $attrs, $checksums);
    my %local = map { $_->[0] => "$filesdir/$_->[1]" } @missing;
    my %status = &rfcpmany ($self->{NRFCP}, %local);
    my $failed = scalar (grep ($_, values %status));
    do { &alert ("$drop: failed to copy $failed files"); &rmtree ($filesdir); return 0; }
        if $failed;

    # Checksum the new files
    foreach my $local (values %local)
    {
	my $lfn = ($local =~ m|.*/([^/]+)$|)[0];
	my $cksum = &cksum($filesdir, $lfn);
	do { &alert ("$drop: failed to cksum $lfn"); &rmtree ($filesdir); return 0; }
	    if ! $cksum;

	# Update checksum data
	push (@$checksums, [ split(/\s+/, $cksum) ]);
    }

    &rmtree ($filesdir);

    # Generate new cache and checksum files
    $self->updateCache ($drop, $attrs, $checksums);

    my $checkdata = join("\n", map { join(" ", @$_) } @$checksums);
    $checkdata .= "\n" if $checkdata;
    do { &alert ("$drop: failed to write checksum file"); return 0; }
        if (! &output ("$dropdir/CheckSum.$drop.txt", $checkdata));

    do { &alert ("$drop: failed to write attribute cache"); return 0; }
        if (! &outputAttributeCache ("$dropdir/attrs", $attrs));

    # Mark drop itself done
    do { &alert ("$drop: failed to mark done: $!"); return 0; }
	if ! &touch ("$dropdir/done");

    return 1;
}

# Really process the drop.  Only done in leaf processes: either the
# main agent if it has no workers, or in its slaves.
sub childProcessDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Read attribute cache and merge in any checksum data we already have.
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $attrs = eval { &readAttributeCache ("$dropdir/attrs") };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    my $cksum = (<$dropdir/CheckSum.*.txt>)[0];
    my @checksums = eval { $cksum ? &readChecksumData ($cksum) : () };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    # Update checksums in the attribute cache
    return if ! $self->updateChecksums ($drop, $attrs, \@checksums);
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # If this is a child or we have no workers, process it myself.
    return $self->childProcessDrop ($drop) if ! $self->{NWORKERS};

    # We have children, pass to the least loaded one when its load
    # level is acceptably low.  In other words, keep drops in our
    # pending queue while workers are too busy.  This avoids over
    # committing work to the children when we receive hundreds of
    # drops.
    my $worker = $self->pickWorker();
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $workerdir = "$self->{DROPDIR}/worker-$worker";
    if (scalar @{[<$workerdir/{inbox,work}/*>]} < 5)
    {
        my $slavein = "$workerdir/inbox/$drop";
        &alert ("$drop: failed to move to $slavein: $!")
            if ! &mv ($dropdir, $slavein);
    }
}
