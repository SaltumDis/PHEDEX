#!/usr/bin/perl

## Prestage castor files before passing them to the rest of the chain.
##
## This agent scans the XML catalogues of all drops in its work queue
## and stages in all the files that are not currently staged in.  The
## drops stay pending in the work queue until all the files have been
## staged in.
##
## The stage-in is done according to the instructions of the Castor
## team to avoid overloading the stager and tape systems.  The stage
## requests are ordered by tape name and position of the files.  We
## issue several stage requests in one command to reduce the number
## of stager processes at the server (there is one process for each
## request).  Moreover, we throttle ourselves back if the number of
## pending tape mounts is high (~4000) or pending stage requests is
## high (~200).
##
## The file names in the catalogues must be correct full PFNs, the
## agent does check that the file exists in Castor before attempting
## to stage the files in.
##
## Because the agent wants to process simultaneously as many drops as
## possible, all the work is done in &idle().

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
$ENV{STAGE_HOST} ||= "stagecmsprod";	# Castor stage host
$ENV{STAGE_POOL} ||= "cms_prod2";	# Castor stage pool
my %args = (DBITYPE => "Oracle");
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-stagehost' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_HOST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-stagepool' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_POOL} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR}
    || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE}
    || !$args{MYNODE})
{
    print STDERR
	"usage: $me -node TMDB-NODE\n",
	"    -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n",
	"    [-stagehost STAGE-HOST] [-stagepool POOL]\n";
    exit (1);
}

my $agent = new FileCastorExport (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for the master castor export agent.  This one simply manages
# the file transfer requests and passes the work to appropriate other
# local export agents (stage-in, checksum).
package FileCastorExport; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  MYNODE => undef,		# My TMDB node name
	  	  AGENTID => "Export");		# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work
# assignments from the database here and pass them to slaves.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";

        # FIXME: Pick up and process messages to me

	# Execute a series of updates that use variants of the same query.
	# We go through the state machine at this node: 1) If unavailable
	# file is recently wanted and not staged in, mark it for stage-in;
	# 2) If a file is staged in, mark it available; 3) If a file is
	# available, mark it ready for transfer; 4) If a file is not
	# staged in, mark it unavailable and not ready for transfer, but
	# ignore already completed transfers.
	#
	# Note that the stager agent demotes files to unavailable and not
	# staged in *or* unavailable and staged in; we always flip the
	# latter category of files back to available so download clients
	# can prefer immediately available files.  Otherwise we only run
	# the state machine only for files somebody actively wants.
	#
	# "Recently wanted" == time stamp on "wanted" state is less than
	# fifteen minutes old.  Download agents expecting files will be
	# refreshing the wanted status more often than that when they are
	# running and capable of downloading files.

	# FIXME: Purge staged-in files already transferred out.
	# FIXME: Throttle stage-in requests based on how much we have
	# already committed to transfer (t_transfer_state.from_state=1)
	# and how much space (free space and unpinned files) is on the
	# stager pool.

	my %args = (":node" => $self->{MYNODE}, ":now" => time());

	# 1) Request stage-in for currently unavailable wanted files.
	&dbexec($dbh, qq{
	    update t_replica_state
	    set local_state = 10, local_time_stamp = :now
	    where node = :node and guid in
	       (select distinct rs.guid
	        from t_replica_state rs
	        left join t_transfer_state ts
	          on ts.guid = rs.guid and ts.from_node = rs.node
	        where rs.node = :node
	          and rs.state = 0
	      	  and rs.local_state = 0
	      	  and ts.to_state = 1
	      	  and ts.to_time_stamp >= :recent)},
	    %args, ":recent" => time() - 15*60);

        # 2) Make staged in files available.  Note that checksummer
	# separately notices staged in files without checksum and
	# adds one.  We allow transfers to proceed without checksum
	# to increase throughput -- the checksums should exist on
	# most files and are rarely used.
	&dbexec($dbh, qq{
	    update t_replica_state
	    set state = local_state, time_stamp = :now
	    where node = :node
	      and (local_state = 0 or local_state = 1)
	      and local_state != state},
      	    %args);

        # 3) Mark staged in files available for transfer.
	&dbexec($dbh, qq{
	    update (select ts.from_state, ts.from_time_stamp
	            from t_transfer_state ts
	            left join t_replica_state rs
	              on rs.guid = ts.guid and rs.node = ts.from_node
	            where rs.state = 1
		      and ts.from_node = :node
		      and ts.from_state = 0)
	    set from_state = 1, from_time_stamp = :now},
	    %args);

        # 4) Mark unavailable files not ready for transfer.
	&dbexec($dbh, qq{
	    update (select ts.from_state, ts.from_time_stamp
	            from t_transfer_state ts
	            left join t_replica_state rs
	              on rs.guid = ts.guid and rs.node = ts.from_node
	            where rs.state != 1
		      and ts.from_node = :node
		      and ts.from_state = 1
	      	      and ts.to_state < 2)
	    set from_state = 0, from_time_stamp = :now},
	    %args);

	$dbh->commit();
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
