#!/usr/bin/env perl

##H Coordinate file export for castor-based transfer nodes.
##H
##H This agent manages the general export process for nodes that behave
##H like castor nodes.  It expects FileCastorStager and FilePFNExport
##H agents to be operated in parallel.
##H
##H Usage:
##H   FileCastorExport
##H      -state DIRECTORY -node NAME -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG} || !$args{MYNODE})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileCastorExport (%args))->process();

######################################################################
# Routines for the master castor export agent.  This one simply manages
# the file transfer requests and passes the work to appropriate other
# local export agents (stage-in, checksum).
package FileCastorExport; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
	  	  AGENTID => "Export");		# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work
# assignments from the database here and pass them to slaves.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";

        # FIXME: Pick up and process messages to me

	# Mark files available/unavailable based on their local status.
	# This agent just reflects outcome from other agents (stager,
	# checksummer) to the transfer table; the other agents work
	# autonomously, we don't manage their work from here.
	#
	# Note that we reflect status of staged-in files into transfer
	# table regardless of whether someone wants the file or not;
	# this way download clients can prefer immediately available
	# files.

	my %args = (":node" => $self->{MYNODE}, ":now" => &mytimeofday());

        # Mark staged in files available for transfer.
	&dbexec($dbh, qq{
	    update (select ts.from_state, ts.from_timestamp
	            from t_transfer_state ts
	            left join t_replica_state rs
	              on rs.guid = ts.guid and rs.node = ts.from_node
	            where rs.state = 1
		      and ts.from_node = :node
		      and ts.from_state = 0
	      	      and ts.from_pfn is not null)
	    set from_state = 1, from_timestamp = :now},
	    %args);

        # Mark unavailable files not ready for transfer.
	&dbexec($dbh, qq{
	    update (select ts.from_state, ts.from_timestamp
	            from t_transfer_state ts
	            left join t_replica_state rs
	              on rs.guid = ts.guid and rs.node = ts.from_node
	            where ts.from_node = :node
		      and ts.from_state = 1
	              and ts.to_state < 2
		      and (rs.state != 1 or ts.from_pfn is null))
	    set from_state = 0, from_timestamp = :now},
	    %args);

	$dbh->commit();
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
