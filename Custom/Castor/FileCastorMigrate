#!/usr/bin/env perl

## Manage a Castor MSS node, marking files migrated to tape.
##
## This agent is technically a transfer agent, so follows the file
## routing rules.  However it can only be a terminal node and is
## somewhat simplified in its logic.  We also short-cut the data
## wanted/available protocol as this is not a real transfer.
##
## FIXME: tape management -- what happens with files that are not
## destined to tape but are copied to /castor?  Do we care?

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
$ENV{STAGE_HOST} ||= "stagecmsprod";	# Castor stage host
$ENV{STAGE_POOL} ||= "cms_prod2";	# Castor stage pool
my %args = (DBITYPE => "Oracle");
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-stagehost' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_HOST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-stagepool' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_POOL} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-prefix' && scalar @ARGV > 1)
    { shift (@ARGV); $args{RM_PATH_PREFIX} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{MYNODE} || !$args{RM_PATH_PREFIX})
{
    print STDERR
	"usage: $me -node TMDB-NODE -prefix PATH-PREFIX-TO-REMOVE\n",
	"    -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n",
	"    [-stagehost STAGE-HOST] [-stagepool POOL]\n";
    exit (1);
}

my $agent = new FileCastorMigrate (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileCastorMigrate; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  MYNODE => undef,		# My TMDB node name
		  RM_PATH_PREFIX => undef,	# Prefix to remove from PFNs
	  	  AGENTID => "Download");	# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $now = time();
	my $mynode = $self->{MYNODE};
	my $prefix = $self->{RM_PATH_PREFIX};
	$dbh = &connectToDatabase ($self) or die "failed to connect";

        # FIXME: Pick up and process messages to me

	# Mark everything available for and already in transfer for
	# this link.  Don't mark files wanted to avoid stager going
	# wild because of us :-)  This is to keep browser displays
	# correct, we don't use this information ourselves and it
	# isn't used by the "sending" side (the neighbour transfer
	# node).  Note that there are no transfers out from this
	# node -- they all go from the transfer node, which must
	# always be closer to any destination that us and already
	# has all the files we have.
	my %args = (":node" => $mynode, ":now" => $now);
	&dbexec($dbh, qq{
	    update t_transfer_state
	    set from_state = 1, from_time_stamp = :now
	    where to_node = :node and from_state = 0},
	    %args);
	&dbexec($dbh, qq{
	    update t_transfer_state
	    set to_state = 2, to_time_stamp = :now
	    where to_node = :node and to_state = 0},
    	    %args);
	$dbh->commit();

	# Process files pending migration.
        my $rsstmt = $dbh->prepare(qq{
	    insert into t_replica_state (guid, node, insert_time_stamp,
				         state, time_stamp,
				         local_state, local_time_stamp)
	    values (:guid, :node, :now, 0, :now, 0, :now)});
        my $tsstmt = $dbh->prepare(qq{
	    update t_transfer_state
	    set to_state = 3, to_time_stamp = :now
	    where guid = :guid and to_node = :node});
	my ($qstmt) = &dbexec($dbh, qq{
	    select ts.guid,
	    	   m.value,
	           ts.from_time_stamp,
	           n.catalogue_contact,
	           n.host_string
	    from t_transfer_state ts
	    left join t_replica_metadata m
	      on m.guid = ts.guid and m.attribute = 'filesize'
	    left join t_nodes n
	      on n.node_name = ts.from_node
	    where ts.to_node = :node
	      and ts.to_state = 2},
  	    ":node" => $mynode);
	while (my $row = $qstmt->fetchrow_arrayref())
	{
	    my ($guid, $size, $time, $catalogue, $hostkey) = @$row;

	    # FIXME: Do we need to actually issue commands to begin
	    # migration?  If so, use to_state = 0 to indicate we
	    # haven't done that, to_state = 2 to indicate migration
	    # started, and to_state = 3 to indicate it's complete.
	    # Now we assume it's just always automatically started.

	    # Check if the file has been migrated.  If not, skip it.
	    my $pfn = &guidToPFN ($guid, $catalogue, $hostkey);
	    $pfn =~ s/$prefix//;

	    open (NSLS, "nsls -l $pfn |") or die "cannot nsls $pfn: $!";
	    my $status = <NSLS>;
	    close (NSLS) or die "cannot nsls $pfn: $!";

	    next if $status !~ /^m/;

	    # Migrated, mark transfer completed
	    &dbbindexec($rsstmt, %args, ":guid" => $guid);
	    &dbbindexec($tsstmt, %args, ":guid" => $guid);

	    $dbh->commit ();

	    # Log delay data.
	    my $nowh = &mytimeofday();
	    my $dalloc = $nowh - $time;
	    my $dtransfer = $nowh - $now;
    	    &logmsg ("xstats: $guid $mynode 3 "
		    . sprintf('%.2f %.2f', $dalloc, $dtransfer)
		    . " $size");

	    # Give up if we've taken too long
	    last if time() - $now > 10*60;
	}
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
