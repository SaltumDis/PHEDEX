#!/usr/bin/env perl

##H Manage downloads into a Castor MSS node, marking transfer completed
##H when the files have been migrated to tape.
##H
##H This agent is technically a transfer agent, so follows the file
##H routing rules.  However it can only be a terminal node and is
##H somewhat simplified in its logic.  We also short-cut the data
##H wanted/available protocol as this is not a real transfer.
##H
##H FIXME: tape management -- what happens with files that are not
##H destined to tape but are copied to /castor?  Do we care?
##H
##H Usage:
##H   FileCastorFilesize
##H      -state DIRECTORY -node NAME -db FILE[:SECTION] [-wait SECS]
##H      -pfnquery COMMAND[,ARGS...]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans
##H -pfnquery  command to query pfns from catalogue

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-pfnquery' && scalar @ARGV > 1)
    { shift (@ARGV); @{$args{PFN_QUERY}} = split(/,/, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG}
    || !$args{MYNODE} || !$args{PFN_QUERY})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileCastorMigrate (%args))->process();

######################################################################
# Routines for this agent.
package FileCastorMigrate; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
	  	  PFN_QUERY => undef,		# Program to query PFNs
	  	  AGENTID => "Download");	# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $start = &mytimeofday();
	$dbh = &connectToDatabase ($self) or die "failed to connect";

        # FIXME: Pick up and process messages to me

	# Mark everything available for and already in transfer for
	# this link.  Don't mark files wanted to avoid stager going
	# wild because of us :-)  This is to keep browser displays
	# correct, we don't use this information ourselves and it
	# isn't used by the "sending" side (the neighbour transfer
	# node).  Note that there are no transfers out from this
	# node -- they all go from the transfer node, which must
	# always be closer to any destination that us and already
	# has all the files we have.
	my %args = (":node" => $self->{MYNODE}, ":now" => $start);
	&dbexec($dbh, qq{
	    update t_transfer_state
	    set from_state = 1, from_timestamp = :now
	    where to_node = :node and from_state = 0},
	    %args);
	&dbexec($dbh, qq{
	    update t_transfer_state
	    set to_state = 2, to_timestamp = :now
	    where to_node = :node and to_state = 0},
    	    %args);
	$dbh->commit();

	# Process files pending migration.
        my $rsstmt = $dbh->prepare(qq{
	    insert into t_replica_state
	    (timestamp, guid, node, state, state_timestamp)
	    values (:now, :guid, :node, 0, :now)});
        my $tsstmt = $dbh->prepare(qq{
	    update t_transfer_state
	    set to_state = 3, to_timestamp = :now
	    where guid = :guid and to_node = :node});
	my ($qstmt) = &dbexec($dbh, qq{
	    select ts.guid, f.filesize, ts.from_timestamp
	    from t_transfer_state ts
	    join t_file f on f.guid = ts.guid
	    where ts.to_node = :node and ts.to_state = 2},
  	    ":node" => $self->{MYNODE});
	while (my $row = $qstmt->fetchrow_arrayref())
	{
	    my ($guid, $size, $time) = @$row;

	    # FIXME: Do we need to actually issue commands to begin
	    # migration?  If so, use to_state = 0 to indicate we
	    # haven't done that, to_state = 2 to indicate migration
	    # started, and to_state = 3 to indicate it's complete.
	    # Now we assume it's just always automatically started.

	    # Check if the file has been migrated.  If not, skip it.
	    my $pfn = &guidToPFN ($guid, "direct", "local", @{$self->{PFN_QUERY}});
	    do { &alert ("failed to find pfn for guid $guid"); next } if !$pfn;
	    open (NSLS, "nsls -l $pfn |") or die "cannot nsls $pfn: $!";
	    my $status = <NSLS>;
	    close (NSLS) or die "cannot nsls $pfn: $!";

	    next if $status !~ /^m/;

	    # Migrated, mark transfer completed
	    &dbbindexec($tsstmt, %args, ":guid" => $guid);
	    &dbbindexec($rsstmt, %args, ":guid" => $guid);
	    $dbh->commit ();

	    # Log delay data.
	    my $nowh = &mytimeofday();
    	    &logmsg ("xstats: $guid $self->{MYNODE} 3 "
		    . sprintf('%.2f', &mytimeofday() - $time)
		    . " $size");

	    # Give up if we've taken too long
	    last if $nowh - $start > 10*60;
	}
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
