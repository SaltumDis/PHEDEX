#!/usr/bin/env perl

##H Manage castor stage-in pool based on file download requests.
##H
##H This agent checks for files wanted for transfer from this node and
##H issues stage-in requests for them.  It updates the current stage-in
##H status of the files in TMDB based on stager disk state.
##H
##H The stage-in is done according to the instructions of the Castor
##H team to avoid overloading the stager and tape systems.  The stage
##H requests are ordered by tape name and position of the files.  We
##H issue several stage requests in one command to reduce the number
##H of stager processes at the server (there is one process for each
##H request).  Moreover, we throttle ourselves back if the number of
##H pending tape mounts is high (~4000) or pending stage requests is
##H high (~200).
##H
##H As TMDB only contains GUIDs and no PFNs, we execute a site-local
##H script to map the GUIDs to PFNs, typically using local catalogue.
##H Correspondingly, files reported by stager to be on disk are mapped
##H back to GUIDs.
##H
##H Usage:
##H   FileCastorFilesize
##H      -state DIRECTORY -node NAME -dbconfig FILE [-wait SECS]
##H      -pfnquery COMMAND[,ARGS...]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -dbconfig  database connection configuration parameter file
##H -wait      time to wait in seconds between work scans
##H -pfnquery  command to query pfns and guids from catalogue

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbconfig' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-pfnquery' && scalar @ARGV > 1)
    { shift (@ARGV); @{$args{PFN_QUERY}} = split(/,/, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG}
    || !$args{MYNODE} || !$args{PFN_QUERY})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = new FileCastorStager (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileCastorStager; use strict; use warnings; use base 'UtilsAgent';
use DB_File;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub min { return (sort { $a <=> $b } @_)[0] }
sub max { return (sort { $b <=> $a } @_)[0] }

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
	  	  PFN_QUERY => undef,		# Program to query PFNs
	  	  AGENTID => "Stager",		# Identity for activity logs
    	    	  MAXTAPEREQS => 4000,		# Max pending tape mounts
    	    	  MAXMYTAPEREQS => 1000,	# Max pending tape mounts by myself
    	    	  MAXSTAGEREQS => 200,		# Max pending stager requests
    	    	  MAXFILES => 50,		# Max number of files in one request
		  PFN_CACHE => {},		# GUID -> PFN cache
		  GUID_CACHE => {},		# PFN -> GUID cache
		  DB_CACHE => {},		# Cache of DB state
		  NSLS_CACHE => {});		# Cache for nsls (file pool) lookups
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Find out if the PFN exists in Castor, and if so, the tape it is on,
# the position on the tape and the file size.  Return a four-tuple of
# success, tape, position and size.  The success is zero if we failed
# to execute nsls; this probably indicates a transient error.  If the
# success code is non-zero, then the rest are the file attributes; if
# the values are undef, the file doesn't exist.
sub fileProperties
{
    my ($pfn, $cache) = @_;
    if (! exists $cache->{$pfn})
    {
	# Fill cache for the whole directory
	my $dir = $pfn; $dir =~ s|/[^/]+$||;
	open (NSLS, "nsls -lT $dir |") || return (0, undef, undef, undef);
	while (<NSLS>)
	{
	    chomp;
	    my ($tape, $pos, $size, $file) = (split (/\s+/, $_))[3,4,6,8];
	    $cache->{"$dir/$file"} = [ $tape, $pos, $size ];
	}
	close (NSLS);
    }

    return (1, @{$cache->{$pfn} || []});
}

# Like fileProperties(), but invoked when we think the file doesn't
# exist.  Does a slightly more expensive check to look for zero-size
# files: they are not migrated to tape, so they don't have a tape.
sub filePropertiesForMissing
{
    my ($pfn, $cache) = @_;
    if (! exists $cache->{$pfn})
    {
	# Like above, but without "-T" option.  This does list zero
	# size files, but they obviously have no tape or position.
	my $dir = $pfn; $dir =~ s|/[^/]+$||;
	open (NSLS, "nsls -l $dir |") || return (0, undef, undef, undef);
	while (<NSLS>)
	{
	    chomp;
	    my ($size, $file) = (split(/\s+/, $_))[4,8];
	    $cache->{"$dir/$file"} = [ undef, undef, $size ]
	        if ! exists $cache->{"$dir/$file"};
	}
	close (NSLS);
    }

    return (1, @{$cache->{$pfn} || []});
}

# Find out files stager knows about.  Returns a reference to a hash of
# PFNs currently in the stager disk pool, each with stager status such
# as "STAGED" or "STAGEIN".   Returns undef if stageqry cannot be run.
# The latter should be treated as a transient error.
sub stagerFileList
{
    open(STAGEQ, "stageqry -h $ENV{STAGE_HOST} -p $ENV{STAGE_POOL} -a --format status,xfile |")
	|| return undef;
    my $files = {};
    while (<STAGEQ>) {
	my ($status, $file) = split(/\s+/, $_);
	$files->{$file} = $status;
    }
    close(STAGEQ);
    return $files;
}

# Figure out tape mount load level.  Returns a tuple of total number
# of requests and requests by ourselves.  The values are undef if we
# cannot run the necessary programs for some reason.  This should be
# considered a transient error.
sub tapeMountLoad
{
    my ($total, $ours) = (0, 0);
    open(QSTAT, "showqueues -x |")
	or do { &alert ("cannot run showqueues: $!"); return (undef, undef); };
    while (<QSTAT>)
    {
	$total++ if /^Q/;
	$ours++ if /^Q.*cmsprod/; # FIXME: don't hardcode cmsprod
    }
    close (QSTAT);
    return ($total, $ours);
}

# Purge old entries from our caches.
sub purgeCache
{
    my ($cache) = @_;

    # Remove old positive matches after a day to avoid building up
    # a cache over a time.  Remove negative matches after an hour.
    my $now = time ();
    my $oldmatch = $now - 86400;
    my $oldnomatch = $now - 3600;

    # Remove entries that are too old
    foreach my $item (keys %$cache)
    {
	my ($time, @rest) = ($cache->{$item} =~ /^(\d+):(.*)/);
	delete $cache->{$item}
	   if ((! @rest && $time < $oldnomatch) || $time < $oldmatch);
    }
}

# Get the list of files that have been requested for stage-in.
sub getPendingFiles
{
    my ($self, $dbh) = @_;
    my %unknown = ();
    my $result = [];

    # First fetch files from database.  If we come across something
    # we haven't seen before, remember it but don't look it up yet.
    # Otherwise just push the (GUID, PFN, TIME) tuple into result.
    #
    # "Recently wanted" == time stamp on "wanted" state is less than
    # fifteen minutes old.  Download agents expecting files will be
    # refreshing the wanted status more often than that when they are
    # running and capable of downloading files.
    my %seen = ();
    my $stmt = &dbexec($dbh, qq{
	   select guid, to_timestamp
	   from t_transfer_state
	   where from_node = :node
	     and to_state = 1
	     and to_timestamp >= :recent
           order by to_timestamp asc},
	   ":node" => $self->{MYNODE}, ":recent" => time() - 15*60);
    while (my ($guid, $time) = $stmt->fetchrow())
    {
	next if $seen{$guid};
	$seen{$guid} = 1;

	my $cache = $self->{PFN_CACHE}{$guid};
	if ($cache && $cache =~ /^\d+:(.*)/)
	{
	    # Known in cache.  Just push into result.
	    push (@$result, [ $guid, $1 || undef, $time ]);
	}
	else
	{
	    # Not seen this yet.  Remember it.
	    $unknown{$guid} = $time;
	}
    }

    # Now go over everything that we hadn't seen yet.  Look up all
    # the GUID/PFN mappings in one go with a single efficient pull,
    # and then cache the results and fill in result.
    if (my @items = keys %unknown)
    {
        my $now = time();
        my $pfns = &guidToPFN ([ @items ], "direct", "local", @{$self->{PFN_QUERY}});
        foreach my $guid (@items)
        {
	    my $pfn = $pfns->{$guid};
	    $self->{PFN_CACHE}{$guid} = "$now:@{[$pfn || '']}";
	    $self->{GUID_CACHE}{$pfn} = "$now:$guid" if defined $pfn;
	    push (@$result, [ $guid, $pfn, $unknown{$guid} ]);
        }
    }

    return $result;
}

# Get the list of files stager knows about
sub getStagerFiles
{
    my ($self) = @_;
    my $files = &stagerFileList();
    return undef if ! $files;

    my %unknown = ();
    my $result = [];

    # First pass.  If we come across something we haven't seen
    # before, remember it but don't look it up yet.  Otherwise
    # just push the (GUID, PFN, TIME) tuple into result.
    foreach my $pfn (keys %$files)
    {
	my $status = $files->{$pfn};
	my $cache = $self->{GUID_CACHE}{$pfn};
	if ($cache && $cache =~ /^\d+:(.*)/)
	{
	    # Known in cache.  Just push into result.
	    push (@$result, [ $1 || undef, $pfn, $status ]);
	}
	else
	{
	    # Not seen this yet.  Remember it.
	    $unknown{$pfn} = 1;
	}
    }

    # Now go over everything that we hadn't seen yet.  Look up all
    # the GUID/PFN mappings in one go with a single efficient pull,
    # and then cache the results and fill in result.
    if (my @items = keys %unknown)
    {
        my $now = time();
        my $guids = &pfnToGUID ([ @items ], "direct", "local", @{$self->{PFN_QUERY}});
        foreach my $pfn (@items)
        {
	    my $guid = $guids->{$pfn};
	    $self->{PFN_CACHE}{$guid} = "$now:$pfn" if defined $guid;
	    $self->{GUID_CACHE}{$pfn} = "$now:@{[$guid || '']}";
	    push (@$result, [ $guid, $pfn, $files->{$pfn} ]);
        }
    }

    return $result;
}

# Build status object from stager state and pending requests.
sub buildStatus
{
    my ($self, $stager, $pending) = @_;
    return undef if ! $stager || ! $pending;

    my $nsls = $self->{NSLS_CACHE};
    if (($nsls->{VALIDITY} || 0) < time())
    {
	$nsls->{VALIDITY} = time() + 4 * 3600;
	$nsls->{FILES} = {};
    }

    my $cache = $nsls->{FILES};
    my $files = {};
    foreach my $file (@$stager)
    {
	my ($guid, $pfn, $status) = @$file;
	$files->{$pfn} = { GUID => $guid, PFN => $pfn, STATUS => $status };
    }

    foreach my $file (@$pending)
    {
	my ($guid, $pfn, $time) = @$file;

	do { &warn ("ignoring unknown wanted file $guid"); next } if ! $pfn;
	$files->{$pfn} ||= { GUID => $guid, PFN => $pfn, STATUS => "UNKNOWN" };
	if ($files->{$pfn}{STATUS} eq 'UNKNOWN')
	{
	    my ($success, $tape, $pos, $size) = &fileProperties ($pfn, $cache);
	    do { $files->{$pfn}{STATUS} = "RETRY"; next } if ! $success;
	    if (! defined $tape || ! defined $pos || ! defined $size)
	    {
	        ($success, $tape, $pos, $size) = &filePropertiesForMissing ($pfn, $cache);
		do { $files->{$pfn}{STATUS} = "STAGED"; next } if defined $size;
	        do { &alert ("non-existent file $pfn"); $files->{$pfn}{STATUS} = "RETRY"; next }
	            if (! defined $tape || ! defined $pos || ! defined $size);
	    }
	
	    $files->{$pfn}{TAPE} = $tape;
	    $files->{$pfn}{POS} = $pos;
	    $files->{$pfn}{SIZE} = $size;
	    $files->{$pfn}{TIME} = $time;
        }
    }

    return $files;
}

# Called by agent main routine before sleeping.  Pick up stage-in
# assignments and map current stager state back to the database.
sub idle
{
    my ($self, @pending) = @_;

    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Clean up caches
	my %timing = (START => &mytimeofday());
	&purgeCache ($self->{PFN_CACHE});
	&purgeCache ($self->{GUID_CACHE});
	$timing{PURGE} = &mytimeofday();

	# Get pending and stager files
	my $files = $self->buildStatus ($self->getStagerFiles (),
					$self->getPendingFiles ($dbh));
	return if ! $files;
	$timing{STATUS} = &mytimeofday();

	# Update file status.  First mark everything not staged in,
	# then as staged-in the files currently in stager catalogue.
	my $now = time();
	my $dbcache = $self->{DB_CACHE};
	if (($dbcache->{VALIDITY} || 0) < $now)
	{
	    $dbcache->{VALIDITY} = $now + 4*3600;
	    $dbcache->{FILES} = {};
	    &dbexec($dbh,qq{
	        update t_replica_state
	        set state = 0, state_timestamp = :now
	        where node = :node and state = 1},
	        ":node" => $self->{MYNODE}, ":now" => $now);
	}

	my $stmt = $dbh->prepare(qq{
	    update t_replica_state
	    set state = :state, state_timestamp = :now
	    where guid = :guid and node = :node});
	foreach my $f (values %$files)
	{
	    next if ! defined $f->{GUID};
	    my $isstaged = $f->{STATUS} eq 'STAGED';
	    if ($isstaged && ! $dbcache->{FILES}{$f->{GUID}})
	    {
		$dbcache->{FILES}{$f->{GUID}} = 1;
		&dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			     ":guid" => $f->{GUID}, ":state" => 1);
	    }
	    elsif (! $isstaged && $dbcache->{FILES}{$f->{GUID}})
	    {
		delete $dbcache->{FILES}{$f->{GUID}};
		&dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			     ":guid" => $f->{GUID}, ":state" => 0);
	    }
	}
	$dbh->commit();
	$timing{DATABASE} = &mytimeofday();

	# Organise files into stage-in order.  Here we only arrange the
	# files into time order, oldest "wanted" first.  When we take
	# files from this list, we take first by tape, then position.
	my @requests =
	    sort { $a->{TIME} <=> $b->{TIME} }
	    grep ($_->{STATUS} eq 'UNKNOWN', values %$files);

	# Now issue requests for the files in batches.
	my $nreq = scalar @requests;
	while (@requests)
	{
	    # FIXME: Throttle stage-in requests based on how much we have
	    # already committed to transfer (t_transfer_state.from_state=1)
	    # and how much space (free space and unpinned files) is on the
	    # stager pool.

	    # Suspend until the system load drops low enough, and then go back
	    # to start of the loop so we reconsider staged in files and send
	    # them out.  Also makes it safer if we get stopped.
	    my $nrequests = scalar @requests;
	    my ($tapereqs, $mytapereqs) = &tapeMountLoad();
	    my $stagereqs = scalar (grep($_->{STATUS} eq 'STAGEIN', values %$files));
	    if (! defined $tapereqs
	        || ! defined $mytapereqs
	        || $tapereqs > $self->{MAXTAPEREQS}
	        || $mytapereqs > $self->{MAXMYTAPEREQS}
	        || $stagereqs > $self->{MAXSTAGEREQS})
	    {
	        $tapereqs = 'U' if ! defined $tapereqs;
	        $mytapereqs = 'U' if ! defined $mytapereqs;
	        $stagereqs = 'U' if ! defined $stagereqs;
	        &note ("overloaded ($tapereqs/$mytapereqs/$stagereqs/$nrequests)");
	        last;
	    }

	    # Go through requested files, pick the oldest wanted file,
	    # and then all the files on the same tape, sorted by tape
	    # position.  Feed these files in bunches of MAXFILES to
	    # avoid exceeding command line length limits, however do
	    # ask for all the files on the tape without stopping for
	    # stager limits.
	    while (@requests && $stagereqs <= $self->{MAXSTAGEREQS})
	    {
		my $tape = $requests[0]{TAPE};
		my @tapefiles = sort { $a->{POS} cmp $b->{POS} }
		                grep($_->{TAPE} eq $tape, @requests);
		@requests = grep($_->{TAPE} ne $tape, @requests);
		&logmsg ("stagein @{[scalar @tapefiles]} files on tape $tape,"
			 . " @{[scalar @requests]} of $nreq left");

		while (@tapefiles && $stagereqs <= 7*$self->{MAXSTAGEREQS})
		{
		    my @slice = splice (@tapefiles, 0, $self->{MAXFILES});
	            my $rc = &runcmd ("stagein", "--nowait", "--rdonly",
			              "-h", $ENV{STAGE_HOST}, "-p", $ENV{STAGE_POOL},
			              "-A", "deferred",
			              map { ("-M", $_->{PFN}) } @slice);
	            &alert ("stagein failed: @{[&runerror($rc)]}") if ($rc);

	            # Sleep a bit, castor doesn't like rapid-fire request chains
	            select (undef, undef, undef, 0.33);

	            # Mark these files as pending now
	            map { $_->{STATUS} = "STAGEIN" } @slice;
		    $stagereqs += scalar @slice;
		}
	    }
	}

	$timing{REQUESTS} = &mytimeofday();
	&logmsg ("timing:"
		 . " nreq=$nreq"
		 . " purge=@{[sprintf '%.1f', $timing{PURGE} - $timing{START}]}"
		 . " status=@{[sprintf '%.1f', $timing{STATUS} - $timing{PURGE}]}"
		 . " database=@{[sprintf '%.1f', $timing{DATABASE} - $timing{STATUS}]}"
		 . " requests=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{DATABASE}]}"
		 . " all=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{START}]}");
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
