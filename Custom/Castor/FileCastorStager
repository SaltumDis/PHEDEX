#!/usr/bin/perl

## Manager castor stage-in pool based on master pool manager requests.
##
## This agent checks for files marked in the database as "stage-in"
## and issues stage-in requests for them.  It updates the current
## stage-in status of the files in TMDB based on stager disk state.
## (FIXME: Handle stage purge requests too?)
##
## The stage-in is done according to the instructions of the Castor
## team to avoid overloading the stager and tape systems.  The stage
## requests are ordered by tape name and position of the files.  We
## issue several stage requests in one command to reduce the number
## of stager processes at the server (there is one process for each
## request).  Moreover, we throttle ourselves back if the number of
## pending tape mounts is high (~4000) or pending stage requests is
## high (~200).
##
## As TMDB only contains GUIDs and no PFNs, we map the guids into
## file names through the catalogue (removing site-specific prefix).
## Correspondingly, files reported by stager to be on disk are mapped
## back to GUIDs.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
$ENV{STAGE_HOST} ||= "stagecmsprod";	# Castor stage host
$ENV{STAGE_POOL} ||= "cms_prod2";	# Castor stage pool
my %args = (DBITYPE => "Oracle", WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-stagehost' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_HOST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-stagepool' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_POOL} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-prefix' && scalar @ARGV > 1)
    { shift (@ARGV); $args{RM_PATH_PREFIX} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{MYNODE} || !$args{RM_PATH_PREFIX})
{
    print STDERR
	"usage: $me -node TMDB-NODE -prefix PATH-PREFIX-TO-REMOVE\n",
	"    -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n",
	"    [-stagehost STAGE-HOST] [-stagepool POOL]\n";
    exit (1);
}

my $agent = new FileCastorStager (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileCastorStager; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  MYNODE => undef,		# My TMDB node name
	  	  RM_PATH_PREFIX => undef,	# Path prefix to remove
	  	  AGENTID => "Stager",		# Identity for activity logs
    	    	  MAXTAPEREQS => 4000,		# Max pending tape mounts
    	    	  MAXMYTAPEREQS => 1000,	# Max pending tape mounts by myself
    	    	  MAXSTAGEREQS => 200,		# Max pending stager requests
    	    	  MAXFILES => 50,		# Max number of files in one request
		  PFN_CACHE => {},		# GUID -> PFN cache
		  GUID_CACHE => {});		# PFN -> GUID cache
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Find out if the PFN exists in Castor, and if so, the tape it is on,
# the position on the tape and the file size.  Return a four-tuple of
# success, tape, position and size.  The success is zero if we failed
# to execute nsls; this probably indicates a transient error.  If the
# success code is non-zero, then the rest are the file attributes; if
# the values are undef, the file doesn't exist.
sub fileProperties
{
    my ($pfn, $cache) = @_;
    if (! exists $cache->{$pfn})
    {
	# Fill cache for the whole directory
	my $dir = $pfn; $dir =~ s|/[^/]+$||;
	open (NSLS, "nsls -lT $dir |") || return (0, undef, undef, undef);
	while (<NSLS>)
	{
	    chomp;
	    my ($tape, $pos, $size, $file) = (split (/\s+/, $_))[3,4,6,8];
	    $cache->{"$dir/$file"} = [ $tape, $pos, $size ];
	}
	close (NSLS);
    }

    return (1, @{$cache->{$pfn} || []});
}

# Find out files stager knows about.  Returns a reference to a hash of
# PFNs currently in the stager disk pool, each with stager status such
# as "STAGED" or "STAGEIN".   Returns undef if stageqry cannot be run.
# The latter should be treated as a transient error.
sub stagerFileList
{
    open(STAGEQ, "stageqry -h $ENV{STAGE_HOST} -p $ENV{STAGE_POOL} -a --format status,xfile |")
	|| return undef;
    my $files = {};
    while (<STAGEQ>) {
	my ($status, $file) = split(/\s+/, $_);
	$files->{$file} = $status;
    }
    close(STAGEQ);
    return $files;
}

# Figure out tape mount load level.  Returns a tuple of total number
# of requests and requests by ourselves.  The values are undef if we
# cannot run the necessary programs for some reason.  This should be
# considered a transient error.
sub tapeMountLoad
{
    my ($total, $ours) = (0, 0);
    open(QSTAT, "showqueues -x |")
	or do { &alert ("cannot run showqueues: $!"); return (undef, undef); };
    while (<QSTAT>)
    {
	$total++ if /^Q/;
	$ours++ if /^Q.*cmsprod/; # FIXME: don't hardcode cmsprod
    }
    close (QSTAT);
    return ($total, $ours);
}

# Get the catalogue contact information for a node.
sub getCatalogue
{
    my ($dbh, $mynode) = @_;
    return (&dbexec($dbh, qq{
	select catalogue_contact, host_string
	from t_nodes where node_name = :node},
	":node" => $mynode))[0]->fetchrow_arrayref();
}

# Purge old entries from our caches.
sub purgeCache
{
    my ($cache) = @_;

    # Remove old positive matches after a day to avoid building up
    # a cache over a time.  Remove negative matches after an hour.
    my $now = time ();
    my $oldmatch = $now - 86400;
    my $oldnomatch = $now - 3600;

    # Remove entries that are too old
    foreach my $item (keys %$cache)
    {
	my ($time, @rest) = @{$cache->{$item}};
	delete $cache->{$item}
	   if ((! @rest && $time < $oldnomatch) || $time < $oldmatch);
    }
}

# Get the list of files that have been requested for stage-in.
sub getPendingFiles
{
    my ($self, $dbh, $catalogue, $hostkey) = @_;
    my %unknown = ();
    my $result = [];

    # First fetch files from database.  If we come across something
    # we haven't seen before, remember it but don't look it up yet.
    # Otherwise just push the (GUID, PFN, TIME) tuple into result.
    my ($stmt) = &dbexec($dbh, qq{
    	select guid, local_time_stamp from t_replica_state
	where node = :node and local_state = 10},
	":node" => $self->{MYNODE});
    while (my $row = $stmt->fetchrow_arrayref())
    {
	my ($guid, $time) = @$row;
	if (my $cache = $self->{PFN_CACHE}{$guid})
	{
	    # Known in cache.  Just push into result.
	    push (@$result, [ $guid, $cache->[1], $time ]);
	}
	else
	{
	    # Not seen this yet.  Remember it.
	    $unknown{$guid} = $time;
	}
    }

    # Now go over everything that we hadn't seen yet.  Look up all
    # the GUID/PFN mappings in one go with a single efficient pull,
    # and then cache the results and fill in result.
    if (my @items = keys %unknown)
    {
        my $now = time();
        my $pfns = &guidToPFN ([ @items ], $catalogue, $hostkey);
        my $prefix = $self->{RM_PATH_PREFIX};
        foreach my $guid (@items)
        {
	    my $pfn = $pfns->{$guid};
	    $pfn =~ s/$prefix// if defined $pfn;
	    $self->{PFN_CACHE}{$guid} = [ time(), $pfn ];
	    $self->{GUID_CACHE}{$pfn} = [ time(), $guid ] if defined $pfn;
	    push (@$result, [ $guid, $pfn, $unknown{$guid} ]);
        }
    }

    return $result;
}

# Get the list of files stager knows about
sub getStagerFiles
{
    my ($self, $catalogue, $hostkey) = @_;
    my $files = &stagerFileList();
    return undef if ! $files;

    my %unknown = ();
    my $result = [];

    # First pass.  If we come across something we haven't seen
    # before, remember it but don't look it up yet.  Otherwise
    # just push the (GUID, PFN, TIME) tuple into result.
    foreach my $pfn (keys %$files)
    {
	my $status = $files->{$pfn};
	if (my $cache = $self->{GUID_CACHE}{$pfn})
	{
	    # Known in cache.  Just push into result.
	    push (@$result, [ $cache->[1], $pfn, $status ]);
	}
	else
	{
	    # Not seen this yet.  Remember it.
	    $unknown{$pfn} = 1;
	}
    }

    # Now go over everything that we hadn't seen yet.  Look up all
    # the GUID/PFN mappings in one go with a single efficient pull,
    # and then cache the results and fill in result.
    if (my @items = keys %unknown)
    {
        my $now = time();
        my $prefix = $self->{RM_PATH_PREFIX};
        my $guids = &pfnToGUID ([ map { $prefix . $_ } @items ], $catalogue, $hostkey);
        foreach my $pfn (@items)
        {
	    my $guid = $guids->{$prefix.$pfn};
	    $self->{PFN_CACHE}{$guid} = [ time(), $pfn ] if defined $guid;
	    $self->{GUID_CACHE}{$pfn} = [ time(), $guid ];
	    push (@$result, [ $guid, $pfn, $files->{$pfn} ]);
        }
    }

    return $result;
}

# Build status object from stager state and pending requests.
sub buildStatus
{
    my ($self, $stager, $pending) = @_;
    return undef if ! $stager || ! $pending;

    my $cache = {};
    my $files = {};
    foreach my $file (@$stager)
    {
	my ($guid, $pfn, $status) = @$file;
	$files->{$pfn} = { GUID => $guid, PFN => $pfn, STATUS => $status };
    }

    foreach my $file (@$pending)
    {
	my ($guid, $pfn, $time) = @$file;

	$files->{$pfn} ||= { GUID => $guid, PFN => $pfn, STATUS => "UNKNOWN" };
	if ($files->{$pfn}{STATUS} eq 'UNKNOWN')
	{
	    my ($success, $tape, $pos, $size) = &fileProperties ($pfn, $cache);
	    do { $files->{$pfn}{STATUS} = "RETRY"; next } if ! $success;
	    do { &alert ("non-existent file $pfn"); $files->{$pfn}{STATUS} = "RETRY"; next }
	        if (! defined $tape || ! defined $pos || ! defined $size);
	
	    $files->{$pfn}{TAPE} = $tape;
	    $files->{$pfn}{POS} = $pos;
	    $files->{$pfn}{SIZE} = $size;
        }
    }

    return $files;
}

# Called by agent main routine before sleeping.  Pick up stage-in
# assignments and map current stager state back to the database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Get my catalogue details, pending and stager files
	my %timing = (START => &mytimeofday());
	&purgeCache ($self->{PFN_CACHE});
	&purgeCache ($self->{GUID_CACHE});
	$timing{PURGE} = &mytimeofday();

	my $catalogue = &getCatalogue ($dbh, $self->{MYNODE});
	return if ! $catalogue;

	my $files = $self->buildStatus ($self->getStagerFiles (@$catalogue),
					$self->getPendingFiles ($dbh, @$catalogue));
	return if ! $files;
	$timing{STATUS} = &mytimeofday();

	# Update file status.  First mark everything not staged in,
	# then as staged-in the files currently in stager catalogue.
	my $now = time();
	&dbexec($dbh,qq{
	    update t_replica_state
	    set local_state = 0, local_time_stamp = :now
	    where node = :node and local_state = 1},
	    ":node" => $self->{MYNODE}, ":now" => $now);
	my $stmt = $dbh->prepare(qq{
	    update t_replica_state
	    set local_state = 1, local_time_stamp = :now
	    where guid = :guid and node = :node and local_state = 0});
	foreach my $f (grep (defined $_->{GUID} && $_->{STATUS} eq 'STAGED',
			     values %$files))
	{
	    $stmt->bind_param (":now", $now);
	    $stmt->bind_param (":guid", $f->{GUID});
	    $stmt->bind_param (":node", $self->{MYNODE});
	    $stmt->execute ();
	}
	$dbh->commit();
	$timing{DATABASE} = &mytimeofday();

        # Determine the files that need to be staged in, in a good order
        # i.e. sorted by tape and position, then issue requests in batches.
        my @requests = sort { $a->{TAPE} cmp $b->{TAPE} || $a->{POS} cmp $b->{POS} }
		       grep ($_->{STATUS} eq 'UNKNOWN', values %$files);
	my $nreq = scalar @requests;

	while (@requests)
	{
	    # Suspend until the system load drops low enough, and then go back
	    # to start of the loop so we reconsider staged in files and send
	    # them out.  Also makes it safer if we get stopped.
	    my $nrequests = scalar @requests;
	    my ($tapereqs, $mytapereqs) = &tapeMountLoad();
	    my $stagereqs = scalar (grep($_->{STATUS} eq 'STAGEIN', values %$files));
	    if (! defined $tapereqs
	        || ! defined $mytapereqs
	        || $tapereqs > $self->{MAXTAPEREQS}
	        || $mytapereqs > $self->{MAXMYTAPEREQS}
	        || $stagereqs > $self->{MAXSTAGEREQS})
	    {
	        $tapereqs = 'U' if ! defined $tapereqs;
	        $mytapereqs = 'U' if ! defined $mytapereqs;
	        $stagereqs = 'U' if ! defined $stagereqs;
	        &note ("overloaded ($tapereqs/$mytapereqs/$stagereqs/$nrequests)");
	        last;
	    }

	    # Select the next up to maxfiles to stage in
	    my $nfiles = ($#requests > $self->{MAXFILES} ? $self->{MAXFILES} : $#requests);
	    my @slice = splice(@requests, 0, $nfiles);

	    # Issue background stage-in
	    my $rc = &runcmd ("stagein", "--nowait", "--rdonly",
			      "-h", $ENV{STAGE_HOST}, "-p", $ENV{STAGE_POOL},
			      "-A", "deferred",
			      map { ("-M", $_->{PFN}) } @slice);
	    &alert ("stagein failed: @{[&runerror($rc)]}") if ($rc);

	    # Mark these files as pending now
	    map { $_->{STATUS} = "STAGEIN" } @slice;

	    # Sleep a bit, castor doesn't like rapid-fire request chains
	    select (undef, undef, undef, 0.33);
	}

	$timing{REQUESTS} = &mytimeofday();
	&logmsg ("timing:"
		 . " nreq=$nreq"
		 . " purge=@{[sprintf '%.1f', $timing{PURGE} - $timing{START}]}"
		 . " status=@{[sprintf '%.1f', $timing{STATUS} - $timing{PURGE}]}"
		 . " database=@{[sprintf '%.1f', $timing{DATABASE} - $timing{STATUS}]}"
		 . " requests=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{DATABASE}]}"
		 . " all=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{START}]}");
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
