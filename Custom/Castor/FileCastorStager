#!/usr/bin/perl

## Manager castor stage-in pool based on master pool manager requests.
##
## This agent checks for files marked in the database as "stage-in"
## and issues stage-in requests for them.  It updates the current
## stage-in status of the files in TMDB based on stager disk state.
## (FIXME: Handle stage purge requests too?)
##
## The stage-in is done according to the instructions of the Castor
## team to avoid overloading the stager and tape systems.  The stage
## requests are ordered by tape name and position of the files.  We
## issue several stage requests in one command to reduce the number
## of stager processes at the server (there is one process for each
## request).  Moreover, we throttle ourselves back if the number of
## pending tape mounts is high (~4000) or pending stage requests is
## high (~200).
##
## As TMDB only contains GUIDs and no PFNs, we map the guids into
## file names through the catalogue (removing site-specific prefix).
## Correspondingly, files reported by stager to be on disk are mapped
## back to GUIDs.

BEGIN { use strict; use warnings; }
my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
$ENV{STAGE_HOST} ||= "stagecmsprod";	# Castor stage host
$ENV{STAGE_POOL} ||= "cms_prod2";	# Castor stage pool
my %args = (DBITYPE => "Oracle", WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-stagehost' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_HOST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-stagepool' && scalar @ARGV > 1)
    { shift (@ARGV); $ENV{STAGE_POOL} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-prefix' && scalar @ARGV > 1)
    { shift (@ARGV); $args{RM_PATH_PREFIX} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{MYNODE} || !$args{RM_PATH_PREFIX})
{
    print STDERR
	"usage: $me -node TMDB-NODE -prefix PATH-PREFIX-TO-REMOVE\n",
	"    -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n",
	"    [-stagehost STAGE-HOST] [-stagepool POOL]\n";
    exit (1);
}

my $agent = new FileCastorStager (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for the castor export stage-in agent.  This one manages
# stage-in requests and reflects current stager status to the
# local status of the replica.
package FileCastorStager; use strict; use warnings; use base 'UtilsAgent';
use DBI;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  MYNODE => undef,		# My TMDB node name
	  	  RM_PATH_PREFIX => undef,	# Path prefix to remove
    	    	  MAXTAPEREQS => 4000,		# Max pending tape mounts
    	    	  MAXMYTAPEREQS => 1000,	# Max pending tape mounts by myself
    	    	  MAXSTAGEREQS => 200,		# Max pending stager requests
    	    	  MAXFILES => 50);		# Max number of files in one request
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Find out if the PFN exists in Castor, and if so, the tape it is on,
# the position on the tape and the file size.  Return a four-tuple of
# success, tape, position and size.  The success is zero if we failed
# to execute nsls; this probably indicates a transient error.  If the
# success code is non-zero, then the rest are the file attributes; if
# the values are undef, the file doesn't exist.
sub fileProperties
{
    my ($pfn, $cache) = @_;
    if (! exists $cache->{$pfn})
    {
	# Fill cache for the whole directory
	my $dir = $pfn; $dir =~ s|/[^/]+$||;
	open (NSLS, "nsls -lT $dir |") || return (0, undef, undef, undef);
	while (<NSLS>)
	{
	    chomp;
	    my ($tape, $pos, $size, $file) = (split (/\s+/, $_))[3,4,6,8];
	    $cache->{"$dir/$file"} = [ $tape, $pos, $size ];
	}
	close (NSLS);
    }

    return (1, @{$cache->{$pfn} || []});
}

# Find out files stager knows about.  Returns a reference to a hash of
# PFNs currently in the stager disk pool, each with stager status such
# as "STAGED" or "STAGEIN".   Returns undef if stageqry cannot be run.
# The latter should be treated as a transient error.
sub stagerFileList
{
    open(STAGEQ, "stageqry -h $ENV{STAGE_HOST} -p $ENV{STAGE_POOL} -a --format status,xfile |")
	|| return undef;
    my $files = {};
    while (<STAGEQ>) {
	my ($status, $file) = split(/\s+/, $_);
	$files->{$file} = $status;
    }
    close(STAGEQ);
    return $files;
}

# Figure out tape mount load level.  Returns a tuple of total number
# of requests and requests by ourselves.  The values are undef if we
# cannot run the necessary programs for some reason.  This should be
# considered a transient error.
sub tapeMountLoad
{
    my ($total, $ours) = (0, 0);
    open(QSTAT, "showqueues -x |")
	or do { &alert ("cannot run showqueues: $!"); return (undef, undef); };
    while (<QSTAT>)
    {
	$total++ if /^Q/;
	$ours++ if /^Q.*cmsprod/; # FIXME: don't hardcode cmsprod
    }
    close (QSTAT);
    return ($total, $ours);
}

# Map a GUID to a PFN using a catalogue
sub guidToPFN
{
    my ($guid, $catalogue, $host) = @_;

    # FIXME: remove message suppression when pool has learnt to print
    # diagnostic output somewhere else other than stdout...
    open (PFNS, "POOL_OUTMSG_LEVEL=100 FClistPFN -u '$catalogue' -q \"guid='$guid'\" |")
	or do { &alert ("cannot run FClistPFN: $!"); return undef; };
    my @pfns = grep (/$host/, map { chomp; $_ } <PFNS>);
    close (PFNS);
    return $pfns[0];
}

# Map a PFN to GUID using a catalogue
sub pfnToGuid
{
    my ($pfn, $catalogue, $host) = @_;
    # FIXME: remove message suppression when pool has learnt to print
    # diagnostic output somewhere else other than stdout...
    my $home = $0; $home =~ s|/[^/]+$||;
    open (GUIDS, "POOL_OUTMSG_LEVEL=100 $home/FClistGuidPFN -u '$catalogue' -p '$pfn' |")
	or do { &alert ("cannot run FClistGuidPFN: $!"); return undef; };
    my @guids = map { chomp; [ split (/\s+/, $_) ] } <GUIDS>;
    close (GUIDS);
    return $guids[0][0];
}

# Get the catalogue contact information for a node.
sub getCatalogue
{
    my ($dbh, $mynode) = @_;
    return $dbh->selectrow_arrayref (qq{
			select catalogue_contact, host_string
			from t_nodes
			where node_name = '$mynode'});
}

# Get the list of files that have been requested for stage-in.
sub getPendingFiles
{
    my ($self, $dbh, $catalogue, $hostkey) = @_;
    my $result = [];
    my $mynode = $self->{MYNODE};
    my $prefix = $self->{RM_PATH_PREFIX};
    my $stmt = $dbh->prepare (qq{
    		select rs.guid, rs.local_time_stamp
		from t_replica_state rs
		where rs.node = '$mynode'
	  	  and rs.state = 2
	  	  and mod(rs.local_state,1000) = 10});
    $stmt->execute();
    while (my $row = $stmt->fetchrow_arrayref())
    {
	my ($guid, $time) = @$row;
	my $pfn = $self->{PFN_CACHE}{$guid};
	if (! $pfn && ($pfn = &guidToPFN ($guid, $catalogue, $hostkey)))
	{
	    $pfn =~ s/$prefix//;
	    $self->{PFN_CACHE}{$guid} = $pfn;
	    $self->{GUID_CACHE}{$pfn} = $guid;
	}
	push (@$result, [ $guid, $pfn, $time ]);
    }

    return $result;
}

# Get the list of files currently staged-in.
sub getStagerFiles
{
    my ($self, $catalogue, $hostkey) = @_;
    my $files = &stagerFileList();
    return undef if ! $files;

    my $prefix = $self->{RM_PATH_PREFIX};
    my $result = [];
    foreach my $pfn (keys %$files)
    {
	my $status = $files->{$pfn};
	my $guid = $self->{GUID_CACHE}{$pfn};
	if (! $guid && ($guid = &pfnToGuid ($prefix . $pfn, $catalogue, $hostkey)))
	{
	    $self->{GUID_CACHE}{$pfn} = $guid;
	    $self->{PFN_CACHE}{$guid} = $pfn;
        }
	push (@$result, [ $guid, $pfn, $status ]);
    }

    return $result;
}

# Build status object from stager state and pending requests.
sub buildStatus
{
    my ($self, $stager, $pending) = @_;
    return undef if ! $stager || ! $pending;

    my $cache = {};
    my $files = {};
    foreach my $file (@$stager)
    {
	my ($guid, $pfn, $status) = @$file;
	$files->{$pfn} = { GUID => $guid, PFN => $pfn, STATUS => $status };
    }

    foreach my $file (@$pending)
    {
	my ($guid, $pfn, $time) = @$file;

	$files->{$pfn} ||= { GUID => $guid, PFN => $pfn, STATUS => "UNKNOWN" };
	if ($files->{$pfn}{STATUS} eq 'UNKNOWN')
	{
	    my ($success, $tape, $pos, $size) = &fileProperties ($pfn, $cache);
	    do { $files->{$pfn}{STATUS} = "RETRY"; next } if ! $success;
	    do { &alert ("non-existent file $pfn"); $files->{$pfn}{STATUS} = "RETRY"; next }
	        if (! defined $tape || ! defined $pos || ! defined $size);
	
	    $files->{$pfn}{TAPE} = $tape;
	    $files->{$pfn}{POS} = $pos;
	    $files->{$pfn}{SIZE} = $size;
        }
    }

    return $files;
}

# Called by agent main routine before sleeping.  Pick up stage-in
# assignments and map current stager state back to the database.
sub idle
{
    my ($self, @pending) = @_;

    # FIXME: Update agent status
    # FIXME: Pick up and process messages to me

    # Check how much is wanted downstream.  Select the files wanted
    # downstream still pending for outward transfer here.  We fetch
    # in one query the current state here, whether we have checksum,
    # the number of requested copies, and the latest request time.
    my $dbh = undef;
    eval
    {
	my $mynode = $self->{MYNODE};
	$dbh = DBI->connect ("DBI:$self->{DBITYPE}:$self->{DBNAME}",
	    		     $self->{DBUSER}, $self->{DBPASS},
			     { RaiseError => 1, AutoCommit => 0 });

	# Get my catalogue details, pending and stager files
	my $catalogue = &getCatalogue ($dbh, $self->{MYNODE});
	return if ! $catalogue;

	my $files = $self->buildStatus ($self->getStagerFiles (@$catalogue),
					$self->getPendingFiles ($dbh, @$catalogue));
	return if ! $files;

	# Update file status.  First mark everything currently marked
	# staged-in as not staged in, and then marked staged-in only
	# the files that are truly currently staged-in.
	my $now = time();
	$dbh->do(qq{update t_replica_state
		set state = 2,
		    time_stamp = $now
		    local_state = trunc(local_state,-3) + 0,
		    local_time_stamp = $now
		where node = '$mynode' and mod(local_state,1000) = 1});
	foreach my $guid (map { $_->{GUID} }
			  grep (defined $_->{GUID} && $_->{STATUS} eq 'STAGED',
				values %$files))
	{
	    $dbh->do(qq{update t_replica_state
		set local_state = trunc(local_state,-3) + 1,
		    local_time_stamp = $now
		where guid = '$guid' and node = '$mynode'});
	    # &logmsg ("stats: $guid @{[&formatElapsedTime($timing)]} success");
	}
	$dbh->commit();

        # Determine the files that need to be staged in, in a good order
        # i.e. sorted by tape and position, then issue requests in batches.
	# Note that we reverse the list because we take items off the end.
        my @requests = reverse
		       sort { $a->{TAPE} cmp $b->{TAPE} || $a->{POS} cmp $b->{POS} }
		       grep ($_->{STATUS} eq 'UNKNOWN', values %$files);

	while (@requests)
	{
	    # Suspend until the system load drops low enough, and then go back
	    # to start of the loop so we reconsider staged in files and send
	    # them out.  Also makes it safer if we get stopped.
	    my $nrequests = scalar @requests;
	    my ($tapereqs, $mytapereqs) = &tapeMountLoad();
	    my $stagereqs = scalar (grep($_->{STATUS} eq 'STAGEIN', values %$files));
	    if (! defined $tapereqs
	        || ! defined $mytapereqs
	        || $tapereqs > $self->{MAXTAPEREQS}
	        || $mytapereqs > $self->{MAXMYTAPEREQS}
	        || $stagereqs > $self->{MAXSTAGEREQS})
	    {
	        $tapereqs = 'U' if ! defined $tapereqs;
	        $mytapereqs = 'U' if ! defined $mytapereqs;
	        $stagereqs = 'U' if ! defined $stagereqs;
	        &note ("overloaded ($tapereqs/$mytapereqs/$stagereqs/$nrequests)");
	        last;
	    }

	    # Select the next up to maxfiles to stage in
	    my $nfiles = ($#requests > $self->{MAXFILES} ? $self->{MAXFILES} : $#requests);
	    my @slice = @requests[$#requests - $nfiles .. $#requests];
	    delete @requests[$#requests - $nfiles .. $#requests];

	    # Issue background stage-in
	    my $rc = &runcmd ("stagein", "--nowait", "--rdonly",
			      "-h", $ENV{STAGE_HOST}, "-p", $ENV{STAGE_POOL},
			      "-A", "deferred",
			      map { ("-M", $_->{PFN}) } @slice);
	    &alert ("stagein failed: @{[&runerror($rc)]}") if ($rc);

	    # Mark these files as pending now
	    map { $_->{STATUS} = "STAGEIN" } @slice;

	    # Sleep a bit, castor doesn't like rapid-fire request chains
	    select (undef, undef, undef, 0.33);
	}

        # Disconnect from the database
        $dbh->disconnect if defined $dbh;
        undef $dbh;
    };
    do { &alert ("database error: $@"); $dbh->disconnect if defined $dbh; undef $dbh; } if $@;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
