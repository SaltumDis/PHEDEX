#!/usr/bin/env perl

##H Manage castor stage-in pool based on file download requests.
##H
##H This agent checks for files wanted for transfer from this node and
##H issues stage-in requests for them.  It updates the current stage-in
##H status of the files in TMDB based on stager disk state.
##H
##H As TMDB only contains GUIDs and no PFNs, we execute a site-local
##H script to map the GUIDs to PFNs, typically using local catalogue.
##H Correspondingly, files reported by stager to be on disk are mapped
##H back to GUIDs.
##H
##H Usage:
##H   FileCastorFilesize
##H      -state DIRECTORY -node NAME -db FILE[:SECTION] [-wait SECS]
##H      -pfnquery COMMAND[,ARGS...]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans
##H -pfnquery  command to query pfns and guids from catalogue

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-pfnquery' && scalar @ARGV > 1)
    { shift (@ARGV); @{$args{PFN_QUERY}} = split(/,/, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG}
    || !$args{MYNODE} || !$args{PFN_QUERY})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileCastorStager (%args))->process();

######################################################################
# Routines for this agent.
package FileCastorStager; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub min { return (sort { $a <=> $b } @_)[0] }
sub max { return (sort { $b <=> $a } @_)[0] }

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
	  	  PFN_QUERY => undef,		# Program to query PFNs
	  	  AGENTID => "Stager",		# Identity for activity logs
    	    	  MAXFILES => 50,		# Max number of files in one request
		  PFN_CACHE => {},		# GUID -> PFN cache
		  DB_CACHE => {});		# Cache of DB state
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Purge old entries from our caches.
sub purgeCache
{
    my ($cache) = @_;

    # Remove old positive matches after a day to avoid building up
    # a cache over a time.  Remove negative matches after an hour.
    my $now = time ();
    my $oldmatch = $now - 86400;
    my $oldnomatch = $now - 3600;

    # Remove entries that are too old
    foreach my $item (keys %$cache)
    {
	my ($time, @rest) = ($cache->{$item} =~ /^(\d+):(.*)/);
	delete $cache->{$item}
	   if ((! @rest && $time < $oldnomatch) || $time < $oldmatch);
    }
}

# Get the list of files in transfer out of the node.
sub getNodeFiles
{
    my ($self, $dbh) = @_;
    my %files = ();

    # First fetch files from database.  If we come across something
    # we haven't seen before, remember it but don't look it up yet.
    #
    # We get files exported from the node, plus most recent time the
    # file was in that state.
    my $stmt = &dbexec($dbh, qq{
	   select guid, to_state, to_timestamp
	   from t_transfer_state
	   where from_node = :node and to_state <= 1},
	   ":node" => $self->{MYNODE});
    while (my ($guid, $state, $time) = $stmt->fetchrow())
    {
	$files{$guid} = { GUID => $guid, STATE => $state, TIME => $time }
	    if ((exists $files{$guid}
		 && $files{$guid}{STATE} <= $state)
	        || (exists $files{$guid}
		    && $files{$guid}{STATE} == $state
		    && $files{$guid}{TIME} <= $time)
	        || ! exists $files{$guid});
    }

    # Now, collect PFNs for cached files.
    foreach my $guid (keys %files)
    {
	my $cache = $self->{PFN_CACHE}{$guid};
	if ($cache && $cache =~ /^\d+:(.*)/)
	{
	    $files{$guid}{PFN} = $1;
	}
    }

    # Finally PFNs for files not in cache.  We do this in single
    # efficient pull + cache results.
    if (my @guids = grep(! $files{$_}{PFN}, keys %files))
    {
        my $now = time();
        my $pfns = &guidToPFN ([ @guids ], "direct", "local", @{$self->{PFN_QUERY}});
        foreach my $guid (@guids)
        {
	    my $pfn = $pfns->{$guid};
	    $self->{PFN_CACHE}{$guid} = "$now:@{[$pfn || '']}";
	    $files{$guid}{PFN} = $pfn;
        }
    }

    return \%files;
}

# Append into the file list the stager status information.
# It is not currently possible to get all files on stager.
#
# Returns undef if the stager can't be queried because of
# a transient error.  Otherwise returns the input hash.
sub getStagerFiles
{
    my ($self, $files) = @_;
    return undef if ! $files;
    foreach my $file (values %$files)
    {
	next if ! $file->{PFN};
	open (STAGEQ, "stager_qry -M $file->{PFN} |")
	    || do { &alert ("stager_qry failed: $!"); return undef };
	while (<STAGEQ>)
	{
	    chomp;
	    next if ! /^\d+\@\S+\s+([A-Z_]+)$/;
	    $file->{STATUS} = $1;
	}
	close (STAGEQ);
    }

    return $files;
}

# Build status object from stager state and pending requests.
sub buildStatus
{
    my ($self, $files) = @_;
    return undef if ! $files;

    # Mark in unknown state all files without clear status.
    foreach my $file (values %$files)
    {
	do { &warn ("unknown wanted file $file->{GUID}"); next }
	    if ! $file->{PFN};
	$file->{STATUS} ||= "UNKNOWN";
    }

    return $files;
}

# Called by agent main routine before sleeping.  Pick up stage-in
# assignments and map current stager state back to the database.
sub idle
{
    my ($self, @pending) = @_;

    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Clean up caches
	my %timing = (START => &mytimeofday());
	&purgeCache ($self->{PFN_CACHE});
	$timing{PURGE} = &mytimeofday();

	# Get pending and stager files
	my $files = $self->getNodeFiles ($dbh);
	return if ! $self->getStagerFiles ($files);
	return if ! $self->buildStatus ($files);
	$timing{STATUS} = &mytimeofday();

	# Update file status.  First mark everything not staged in,
	# then as staged-in the files currently in stager catalogue.
	my $now = time();
	my $dbcache = $self->{DB_CACHE};
	if (($dbcache->{VALIDITY} || 0) < $now)
	{
	    $dbcache->{VALIDITY} = $now + 4*3600;
	    $dbcache->{FILES} = {};
	    &dbexec($dbh,qq{
	        update t_replica_state
	        set state = 0, state_timestamp = :now
	        where node = :node and state = 1},
	        ":node" => $self->{MYNODE}, ":now" => $now);
	}

	my %outdated = map { $_ => 1 } keys %{$dbcache->{FILES}};
	my $stmt = $dbh->prepare(qq{
	    update t_replica_state
	    set state = :state, state_timestamp = :now
	    where guid = :guid and node = :node});
	foreach my $f (values %$files)
	{
	    next if ! defined $f->{GUID};
	    my $isstaged = $f->{STATUS} eq 'STAGED';
	    if ($isstaged && ! $dbcache->{FILES}{$f->{GUID}})
	    {
		delete $outdated{$f->{GUID}};
		$dbcache->{FILES}{$f->{GUID}} = 1;
		&dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			     ":guid" => $f->{GUID}, ":state" => 1);
	    }
	    elsif (! $isstaged && $dbcache->{FILES}{$f->{GUID}})
	    {
		delete $outdated{$f->{GUID}};
		delete $dbcache->{FILES}{$f->{GUID}};
		&dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			     ":guid" => $f->{GUID}, ":state" => 0);
	    }
	}
	foreach my $guid (keys %outdated)
	{
	    delete $dbcache->{FILES}{$guid};
	    &dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			 ":guid" => $guid, ":state" => 0);
	}
	$dbh->commit();
	$timing{DATABASE} = &mytimeofday();

	# Issue stage-in requests for new files in batches.  Only consider
	# recent enough files in wanted state.
	my @requests = grep ($_->{STATUS} eq 'UNKNOWN'
		             && $_->{STATE} == 1
		             && $_->{TIME} >= $timing{START} - 15*60,
			     values %$files);
	my $nreq = scalar @requests;
	while (@requests)
	{
	    my @slice = splice (@requests, 0, $self->{MAXFILES});
	    my $rc = &runcmd ("stager_get", (map { ("-M", $_->{PFN}) } @slice));
	    &alert ("stager_get failed: @{[&runerror($rc)]}") if ($rc);

	    # Mark these files as pending now
	    map { $_->{STATUS} = "STAGEIN" } @slice;
	}

	$timing{REQUESTS} = &mytimeofday();
	&logmsg ("timing:"
		 . " nreq=$nreq"
		 . " purge=@{[sprintf '%.1f', $timing{PURGE} - $timing{START}]}"
		 . " status=@{[sprintf '%.1f', $timing{STATUS} - $timing{PURGE}]}"
		 . " database=@{[sprintf '%.1f', $timing{DATABASE} - $timing{STATUS}]}"
		 . " requests=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{DATABASE}]}"
		 . " all=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{START}]}");
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
