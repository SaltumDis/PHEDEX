#!/usr/bin/env perl

##H Manage castor stage-in pool based on file download requests.
##H
##H This agent checks for files wanted for transfer from this node and
##H issues stage-in requests for them.  It updates the current stage-in
##H status of the files in TMDB based on stager disk state.
##H
##H As TMDB only contains GUIDs and no PFNs, we execute a site-local
##H script to map the GUIDs to PFNs, typically using local catalogue.
##H Correspondingly, files reported by stager to be on disk are mapped
##H back to GUIDs.
##H
##H Usage:
##H   FileCastorFilesize
##H      -state DIRECTORY -node NAME -db FILE[:SECTION] [-wait SECS]
##H      -pfnquery COMMAND[,ARGS...]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans
##H -pfnquery  command to query pfns and guids from catalogue

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-pfnquery' && scalar @ARGV > 1)
    { shift (@ARGV); @{$args{PFN_QUERY}} = split(/,/, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG}
    || !$args{MYNODE} || !$args{PFN_QUERY})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileCastorStager (%args))->process();

######################################################################
# Routines for this agent.
package FileCastorStager; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub min { return (sort { $a <=> $b } @_)[0] }
sub max { return (sort { $b <=> $a } @_)[0] }

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
	  	  PFN_QUERY => undef,		# Program to query PFNs
	  	  AGENTID => "Stager",		# Identity for activity logs
    	    	  MAXFILES => 50,		# Max number of files in one request
		  PFN_CACHE => {},		# GUID -> PFN cache
		  DB_CACHE => {});		# Cache of DB state
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Purge old entries from our caches.
sub purgeCache
{
    my ($cache) = @_;

    # Remove old positive matches after a day to avoid building up
    # a cache over a time.  Remove negative matches after an hour.
    my $now = time ();
    my $oldmatch = $now - 86400;
    my $oldnomatch = $now - 3600;

    # Remove entries that are too old
    foreach my $item (keys %$cache)
    {
	my ($time, @rest) = ($cache->{$item} =~ /^(\d+):(.*)/);
	delete $cache->{$item}
	   if ((! @rest && $time < $oldnomatch) || $time < $oldmatch);
    }
}

# Get the list of files that have been requested for stage-in.
sub getPendingFiles
{
    my ($self, $dbh) = @_;
    my %unknown = ();
    my $result = [];

    # First fetch files from database.  If we come across something
    # we haven't seen before, remember it but don't look it up yet.
    # Otherwise just push the (GUID, PFN, TIME) tuple into result.
    #
    # "Recently wanted" == time stamp on "wanted" state is less than
    # fifteen minutes old.  Download agents expecting files will be
    # refreshing the wanted status more often than that when they are
    # running and capable of downloading files.
    my %seen = ();
    my $stmt = &dbexec($dbh, qq{
	   select guid, to_timestamp
	   from t_transfer_state
	   where from_node = :node
	     and to_state = 1
	     and to_timestamp >= :recent
           order by to_timestamp asc},
	   ":node" => $self->{MYNODE}, ":recent" => time() - 15*60);
    while (my ($guid, $time) = $stmt->fetchrow())
    {
	next if $seen{$guid};
	$seen{$guid} = 1;

	my $cache = $self->{PFN_CACHE}{$guid};
	if ($cache && $cache =~ /^\d+:(.*)/)
	{
	    # Known in cache.  Just push into result.
	    push (@$result, [ $guid, $1 || undef, $time ]);
	}
	else
	{
	    # Not seen this yet.  Remember it.
	    $unknown{$guid} = $time;
	}
    }

    # Now go over everything that we hadn't seen yet.  Look up all
    # the GUID/PFN mappings in one go with a single efficient pull,
    # and then cache the results and fill in result.
    if (my @items = keys %unknown)
    {
        my $now = time();
        my $pfns = &guidToPFN ([ @items ], "direct", "local", @{$self->{PFN_QUERY}});
        foreach my $guid (@items)
        {
	    my $pfn = $pfns->{$guid};
	    $self->{PFN_CACHE}{$guid} = "$now:@{[$pfn || '']}";
	    push (@$result, [ $guid, $pfn, $unknown{$guid} ]);
        }
    }

    return $result;
}

# Get the list of files stager knows about.  We only get files
# we are currently exporting -- it is not currently possible
# to ask for all files staged in.
#
# Returns an array of files known to the stager, always a subset
# of the files in input argument $pending.  Each entry is [ GUID,
# PFN, STATUS ], where STATUS is "STAGED", "STAGEIN" and so on.
#
# Returns undef if the stager can't be queried, which should be
# taken to be a transient error.
sub getStagerFiles
{
    my ($self, $pending) = @_;

    # First get stager status for pending files.
    my @pfns = grep (defined $_, map { $_->[1] } @$pending);
    my %status = ();
    while (scalar @pfns)
    {
	my $args = join("", map { "-M $_" } splice (@pfns, 0, $self->{MAXFILES}));
	open (STAGEQ, "stager_qry $args |")
	    || do { &alert ("stager_qry failed: $!"); return undef };
	while (<STAGEQ>)
	{
	    chomp;
	    my ($file, $status) = split(/\s+/, $_);
	    $status{$file} = $status;
	}
	close (STAGEQ);
    }

    # Now fill in the information.
    my $result = [];
    foreach my $file (@$pending)
    {
	my ($guid, $pfn, $time) = @$file;
	next if ! $guid || ! $pfn;
	next if ! $status{$pfn};
	push (@$result, [ $guid, $pfn, $status{$pfn} ]);
    }

    return $result;
}

# Build status object from stager state and pending requests.
sub buildStatus
{
    my ($self, $stager, $pending) = @_;
    return undef if ! $stager || ! $pending;

    my $files = {};
    foreach my $file (@$stager)
    {
	my ($guid, $pfn, $status) = @$file;
	$files->{$pfn} = { GUID => $guid, PFN => $pfn, STATUS => $status };
    }

    foreach my $file (@$pending)
    {
	my ($guid, $pfn, $time) = @$file;

	do { &warn ("ignoring unknown wanted file $guid"); next } if ! $pfn;
	$files->{$pfn} ||= { GUID => $guid, PFN => $pfn, STATUS => "UNKNOWN" };
    }

    return $files;
}

# Called by agent main routine before sleeping.  Pick up stage-in
# assignments and map current stager state back to the database.
sub idle
{
    my ($self, @pending) = @_;

    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Clean up caches
	my %timing = (START => &mytimeofday());
	&purgeCache ($self->{PFN_CACHE});
	$timing{PURGE} = &mytimeofday();

	# Get pending and stager files
	my $pending = $self->getPendingFiles ($dbh);
	my $staged = $self->getStagerFiles ($pending);
	my $files = $self->buildStatus ($staged, $pending);
	return if ! $files;
	$timing{STATUS} = &mytimeofday();

	# Update file status.  First mark everything not staged in,
	# then as staged-in the files currently in stager catalogue.
	my $now = time();
	my $dbcache = $self->{DB_CACHE};
	if (($dbcache->{VALIDITY} || 0) < $now)
	{
	    $dbcache->{VALIDITY} = $now + 4*3600;
	    $dbcache->{FILES} = {};
	    &dbexec($dbh,qq{
	        update t_replica_state
	        set state = 0, state_timestamp = :now
	        where node = :node and state = 1},
	        ":node" => $self->{MYNODE}, ":now" => $now);
	}

	my %outdated = map { $_ => 1 } keys %{$dbcache->{FILES}};
	my $stmt = $dbh->prepare(qq{
	    update t_replica_state
	    set state = :state, state_timestamp = :now
	    where guid = :guid and node = :node});
	foreach my $f (values %$files)
	{
	    next if ! defined $f->{GUID};
	    my $isstaged = $f->{STATUS} eq 'STAGED';
	    if ($isstaged && ! $dbcache->{FILES}{$f->{GUID}})
	    {
		delete $outdated{$f->{GUID}};
		$dbcache->{FILES}{$f->{GUID}} = 1;
		&dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			     ":guid" => $f->{GUID}, ":state" => 1);
	    }
	    elsif (! $isstaged && $dbcache->{FILES}{$f->{GUID}})
	    {
		delete $outdated{$f->{GUID}};
		delete $dbcache->{FILES}{$f->{GUID}};
		&dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			     ":guid" => $f->{GUID}, ":state" => 0);
	    }
	}
	foreach my $guid (keys %outdated)
	{
	    delete $dbcache->{FILES}{$guid};
	    &dbbindexec ($stmt, ":now" => $now, ":node" => $self->{MYNODE},
			 ":guid" => $guid, ":state" => 0);
	}
	$dbh->commit();
	$timing{DATABASE} = &mytimeofday();

	# Issue stage-in requests for new files in batches.
	my @requests = grep ($_->{STATUS} eq 'UNKNOWN', values %$files);
	my $nreq = scalar @requests;
	while (@requests)
	{
	    my @slice = splice (@requests, 0, $self->{MAXFILES});
	    my $rc = &runcmd ("stager_get", (map { ("-M", $_->{PFN}) } @slice));
	    &alert ("stager_get failed: @{[&runerror($rc)]}") if ($rc);

	    # Mark these files as pending now
	    map { $_->{STATUS} = "STAGEIN" } @slice;
	}

	$timing{REQUESTS} = &mytimeofday();
	&logmsg ("timing:"
		 . " nreq=$nreq"
		 . " purge=@{[sprintf '%.1f', $timing{PURGE} - $timing{START}]}"
		 . " status=@{[sprintf '%.1f', $timing{STATUS} - $timing{PURGE}]}"
		 . " database=@{[sprintf '%.1f', $timing{DATABASE} - $timing{STATUS}]}"
		 . " requests=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{DATABASE}]}"
		 . " all=@{[sprintf '%.1f', $timing{REQUESTS} - $timing{START}]}");
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
