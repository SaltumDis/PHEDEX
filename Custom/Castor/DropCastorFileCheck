#!/usr/bin/env perl

##H Verify PFNs mentioned in the drops exist and have non-zero size.
##H
##H Usage:
##H   DropFileCheck
##H      -state DIRECTORY [-next DIRECTORY] [-wait SECS]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}
	
if (@ARGV || !$args{DROPDIR})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new DropCastorFileCheck (%args))->process();

######################################################################
# Routines specific to this agent.
package DropCastorFileCheck; use strict; use base 'UtilsAgent';
use File::Path;
use UtilsCache;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsReaders;
use UtilsRFIO;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = ();
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Really process the drop.  Only done in leaf processes: either the
# main agent if it has no workers, or in its slaves.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Read attribute cache to get the files we need to check
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $attrsfile = "$dropdir/attrs";
    my $attrs = eval { &readAttributeCache ($attrsfile) };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    # Check that the files exist and get their size
    my $bad = 0;
    foreach my $file (@$attrs)
    {
	my $pfn = $file->{PFN};
	my $size = &rfstatsize ($pfn);

	# Update attribute cache
	&warn ("$drop: discarding cached file size for $pfn"
	       . " (old=$file->{FILESIZE}, new=$size)")
	    if (defined $file->{FILESIZE}
	        && defined $size
		&& $file->{FILESIZE} ne $size);
	$file->{FILESIZE} = $size;

	# Check that we like this file
	if (! defined $size)
	{
	    &alert ("$drop: cowardly refusing to transfer non-existent file $pfn");
	    $bad = 1;
	}
	elsif (! $size)
	{
	    &warn ("$drop: zero-size file $pfn");
	}
    }

    # Mark drop accordingly
    if ($bad)
    {
        $self->markBad ($drop);
    }
    else
    {
	do { &alert ("$drop: failed to write out attribute cache"); return }
	    if ! &outputAttributeCache ($attrsfile, $attrs);
        &touch ("$dropdir/done");
        $self->relayDrop ($drop);
        &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} succcess");
    }
}
