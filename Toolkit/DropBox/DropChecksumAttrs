#!/usr/bin/perl

## Add file size and checksum data to file attribute cache
## using checksum summary files.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$args{DROPDIR})
{
    print STDERR
	"usage: $me -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

(new DropChecksumAttrs (%args))->process();

######################################################################
# Routines specific to this agent.
package DropChecksumAttrs; use strict; use base 'UtilsAgent';
use File::Path;
use UtilsCache;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsReaders;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = ();
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Really process the drop.  Only done in leaf processes: either the
# main agent if it has no workers, or in its slaves.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Read attribute cache to get the files we need to check
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $attrsfile = "$dropdir/attrs";
    my $attrs = eval { &readAttributeCache ($attrsfile) };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    # Read checksum data
    my $cksumfile = (<$dropdir/Checksum.*.txt>)[0];
    do { &alert ("no checksum file in $drop"); $self->markBad ($drop); return }
        if ! $cksumfile;

    my $cksums = eval { &readChecksumData ($cksumfile) };
    do { &alert ($@); $self->markBad ($drop); return } if $@;

    my $bad = 0;
    foreach my $file (@$attrs)
    {
	my $lfn = $file->{LFN};
	my $cksum = grep ($_->[2] eq $lfn, $cksums);

	if (! $cksum)
	{
	   &alert ("$drop: no checksum for $lfn");
	   $bad = 1;
	   next;
        }

	if (! $cksum->[1])
	{
	   &alert ("$drop: cowardly refusing to transfer zero-size file $lfn");
	   $bad = 1;
	   next;
        }

	$file->{CHECKSUM} = $cksum->[0];
	$file->{FILESIZE} = $cksum->[1];
    }

    # Mark drop accordingly
    if ($bad)
    {
        $self->markBad ($drop);
    }
    else
    {
	do { &alert ("$drop: failed to write out attribute cache"); return }
	    if ! &outputAttributeCache ($attrsfile, $attrs);
        &touch ("$dropdir/done");
        $self->relayDrop ($drop);
        &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} succcess");
    }
}

