#!/usr/bin/env perl

## This agent rewrites PFNs in XML catalogues of the drops that pass
## through so downstream transfer agents can use the PFNs with grid
## tools.  It injects a custom prefix to all PFNs.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-prefix' && scalar @ARGV > 1)
    { shift (@ARGV); $args{PATH_PREFIX} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$args{DROPDIR} || !$args{PATH_PREFIX})
{
    print STDERR
	"usage: $me -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    -prefix PREFIX-TO-ADD [-wait SECS-TO-WAIT]\n";
    exit (1);
}

(new DropCatPFNPrefix (%args))->process();

######################################################################
# Routines specific to this agent.
package DropCatPFNPrefix; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsCache;
use UtilsReaders;
use UtilsWriters;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDelay;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (PATH_PREFIX => undef);	# Prefix to add to PFNs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Actually process the drop.  Rewrite the PFNs to the form of
# sfn://castorgrid.cern.ch for the grid tools to be able to use them.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Find the catalog file and attribute cache
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $xmlcat = (<$dropdir/XMLCatFragment.*.{txt,xml}>)[0];
    do { &alert ("$drop: no catalogue"); $self->markBad ($drop); return }
        if ! $xmlcat;
    my $catalogue = eval { &readXMLCatalog ($xmlcat) };
    do { &alert ("$drop: $@"); $self->markBad ($drop); return } if $@;

    my $attrsfile = "$dropdir/attrs";
    my $attrs = eval { &readAttributeCache ($attrsfile) };
    do { &alert ("$drop: $@"); $self->markBad ($drop); return } if $@;

    # Rewrite PFNs in the catalogue
    my $prefix = $self->{PATH_PREFIX};
    foreach my $entry (values %$catalogue) {
        $entry->{TEXT} =~ s|(<pfn\s.*\s+name=")|$1$prefix|g; #"
	map { s/^/$prefix/; $_ } @{$entry->{PFN}};
    }

    # Merge new catalogue to the attribute cache
    &mergeCatalogueToCache ($attrs, $catalogue);

    # Actually write out the results, assume errors are transient
    my $content = join("\n", map { $_->{TEXT} } values %$catalogue);
    do { &alert ("$drop: failed to write catalogue: $!"); return }
        if ! &outputCatalog ($xmlcat, $content);

    do { &alert ("$drop: failed to write attribute cache: $!"); return }
        if ! &outputAttributeCache ($attrsfile, $attrs);

    # Pass on or delete
    &touch ("$dropdir/done");
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
