#!/usr/bin/env perl

##H A drop-box agent that just receives drops and passes them on, or
##H destroyes them if there is no next agent.  Only useful feature of
##H this agent is that it can delay the processing of a drop based on
##H a statistical model.
##H
##H Usage:
##H   DropNullAgent
##H      -state DIRECTORY [-next NEXT] [-wait SECS]
##H      [-model MODEL-FILE]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -wait      time to wait in seconds between work scans
##H -model     read in a statisical delay model file of "TIME FREQ" lines

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR}= shift(@ARGV); }
    elsif ($ARGV[0] eq '-next' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-model' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MODELFILE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}
	
if (@ARGV || !$args{DROPDIR})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new DropNullAgent (%args))->process();

######################################################################
# Routines specific to this agent.
package DropNullAgent; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDelay;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = ();
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    $self->{MODEL} = &readDelayModel ($args{MODELFILE}) if $args{MODELFILE};
    bless $self, $class;
    return $self;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # If we have delay model, apply it
    &delayStatistically ($self->{MODEL}) if $self->{MODEL};

    # Pass on or delete
    &touch ("$self->{WORKDIR}/$drop/done");
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
