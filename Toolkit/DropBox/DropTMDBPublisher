#!/usr/bin/perl

## This agent registers files into the transfer database as new
## unallocated files.  This will cause the file allocation and
## configuration agents to allocate the files to the tiers.  The
## files must already be registered in the local catalogue and
## the PFNs must be correct full paths for this site.
##
## Each drop is required to have a XML catalogue fragment and a
## checksum file.  The information must be new: the files must be
## unknown to the transfer database.  All the file information is
## inserted, including all the meta data, but no allocation is
## given as destinations.
##
## Like all drop box agents, this agent periodically inspects the
## inbox, looking for new completed drops.  For each new drop, the
## files are inserted into the database, and the drop is passed to
## the next drop box agent, or destroyed if there is no next agent.
## If the agent terminates, crashes or is otherwise stopped, it will
## pick up in the right place when started the next time.

BEGIN { use strict; $^W = 1; }
$me = $0; $me =~ s|.*/||;
$home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
my %args = (VERSION => 2);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-version' && scalar @ARGV > 1)
    { shift (@ARGV); $args{VERSION} = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$args{DROPDIR}
    || ($args{VERSION} ne 1 && $args{VERSION} ne 2)
    || ($args{VERSION} eq 2 && !$args{MYNODE}))
{
    print STDERR
	"usage: $me [-db DB-TNS-NAME] -node NODE-NAME\n",
	"    -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-version 1/2] [-wait SECS-TO-WAIT]\n";
    exit (1);
}

(new DropTMDBPublisher (%args))->process();

######################################################################
# Routines specific to this agent.
package DropTMDBPublisher;
use strict;
use Exporter;
use File::Path;
use UtilsReaders;
use UtilsAgent;
use base 'UtilsAgent';

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBNAME => undef,	# Database name
	    	  DBUSER => "CMS_TRANSFERMGMT_WRITER",
		  DBPASS => "threeBagsFULL",
    		  MYNODE => undef,	# My node name
	  	  VERSION => 2);	# TMDB version
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Update TMDB for each file mentioned in the checksum files, using the
# information from the catalog data.
sub updateTransferDatabase
{
    my ($self, $drop, $catalog, @files) = @_;

    # Build lfn-to-guid mapping table
    my %lfn2guid = ();
    foreach my $guid (keys %$catalog)
    {
        my $lfn = $catalog->{$guid}{LFN}[0];
        if (exists $lfn2guid{$lfn})
	{
            &alert ("multiple guids for lfn $lfn in $drop");
            $self->markBad ($drop);
            return 1;
        }
	$lfn2guid{$lfn} = $guid;
    }

    # Now make sure the catalog knows all the files
    foreach my $f (@files)
    {
	my $lfn = $f->[2];
	if (! exists $lfn2guid{$lfn})
	{
	    &alert ("catalog does not know lfn $lfn in $drop");
	    $self->markBad ($drop);
	    return 1;
        }
    }

    my $dbh;
    eval
    {
        # Update database
        if ($self->{DBNAME})
	{
	    eval "use DBI"; die $@ if $@; # Allow testing without DBI
	    $dbh = DBI->connect ("DBI:Oracle:$self->{DBNAME}",
		    		 $self->{DBUSER}, $self->{DBPASS},
				 { RaiseError => 1, AutoCommit => 1 });
	}

        foreach my $f (@files)
	{
            my ($checksum, $size, $lfn) = @$f;
            my $guid = $lfn2guid{$lfn};
            my $pfn = $catalog->{$guid}{PFN}[0];
            my $group = ($catalog->{$guid}{GROUP} || "");
            my %meta = ('filesize' => $size,
                	'checksum' => $checksum,
                	'tmdb_insertion_time' => time(),
                	'debug_lfn' => $lfn,
                	'debug_pfn' => $pfn,
                	'debug_group' => $group,
                	map { "POOL_"."$_" => $catalog->{$guid}{META}{$_} }
			keys %{$catalog->{$guid}{META}});

	    my @cmds;
	    if ($self->{VERSION} == 1) {
		@cmds = ("insert into cms_transfermgmt.filesfortransfer "
		         ."(guid, castor_filename, entry_time, checksum,"
		         ." filesize, allocated_to_t1s, filegroup) values "
		         ."('$guid', '$pfn', @{[time()]}, $checksum,"
		         ." $size, '1', '$group')");
	    } elsif ($self->{VERSION} == 2) {
		@cmds = ("insert into cms_transfermgmt.t_files_for_transfer "
			 ."(guid, source_node, allocated) values ('$guid', '$self->{MYNODE}', 0)",
	       		 map { "insert into cms_transfermgmt.t_replica_metadata "
		     		."(guid, key, value) values ('$guid', '$_', '$meta{$_}')" }
		 	 sort keys %meta);
	    }

	    foreach my $cmd (@cmds)
	    {
		if ($self->{DBNAME}) {
		    $dbh->do ($cmd);
	        } else {
		    &logmsg ($cmd);
		}
	    }
	}

	$dbh->disconnect if $dbh;
    };

    if ($@)
    {
	&alert("database operation failed: $@");
	if ($dbh)
	{
	    $dbh->rollback;
	    $dbh->disconnect;
	}
	$self->markBad ($drop);
	return 1;
    }

    &touch("$self->{WORKDIR}/$drop/done");
    return 0;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Find and read the catalogue and the checksum data
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $xmlcat = (<$dropdir/XMLCatFragment.*.{xml,txt}>)[0];
    my $cksum = (<$dropdir/CheckSum.*.txt>)[0];
    if (! defined $xmlcat)
    {
	&alert ("no xml catalogue in $drop");
	$self->markBad ($drop);
	return;
    }
    if (! defined $cksum)
    {
	&alert ("no checksum in $drop");
	$self->markBad ($drop);
	return;
    }

    my $catalog = eval { &readXMLCatalog ($drop, $xmlcat) };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    my @checksums = eval { &readChecksumData ($drop, $cksum) };
    do { &alert($@); $self->markBad ($drop); return } if $@;

    # OK, insert information to the database.
    return if $self->updateTransferDatabase ($drop, $catalog, @checksums);
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
