#!/usr/bin/env perl

##H This agent registers files into the transfer database.  Each drop
##H must include an XML catalogue fragment and a checksum file, and
##H may include a node list file.
##H
##H All files mentioned in the XML catalogue must be previously unknown
##H to the database.  If a problem occurs with any of the files in the
##H drop, all files are rejected.  The files must already be known to
##H the local file catalogue -- this agent ignores the PFNs, and adds
##H the rest of the file information into the database.
##H
##H The agent periodically inspects inbox looking for complete drops.
##H Once the drop is processed as described above, the drop is passed
##H to the next drop box agents, or destroyed if there are none.  State
##H is handled safely so agent termination, crash or stop does no harm.
##H
##H Usage:
##H   DropTMDBPublisher
##H      -state DIRECTORY [-next DIRECTORY] -node NAME
##H      -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -node      default node to register files for; drops can override this
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-next' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}
	
if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new DropTMDBPublisher (%args))->process();

######################################################################
# Routines specific to this agent.
package DropTMDBPublisher; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef);		# My TMDB node name
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Prepare attribute cache for this drop
    my $dropdir = "$self->{WORKDIR}/$drop";

    # Locate XML catalogue and checksums, load node list
    my @nodes = split(/\s+/, &input ("$dropdir/PhEDEx-Nodes.txt") || $self->{MYNODE});
    my $xmlcat = (<$dropdir/XMLCatFragment.*.{txt,xml}>)[0];
    do { &alert("$drop: no catalogue"); $self->markBad ($drop); return }
        if ! $xmlcat;

    my $cksumfile = (<$dropdir/Checksum.*.txt>)[0];
    do { &alert ("no checksum file in $drop"); $self->markBad ($drop); return }
        if ! $cksumfile;

    # Run publish.  This is actually done by a helper program shared
    # with other tools, so we don't repeat the code here.
    my $toolhome = $0; $toolhome =~ s|/[^/]*$||;
    my @cmd = ("$toolhome/Toolkit/Request/TMDBInject",
               "-db", $self->{DBCONFIG},
	       "-catalogue", $xmlcat,
	       "-cksums", $cksumfile,
	       "-nodes", join(",", @nodes));

    if (my $rc = &runcmd (@cmd))
    {
	 &alert ("exit code @{[&runerror($rc)]} from @cmd");
         $self->markBad ($drop);
	 return;
    }

    # Success, relay onwards
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
