#!/usr/bin/env perl

##H This agent registers files into the transfer database.  Each drop
##H must include an XML file describing the files to register into the
##H database, and may include a node list file.
##H
##H All files mentioned in the XML catalogue must be previously unknown
##H to the database.  If a problem occurs with any of the files in the
##H drop, all files are rejected.  The files must already be accessible
##H via the local file catalogue.  The format of the XML file is fully
##H described in Toolkit/Request/TMDBInject.
##H
##H The agent periodically inspects inbox looking for complete drops.
##H Once the drop is processed as described above, the drop is passed
##H to the next drop box agents, or destroyed if there are none.  State
##H is handled safely so agent termination, crash or stop does no harm.
##H
##H Usage:
##H   DropTMDBPublisher
##H      -state DIRECTORY [-next DIRECTORY] -node NAME
##H      -db FILE[:SECTION] [-log OUT]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -node      default node to register files for; drops can override this
##H -db        database connection configuration parameter file
##H -log       where to redirect logging information

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
use Getopt::Long;
use UtilsHelp;
&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "node=s"      => \$args{MYNODE},
             "next=s@"     => \@{$args{NEXTDIR}},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new DropTMDBPublisher (%args))->process();

######################################################################
# Routines specific to this agent.
package DropTMDBPublisher; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef);		# My TMDB node name
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $$self{BAD}{$drop};
    &timeStart($$self{STARTTIME});

    # Prepare attribute cache for this drop
    my $dropdir = "$$self{WORKDIR}/$drop";

    # Locate file description XML file and load node list.
    my @nodes = split(/\s+/, &input ("$dropdir/PhEDEx-Nodes.txt") || $$self{MYNODE});
    my @options = split(/\s+/, &input ("$dropdir/Options.txt") || "");
    my $filedata = (<$dropdir/*.xml>)[0];
    do { &alert("$drop: no catalogue"); $self->markBad ($drop); return }
        if ! $filedata;

    # Parse options.
    my $strict = 1;
    my $verbose = 1;
    foreach my $opt (@options)
    {
	if ($opt eq '!strict')
	{
	    $strict = 0;
	}
	elsif ($opt eq 'strict')
	{
	    $strict = 1;
	}
	elsif ($opt eq '!verbose')
	{
	    $verbose = 0;
	}
	elsif ($opt eq 'verbose')
	{
	    $verbose = 1;
	}
	else
	{
	    &alert("$drop: unrecognised option '$opt'");
	    $self->markBad ($drop);
	    return;
	}
    }

    # Run publish.  This is actually done by a helper program shared
    # with other tools, so we don't repeat the code here.
    my $toolhome = $0; $toolhome =~ s|/[^/]*$||; $toolhome .= "/../..";
    my @cmd = ("$toolhome/Toolkit/Request/TMDBInject",
               "-db", $$self{DBCONFIG},
	       ($strict ? "-strict" : ()),
	       ($verbose ? "-verbose" : ()),
	       "-filedata", $filedata,
	       "-nodes", join(",", @nodes));

    if (my $rc = &runcmd (@cmd))
    {
	 &alert ("exit code @{[&runerror($rc)]} from @cmd");
         $self->markBad ($drop);
	 return;
    }

    # Success, relay onwards
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($$self{STARTTIME})]} success");
}
