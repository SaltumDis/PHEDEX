#!/usr/bin/env perl

##H This agent registers files into the transfer database.  Each drop
##H must include an XML file describing the files to register into the
##H database, and may include a node list file.
##H
##H All files mentioned in the XML catalogue must be previously unknown
##H to the database.  If a problem occurs with any of the files in the
##H drop, all files are rejected.  The files must already be accessible
##H via the local file catalogue.  The format of the XML file is fully
##H described in Toolkit/Request/TMDBInject.
##H
##H The agent periodically inspects inbox looking for complete drops.
##H Once the drop is processed as described above, the drop is passed
##H to the next drop box agents, or destroyed if there are none.  State
##H is handled safely so agent termination, crash or stop does no harm.
##H
##H Usage:
##H   DropTMDBPublisher
##H      -state DIRECTORY [-next DIRECTORY] [-node NAME]
##H      -db FILE[:SECTION] [-log OUT]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -node      default node to register files for; drops can override this
##H -db        database connection configuration parameter file
##H -log       where to redirect logging information

######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::DropBox::DropTMDBPublisher::Agent;

&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "node=s"      => \$args{MYNODE},
             "next=s@"     => \@{$args{NEXTDIR}},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = PHEDEX::DropBox::DropTMDBPublisher::Agent->new(%args,@ARGV);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;
