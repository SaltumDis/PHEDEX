#!/usr/bin/perl

## This agent registers files into the transfer database as new
## unallocated files.  This will cause the file allocation and
## configuration agents to allocate the files to the tiers.  The
## files must already be registered in the local catalogue and
## the PFNs must be correct full paths for this site.
##
## Each drop is required to have a XML catalogue fragment and a
## checksum file.  The information must be new: the files must be
## unknown to the transfer database.  All the file information is
## inserted, including all the meta data, but no allocation is
## given as destinations.
##
## Like all drop box agents, this agent periodically inspects the
## inbox, looking for new completed drops.  For each new drop, the
## files are inserted into the database, and the drop is passed to
## the next drop box agent, or destroyed if there is no next agent.
## If the agent terminates, crashes or is otherwise stopped, it will
## pick up in the right place when started the next time.

BEGIN { use strict; $^W = 1; }
my ($dropdir, @nextdir, $inbox, $workdir, $outdir, $stopflag, $pidfile);
my @startTime;
my $waittime = 7;		# Seconds to sleep between meta set queries
my $dbname = undef;		# Database name
my $mynode = undef;		# My node name
my $version = 2;		# TMDB version
my %bad = ();			# Drops we've warned are bad
my %junk = ();			# Drops we've warned are junk in inbox

my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";

use File::Path;
eval qx(cat "$home/UtilsAgent.pm"); die $@ if $@;
eval qx(cat "$home/UtilsReaders.pm"); die $@ if $@;

######################################################################
# Routines specific to this agent.

# Update TMDB for each file mentioned in the checksum files, using the
# information from the catalog data.
sub updateTransferDatabase
{
    my ($drop, $catalog, @files) = @_;

    # Build lfn-to-guid mapping table
    my %lfn2guid = ();
    foreach my $guid (keys %$catalog)
    {
        my $lfn = $catalog->{$guid}{LFN}[0];
        if (exists $lfn2guid{$lfn})
	{
            &alert ("multiple guids for lfn $lfn in $drop");
            &markBad ($drop);
            return 1;
        }
	$lfn2guid{$lfn} = $guid;
    }

    # Now make sure the catalog knows all the files
    foreach my $f (@files)
    {
	my $lfn = $f->[2];
	if (! exists $lfn2guid{$lfn})
	{
	    &alert ("catalog does not know lfn $lfn in $drop");
	    &markBad ($drop);
	    return 1;
        }
    }

    eval
    {
        # Update database
        my $dbh;
        if ($dbname)
	{
	    eval "use DBI"; die $@ if $@; # Allow testing without DBI
	    $dbh = DBI->connect ("DBI:Oracle:$dbname",
				 "CMS_TRANSFERMGMT_WRITER",
				 "threeBagsFULL",
				 { RaiseError => 1, AutoCommit => 1 });
	}

        foreach my $f (@files)
	{
            my ($checksum, $size, $lfn) = @$f;
            my $guid = $lfn2guid{$lfn};
            my $pfn = $catalog->{$guid}{PFN}[0];
            my $group = ($catalog->{$guid}{GROUP} || "");
            my %meta = ('filesize' => $size,
                	'checksum' => $checksum,
                	'tmdb_insertion_time' => time(),
                	'debug_lfn' => $lfn,
                	'debug_pfn' => $pfn,
                	'debug_group' => $group,
                	map { "POOL_"."$_" => $catalog->{$guid}{META}{$_} }
			keys %{$catalog->{$guid}{META}});

	    my @cmds;
	    if ($version == 1) {
		@cmds = ("insert into cms_transfermgmt.filesfortransfer "
		         ."(guid, castor_filename, entry_time, checksum,"
		         ." filesize, allocated_to_t1s, filegroup) values "
		         ."('$guid', '$pfn', @{[time()]}, $checksum,"
		         ." $size, '1', '$group')");
	    } elsif ($version == 2) {
		@cmds = ("insert into cms_transfermgmt.t_files_for_transfer "
			 ."(guid, source_node, allocated) values ('$guid', '$mynode', 0)",
	       		 map { "insert into cms_transfermgmt.t_replica_metadata "
		     		."(guid, key, value) values ('$guid', '$_', '$meta{$_}')" }
		 	 sort keys %meta);
	    }

	    foreach my $cmd (@cmds)
	    {
		if ($dbname) {
		    $dbh->do ($cmd);
	        } else {
		    &logmsg ($cmd);
		}
	    }
	}

	$dbh->disconnect if $dbname;
    };

    if ($@)
    {
	&alert("database operation failed: $@");
	if ($dbh)
	{
	    $dbh->rollback;
	    $dbh->disconnect;
	}
	&markBad ($drop);
	return 1;
    }

    &touch("$workdir/$drop/done");
    return 0;
}

# Actually process the drop.
sub processDrop
{
    my ($drop) = @_;

    # Sanity checking
    return if (! &inspectDrop ($drop));
    delete $bad{$drop};
    &timeStart();

    # Find and read the catalogue and the checksum data
    my $xmlcat = (<$workdir/$drop/XMLCatFragment.*.{xml,txt}>)[0];
    my $cksum = (<$workdir/$drop/CheckSum.*.txt>)[0];
    if (! defined $xmlcat)
    {
	&alert ("no xml catalogue in $drop");
	&markBad ($drop);
	return;
    }
    if (! defined $cksum)
    {
	&alert ("no checksum in $drop");
	&markBad ($drop);
	return;
    }

    my $catalog = eval { &readXMLCatalog ($drop, $xmlcat) };
    do { &alert($@); &markBad ($drop); return } if $@;

    my @checksums = eval { &readChecksumData ($drop, $cksum) };
    do { &alert($@); &markBad ($drop); return } if $@;

    # OK, insert information to the database.
    return if &updateTransferDatabase ($drop, $catalog, @checksums);
    &relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime()]} success");
}

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $dbname = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $mynode = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $dropdir = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@nextdir, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-version' && scalar @ARGV > 1)
    { shift (@ARGV); $version = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $waittime = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$dropdir
    || ($version ne 1 && $version ne 2)
    || ($version eq 2 && !$mynode))
{
    print STDERR
	"usage: $me [-db DB-TNS-NAME] -node NODE-NAME\n",
	"    -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-version 1/2] [-wait SECS-TO-WAIT]\n";
    exit (1);
}

&process();
