#!/usr/bin/env perl

##H This agent registers files into the transfer database.  Each drop
##H must include an XML catalogue fragment and a checksum file, and
##H may include a node list file.
##H
##H All files mentioned in the XML catalogue must be previously unknown
##H to the database.  If a problem occurs with any of the files in the
##H drop, all files are rejected.  The files must already be known to
##H the local file catalogue -- this agent ignores the PFNs, and adds
##H the rest of the file information into the database.
##H
##H The agent periodically inspects inbox looking for complete drops.
##H Once the drop is processed as described above, the drop is passed
##H to the next drop box agents, or destroyed if there are none.  State
##H is handled safely so agent termination, crash or stop does no harm.
##H
##H Usage:
##H   DropTMDBPublisher
##H      -state DIRECTORY [-next DIRECTORY] -node NAME
##H      -dbconfig FILE [-wait SECS]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -node      default node to register files for; drops can override this
##H -dbconfig  database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-dbconfig' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-next' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}
	
if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new DropTMDBPublisher (%args))->process();

######################################################################
# Routines specific to this agent.
package DropTMDBPublisher; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsReaders;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef);		# My TMDB node name
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Update TMDB for each file mentioned.
sub updateTransferDatabase
{
    my ($self, $drop, $nodes, $attrs) = @_;

    my $dbh;
    eval
    {
        # Update database
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";

        my $now = &mytimeofday ();
	my $fstmt = &dbprep ($dbh, qq{
	    insert into t_file
	    (timestamp, guid, node, inblock, insubblock,
	     lfn, filetype, filesize, checksum)
	    values (:now, :guid, :node, :inblock, :insubblock,
	     :lfn, :filetype, :filesize, :checksum)});
    	my $rstmt = &dbprep ($dbh, qq{
	    insert into t_replica_state (timestamp, guid, node, state, state_timestamp)
	    values (:now, :guid, :node, 0, :now)});
    	my $mstmt = &dbprep ($dbh, qq{
	    insert into t_file_attributes (guid, attribute, value)
	    values (:guid, :attr, :value)});
    	my $bqstmt = &dbprep ($dbh, qq{
	    select count(*) from t_block where name = :block});
    	my $bistmt = &dbprep ($dbh, qq{
	    insert into t_block (name, owner, dataset, files, bytes)
	    values (:name, :owner, :dataset, -1, -1)});

        foreach my $f (@$attrs)
	{
	    # Check the file block is known, otherwise create an open one
	    my $block = "$f->{META}{owner}/$f->{META}{dataset}";
	    &dbbindexec ($bqstmt, ":block" => $block);
	    my ($found) = $bqstmt->fetchrow();
	    $bqstmt->finish();

	    &dbbindexec ($bistmt,
			 ":name" => $block,
			 ":owner" => $f->{META}{owner},
			 ":dataset" => $f->{META}{dataset})
		if ! $found;

	    # Insert file information
	    &dbbindexec ($fstmt,
		         ":now" => $now,
			 ":guid" => $f->{GUID},
		         ":node" => $self->{MYNODE},
			 ":inblock" => "$f->{META}{owner}/$f->{META}{dataset}",
			 ":insubblock" => "$f->{META}{jobid}",
			 ":lfn" => $f->{LFN}[0],
			 ":filetype" => $f->{PFN}[0]{TYPE},
			 ":filesize" => $f->{FILESIZE},
		 	 ":checksum" => $f->{CHECKSUM});

	    # Insert file attribute data
            my %meta = (map { "POOL_".$_ => $f->{META}{$_} } keys %{$f->{META}});
	    foreach my $m (sort keys %meta)
	    {
	        &dbbindexec ($mstmt,
			     ":guid" => $f->{GUID},
			     ":attr" => $m,
			     ":value" => $meta{$m});
	    }

	    # Insert replica for all nodes
	    foreach my $n (@$nodes)
	    {
	        &dbbindexec ($rstmt, 
	    	             ":now" => $now,
			     ":guid" => $f->{GUID},
			     ":node" => $n);
	    }
	}

	$dbh->commit () if $dbh;
	&disconnectFromDatabase ($self, $dbh);
    };

    if ($@)
    {
	&alert("$drop: database failure: $@");
	if ($dbh)
	{
	    $dbh->rollback();
	    &disconnectFromDatabase ($self, $dbh);
	}
	$self->markBad ($drop);
	return 1;
    }

    &touch("$self->{WORKDIR}/$drop/done");
    return 0;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Prepare attribute cache for this drop
    my $dropdir = "$self->{WORKDIR}/$drop";

    # Read catalogue data and build attribute cache from it
    my $xmlcat = (<$dropdir/XMLCatFragment.*.{txt,xml}>)[0];
    do { &alert("$drop: no catalogue"); $self->markBad ($drop); return }
        if ! $xmlcat;
    my $catalogue = eval { &readXMLCatalogue ($xmlcat) };
    do { &alert ("$drop: $@"); $self->markBad ($drop); return } if $@;

    # Merge checksum data into cache
    my $cksumfile = (<$dropdir/Checksum.*.txt>)[0];
    do { &alert ("no checksum file in $drop"); $self->markBad ($drop); return }
        if ! $cksumfile;

    my @cksums = eval { &readChecksumData ($cksumfile) };
    do { &alert ($@); $self->markBad ($drop); return } if $@;

    my $bad = 0;
    foreach my $file (@$catalogue)
    {
	my $lfn = $file->{LFN}[0];
	my $cksum = (grep ($_->[2] eq $lfn, @cksums))[0];

	if (! $cksum)
	{
	   &alert ("$drop: no checksum for $lfn");
	   $bad = 1;
	   next;
        }

	&warn ("$drop: zero-size file $lfn") if ! $cksum->[1];

	$file->{CHECKSUM} = $cksum->[0];
	$file->{FILESIZE} = $cksum->[1];
    }

    do { $self->markBad ($drop); return } if $bad;

    # Get node list
    my @nodes = split(/\s+/, &input ("$dropdir/PhEDEx-Nodes.txt") || $self->{MYNODE});

    # Insert information to the database.
    return if $self->updateTransferDatabase ($drop, \@nodes, $catalogue);
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
