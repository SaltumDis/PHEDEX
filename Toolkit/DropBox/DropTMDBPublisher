#!/usr/bin/env perl

## This agent registers files into the transfer database as new
## unallocated files.  This will cause the file allocation and
## configuration agents to allocate the files to the tiers.  The
## files must already be registered in the local catalogue and
## the PFNs must be correct full paths for this site.
##
## Each drop is required to have a XML catalogue fragment and a
## checksum file.  The information must be new: the files must be
## unknown to the transfer database.  All the file information is
## inserted, including all the meta data, but no allocation is
## given as destinations.
##
## Like all drop box agents, this agent periodically inspects the
## inbox, looking for new completed drops.  For each new drop, the
## files are inserted into the database, and the drop is passed to
## the next drop box agent, or destroyed if there is no next agent.
## If the agent terminates, crashes or is otherwise stopped, it will
## pick up in the right place when started the next time.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (VERSION => 2, DBITYPE => "Oracle");
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@{$args{NEXTDIR}}, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$args{DROPDIR}
    || ! defined $args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE}
    || !$args{MYNODE})
{
    print STDERR
	"usage: $me -node NODE-NAME -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

(new DropTMDBPublisher (%args))->process();

######################################################################
# Routines specific to this agent.
package DropTMDBPublisher; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCache;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  MYNODE => undef);		# My TMDB node name
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Update TMDB for each file mentioned.
sub updateTransferDatabase
{
    my ($self, $drop, $nodes, $attrs) = @_;

    my $dbh;
    eval
    {
        # Update database
	$dbh = &connectToDatabase ($self, 0) || die "failed to connect"
	    if $self->{DBNAME};

	my $fstmt = &dbprep ($dbh, qq{
	    insert into t_files_for_transfer (guid, node, filesize)
	    values (:guid, :node, :size)});
    	my $rstmt = &dbprep ($dbh, qq{
	    insert into t_replica_state
	    (guid, node, state, local_state,
	     insert_time_stamp, time_stamp, local_time_stamp)
	    values (:guid, :node, 0, 0, :now, :now, :now)});
    	my $mstmt = &dbprep ($dbh, qq{
	    insert into t_replica_metadata (guid, attribute, value)
	    values (:guid, :attr, :value)});

    	my @cmds;
        my $now = &mytimeofday ();
	foreach my $node (@$nodes)
	{
            foreach my $f (@$attrs)
	    {
                my %meta = ('filesize' => $f->{FILESIZE},
		            (exists $f->{CHECKSUM} ? ('checksum' => $f->{CHECKSUM}) : ()),
			    map { "POOL_".$_ => $f->{META}{$_} } keys %{$f->{META}});

	        push (@cmds,
		      [ $fstmt, { ":node" => $node,
			          ":guid" => $f->{GUID},
			          ":size" => $f->{FILESIZE} } ],
	              [ $rstmt, { ":node" => $node,
			          ":guid" => $f->{GUID},
			          ":now"  => $now } ],
		      map { [ $mstmt, { ":guid" => $f->{GUID},
				        ":attr" => $_,
				        ":value" => $meta{$_} } ] }
		        sort keys %meta);
	    }
	}

	foreach my $cmd (@cmds)
	{
	    if ($self->{DBNAME}) {
		&dbbindexec ($cmd->[0], %{$cmd->[1]});
	    } else {
		&logmsg ("$cmd->[0]{Statement} { @{$cmd->[1]} }");
	    }
	}

	$dbh->commit() if $dbh;
	$dbh->disconnect() if $dbh;
    };

    if ($@)
    {
	&alert("$drop: database failure: $@");
	if ($dbh)
	{
	    $dbh->rollback();
	    $dbh->disconnect();
	}
	$self->markBad ($drop);
	return 1;
    }

    &touch("$self->{WORKDIR}/$drop/done");
    return 0;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Read attribute cache, this is all we use
    my $dropdir = "$self->{WORKDIR}/$drop";
    my $attrs = eval { &readAttributeCache ("$dropdir/attrs") };
    do { &alert ("$drop: $@"); $self->markBad ($drop); return; } if $@;
    my @nodes = split(/\s+/, &input ("$dropdir/PhEDEx-Nodes.txt") || $self->{MYNODE});

    # Insert information to the database.
    return if $self->updateTransferDatabase ($drop, \@nodes, $attrs);
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
