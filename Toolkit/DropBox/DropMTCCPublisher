#!/usr/bin/env perl

##H This agent registers MTCC files into the transfer database.  This
##H is a custom version of DropTMDBPublisher for the magnet test.
##H
##H Usage:
##H   DropMTCCPublisher
##H      -state DIRECTORY [-next DIRECTORY] -node NAME
##H      -db FILE[:SECTION] -guidmap DIRECTORY [-log OUT]
##H
##H -state     agent state directory, including inbox
##H -next      next agent to pass the drops to; can be given several times
##H -node      default node to register files for; drops can override this
##H -db        database connection configuration parameter file
##H -log       where to redirect logging information
##H -guidmap   where to record guid/lfn mappings

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (NEXTDIR => []);
use Getopt::Long;
use UtilsHelp;
&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "node=s"      => \$args{MYNODE},
             "guidmap=s"   => \$args{GUIDMAP},
             "next=s@"     => $args{NEXTDIR},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new DropMTCCPublisher (%args))->process();

######################################################################
# Routines specific to this agent.
package DropMTCCPublisher; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use UtilsReaders;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
		  GUIDMAP => undef);		# Where to record GUID/LFN pairs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Actually process the drop.
sub processDrop
{
    my ($self, $drop) = @_;
$DB::single=1;

    # Sanity checking
    return if (! $self->inspectDrop ($drop));
    delete $self->{BAD}{$drop};
    &timeStart($self->{STARTTIME});

    # Prepare attribute cache for this drop
    my $dropdir = "$self->{WORKDIR}/$drop";

    # Locate XML catalogue and checksums, load node list
    my $xmlcat = (<$dropdir/*.xml>)[0];
    do { &alert("$drop: no catalogue"); $self->markBad ($drop); return }
        if ! $xmlcat;

    my $cksumfile = (<$dropdir/*.txt>)[0];
    do { &alert ("no checksum file in $drop"); $self->markBad ($drop); return }
        if ! $cksumfile;

    # Record the LFNs into a simple file system catalogue for export.
    foreach my $file (@{&readXMLCatalogue ($xmlcat)})
    {
	return if ! &output("$$self{GUIDMAP}/$$file{GUID}", "$$file{LFN}[0]\n");
    }

    # Run publish.  This is actually done by a helper program shared
    # with other tools, so we don't repeat the code here.
    my $toolhome = $0; $toolhome =~ s|/[^/]*$||; $toolhome .= "/../..";
    my @cmd = ("$toolhome/Toolkit/Request/TMDBInject",
               "-db", $self->{DBCONFIG},
	       "-strict",
	       "-catalogue", $xmlcat,
	       "-cksums", $cksumfile,
	       "-nodes", $$self{MYNODE});

    if (my $rc = &runcmd (@cmd))
    {
	 &alert ("exit code @{[&runerror($rc)]} from @cmd");
         $self->markBad ($drop);
	 return;
    }

    # Success, relay onwards
    $self->relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime($self->{STARTTIME})]} success");
}
