#!/usr/bin/perl

## This agent registers files into the catalogue (RLS or local) as a
## preliminary step before transfer.
##
## The agent merges the XML catalogue into the local catalogue and moves
## the drop to the next agent, normally the transfer database agent.
##
## Note that normally the files have to be published in the catalogue
## before publishing them for transfer so that transfer agents that
## expect to find the info in the catalogue can do their job simply.
##
## Like all drop box agents, this agent periodically inspects the
## inbox, looking for new completed drops.  For each new drop, the
## files are published, and the drop is passed to the next
## drop box agent, or destroyed if there is no next agent.  If the
## agent terminates, crashes or is otherwise stopped, it will pick
## up in the right place when started the next time.

BEGIN { use strict; $^W = 1; }
my ($dropdir, @nextdir, $inbox, $workdir, $outdir, $stopflag, $pidfile);
my @startTime;
my $waittime = 7;		# Seconds to sleep between meta set queries
my $catalogue = undef;		# Catalogue contact string
my %bad = ();			# Drops we've warned are bad
my %junk = ();			# Drops we've warned are junk in inbox

my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";

use File::Path;
eval qx(cat "$home/UtilsCommand.pm"); die $@ if $@;
eval qx(cat "$home/UtilsTiming.pm"); die $@ if $@;
eval qx(cat "$home/UtilsLogging.pm"); die $@ if $@;
eval qx(cat "$home/UtilsAgent.pm"); die $@ if $@;

######################################################################
# Routines specific to this agent.

# Import the XML catalogue fragment to the file catalogue.
sub updateFileCatalogue
{
    my ($drop, $xmlcat) = @_;
    my $ret = &runcmd ("FCpublish", "-d", $catalogue, "-u", "file:$xmlcat");

    if ($ret)
    {
	&alert("FCpublish failed for $drop: " . &runerror ($ret));
	&markBad ($drop);
	return 1;
    }

    unlink("$xmlcat.BAK");
    &touch("$workdir/$drop/done");
    return 0;
}

# Actually process the drop.
sub processDrop
{
    my ($drop) = @_;

    # Sanity checking
    return if (! &inspectDrop ($drop));
    delete $bad{$drop};
    &timeStart();

    # Find the catalogue file.
    my $xmlcat = (<$workdir/$drop/XMLCatFragment.*.{txt,xml}>)[0];
    if (! defined $xmlcat)
    {
	&alert("no xml catalogue file found in $drop");
	&markBad ($drop);
	return;
    }

    # Merge XML contents into RLS.
    return if &updateFileCatalogue ($drop, $xmlcat);
    &relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime()]} success");
}

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-catalogue' && scalar @ARGV > 1)
    { shift (@ARGV); $catalogue = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $dropdir = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@nextdir, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $waittime = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$dropdir || !$catalogue)
{
    print STDERR
	"usage: $me -catalogue CONTACT-STRING\n",
	"    -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

&process();
