#!/usr/bin/env perl

##H FIXME: Brief intro
##H
##H Usage: TRSyncWeb -db FILE[:SECTION] -mouth ENTRY REQUEST...
##H
##H REQUEST is the request directory previously created with TRNew.
##H Synchronises the web database for the requests.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}
use UtilsTR;
use UtilsDB;
use UtilsNet;
use File::Path;
use Cwd;

my %args;
my $now = time();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
	shift (@ARGV); $args{DBCONFIG} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-mouth' && scalar @ARGV > 1) {
	shift (@ARGV); $args{MOUTH} = shift (@ARGV);
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

if (!$args{MOUTH} || ! -d $args{MOUTH} || !$args{DBCONFIG})
{
    die "Incorrect parameters, use -h for help.\n";
}

foreach my $request (@ARGV)
{
    -f "$request" or die "$request: not a transfer request\n";

    # Read ticket
    my @cmds = ();
    my @locs = ();
    my @data = ();
    open(TICKET, "< $request") or die "Cannot read ticket: $!\n";
    while (<TICKET>)
    {
	if (/^(\d+) CMD (\S+) (\S+)/) {
	    push(@cmds, { STAMP => $1, COMMAND => $2, ARG => $3 });
	}
	elsif (/^(\d+) CANCEL LOC$/) {
	    push(@locs, { STAMP => $1, COMMAND => "CANCEL" });
	}
	elsif (/^(\d+) LOC (.*)$/) {
	    foreach my $loc (split(/\s+/, $2)) {
		push(@locs, { STAMP => $1, COMMAND => "LOC", ARG => $loc });
	    }
	}
	elsif (/^(\d+) CANCEL DATA$/) {
	    push(@data, { STAMP => $1, COMMAND => "CANCEL" });
        }
	elsif (/^(\d+) DATA ([A-Z]PATS\.[a-z]) (.*)$/) {
	    foreach my $pat (split(/\s+/, $3)) {
		push(@data, { STAMP => $1, COMMAND => $2, ARG => $pat });
	    }
        }
    }
    close (TICKET) or die "Cannot read ticket: $!\n";

    # Obtain status of drops
    my $dbh      = &connectToDatabase (\%args, 0);

    # Reflect information back into database
    # First delete old information about this request
    my %args = (":req" => $request);
    map { &dbexec ($dbh, qq{delete from $_ where request_name = :req}, %args) }
        qw(t_request_file_status t_request_file t_request_drop
	   t_request_data t_request_subscription t_request_operation
	   t_request);

    # Then add new info
    &dbexec ($dbh, qq{insert into t_request values (:req)}, %args);
    foreach my $op (@cmds) {
	&dbexec ($dbh, qq{
	    insert into t_request_operation
	    (request_name, timestamp, operation, identity)
	    values (:req, :stamp, :op, :arg)},
	    ":req" => $request, ":stamp" => $op->{STAMP},
	    ":op" => $op->{COMMAND}, ":arg" => $op->{ARG});
    }

    foreach my $op (@locs) {
	&dbexec ($dbh, qq{
	    insert into t_request_subscription
	    (request_name, timestamp, operation, destination)
	    values (:req, :stamp, :op, :arg)},
	    ":req" => $request, ":stamp" => $op->{STAMP},
	    ":op" => $op->{COMMAND}, ":arg" => $op->{ARG});
    }

    foreach my $op (@data) {
	&dbexec ($dbh, qq{
	    insert into t_request_data
	    (request_name, timestamp, operation, selection)
	    values (:req, :stamp, :op, :arg)},
	    ":req" => $request, ":stamp" => $op->{STAMP},
	    ":op" => $op->{COMMAND}, ":arg" => $op->{ARG});
    }

    # FIXME: Compare with DBS and files known in PhEDEx,
    # and insert status information.
    $dbh->commit();
    $dbh->disconnect();
}
