#!/usr/bin/env perl

##H Pump drops from transfer requests to the agents.
##H
##H Usage: TRSyncFeed [-n] [-d] [-x] -mouth ENTRY -db FILE[:SECTION] REQUEST...
##H
##H REQUEST is the request directory previously created with TRNew.
##H Those drops ready in each request are moved to the mouth of the
##H local drop box agent chain ENTRY.  FILE specifies database
##H configuration as usual.
##H
##H If the "-n" option is given, also checks the drops previously
##H marked not ready.  If the "-d" option is given, checks also
##H the previously marked done drops.  The "-x" option prevents
##H any drop copying, causing the script to just verify the state.
##H
##H The drops successfully copied into ENTRY will be moved

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}
use UtilsDB;
use UtilsTR;
use UtilsNet;
use File::Path;
use Cwd;

my %args;
my $now = time();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
	shift (@ARGV); $args{DBCONFIG} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-mouth' && scalar @ARGV > 1) {
	shift (@ARGV); $args{MOUTH} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-d') {
	shift (@ARGV); $args{CHECK_DONE} = 1;
    } elsif ($ARGV[0] eq '-n') {
	shift (@ARGV); $args{CHECK_NOT_READY} = 1;
    } elsif ($ARGV[0] eq '-x') {
	shift (@ARGV); $args{DOIT} = 0;
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

if (!$args{MOUTH} || ! -d $args{MOUTH} || !$args{DBCONFIG})
{
    die "Incorrect parameters, use -h for help.\n";
}

&usage() if scalar @ARGV < 3;

foreach my $request (@ARGV)
{
    -f "$request/Request/Ticket"
        or die "$request: not a transfer request\n";

    -d "$request/Drops"
        or die "$request: no drops\n";

    &mkpath ([ "$request/Drops/Done", "$request/Drops/NotReady" ]);

    my $dbh      = &connectToDatabase (\%args, 0);
    my @pending  = <$request/Drops/Pending/*>;
    my @notready = $args{CHECK_NOT_READY} ? <$request/Drops/NotReady/*> : ();
    my @done     = $args{CHECK_DONE} ? <$request/Drops/Done/*> : ();
    my $status   = &checkAssignmentFiles ($args{MOUTH}, $dbh, @pending, @notready, @done);

    &feedDropsToAgents ($args{MOUTH}, $request, $doit, 'Pending', $status, @pending);
    &feedDropsToAgents ($args{MOUTH}, $request, $doit, 'NotReady', $status, @notready);
    &feedDropsToAgents ($args{MOUTH}, $request, $doit, 'Done', $status, @done);
}
