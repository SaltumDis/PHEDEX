#!/usr/bin/perl

##H Pump drops from transfer requests to the agents.
##H
##H Usage: TRSyncFeed [-n] [-d] [-x] ENTRY DB TABLE REQUEST...
##H
##H REQUEST is the request directory previously created with TRNew.
##H Those drops ready in each request are moved to the mouth of the
##H local drop box agent chain ENTRY.  DB is the name of the TMDB
##H database (e.g. devdb9) and TABLE the name of the guid table
##H (t_files_for_transfer for V2, filesfortransfer for V1).
##H
##H If the "-n" option is given, also checks the drops previously
##H marked not ready.  If the "-d" option is given, checks also
##H the previously marked done drops.  The "-x" option prevents
##H any drop copying, causing the script to just verify the state.
##H
##H The drops successfully copied into ENTRY will be moved

BEGIN { use strict; use warnings;
  my $me = $0; $me =~ s|.*/||;
  my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
  unshift(@INC, $home); }
use UtilsTR;
use UtilsNet;
use File::Path;
use Cwd;

my $now = time();
my $doit = 1;
my $check_not_ready = 0;
my $check_done = 0;

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
	&usage();
    } elsif ($ARGV[0] eq '-d') {
	$check_done = 1; shift (@ARGV);
    } elsif ($ARGV[0] eq '-n') {
	$check_not_ready = 1; shift (@ARGV);
    } elsif ($ARGV[0] eq '-x') {
	$doit = 0; shift (@ARGV);
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

&usage() if scalar @ARGV < 3;
my $mouth = shift (@ARGV);
my $dbname = shift (@ARGV);
my $table = shift (@ARGV);

foreach my $request (@ARGV)
{
    -f "$request/Request/Ticket"
        or die "$request: not a transfer request\n";

    -d "$request/Drops"
        or die "$request: no drops\n";

    &mkpath ([ "$request/Drops/Done", "$request/Drops/NotReady" ]);

    my @pending  = <$request/Drops/Pending/*>;
    my @notready = $check_not_ready ? <$request/Drops/NotReady/*> : ();
    my @done     = $check_done ? <$request/Drops/Done/*> : ();
    my $status   = &checkAssignmentFiles ($mouth, $dbname, $table,
	    				  @pending, @notready, @done);

    &feedDropsToAgents ($mouth, $request, $doit, 'Pending', $status, @pending);
    &feedDropsToAgents ($mouth, $request, $doit, 'NotReady', $status, @notready);
    &feedDropsToAgents ($mouth, $request, $doit, 'Done', $status, @done);
}
