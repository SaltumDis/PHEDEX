#!/usr/bin/perl

##H FIXME: Brief intro
##H
##H Usage: TRSyncAllocs REQUEST...
##H
##H REQUEST is the request directory previously created with TRNew.
##H Synchronises the TMDB allocations with the request locations.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}
use UtilsTR;
use UtilsNet;
use File::Path;
use DBI;
use Cwd;

my $now = time();

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
	&usage();
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

&usage() if scalar @ARGV < 2;
my $dbname = shift (@ARGV);
my $table = shift (@ARGV);

foreach my $request (@ARGV)
{
    -f "$request/Request/Ticket"
        or die "$request: not a transfer request\n";

    # Find out the dataset names 
    my @destinations = ();
    my @patterns = ();
    open(TICKET, "< $request/Request/Ticket") or die "Cannot read ticket: $!\n";
    while (<TICKET>)
    {
	if (/^\d+ CANCEL LOC$/) {
	    @destinations = ();
	} elsif (/^\d+ LOC (.*)$/) {
	    push(@destinations, split(/\s+/, $1));
        } elsif (/^\d+ CANCEL DATA$/) {
	    @patterns = ();
	} elsif (/^\d+ DATA XPATS\.[a-z] (.*)$/) {
	    push(@patterns, split(/\s+/, $1));
	}
    }
    close (TICKET) or die "Cannot read ticket: $!\n";

    # Process each pair
    my $dbh = DBI->connect ("DBI:Oracle:$dbname", # $self->{DBITYPE}:$self->{DBNAME}",
	    		    "cms_transfermgmt", "smalland_round", # $self->{DBUSER}, $self->{DBPASS},
			    { RaiseError => 1, AutoCommit => 0 });
    foreach my $dso (@patterns)
    {
	my ($ds, $o) = ($dso =~ /(.*)\.(.*)/);
	foreach my $dest (@destinations)
	{
	    my $exists = $dbh->selectcol_arrayref(qq{
		select count(*) from $table
		where destination = '$dest' and stream = '$ds'});
	    $dbh->do(qq{insert into $table values ('$dest', '$ds')})
		if ! $exists || ! $exists->[0];
	}
    }
    $dbh->commit();
    $dbh->disconnect();
}
