#!/usr/bin/env perl

##H FIXME: Brief intro
##H
##H Usage: TRSyncAllocs -db FILE[:SECTION] REQUEST...
##H
##H REQUEST is the request directory previously created with TRNew.
##H Synchronises the TMDB allocations with the request locations.

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}
use UtilsTR;
use UtilsNet;
use File::Path;
use DBI;
use Cwd;

my %args;
my $now = time();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
	shift (@ARGV); $args{DBCONFIG} = shift (@ARGV);
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

if (!$args{DBCONFIG})
{
    die "Incorrect parameters, use -h for help.\n";
}

foreach my $request (@ARGV)
{
    -f "$request" or die "$request: not a transfer request\n";

    # Find out the dataset names 
    my @destinations = ();
    my @patterns = ();
    open(TICKET, "< $request") or die "Cannot read ticket: $!\n";
    while (<TICKET>)
    {
	if (/^\d+ CANCEL LOC$/) {
	    @destinations = ();
	} elsif (/^\d+ LOC (.*)$/) {
	    push(@destinations, split(/\s+/, $1));
        } elsif (/^\d+ CANCEL DATA$/) {
	    @patterns = ();
	} elsif (/^\d+ DATA XPATS\.[a-z] (.*)$/) {
	    push(@patterns, split(/\s+/, $1));
	}
    }
    close (TICKET) or die "Cannot read ticket: $!\n";

    # Process each pair
    my $dbh = &connectToDatabase (\%args, 0);
    foreach my $dso (@patterns)
    {
	my ($ds, $o) = ($dso =~ /(.*)\.(.*)/);
	foreach my $dest (@destinations)
	{
	    my ($exists) = &dbexec($dbh, qq{
		select count(*) from t_subscription
		where destination = :dest
		  and owner = :o and dataset = :ds},
  		":dest" => $dest, ":o" => $o, ":ds" => $ds)
		->fetchrow();
	    &dbexec (qq{insert into t_subscription values (:o, :ds, :dest)},
	    	":dest" => $dest, ":o" => $o, ":ds" => $ds)
		if ! $exists;
	}
    }
    $dbh->commit();
    $dbh->disconnect();
}
