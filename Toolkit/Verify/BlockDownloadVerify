#! /usr/bin/env perl

##H
##H This agent performs the verification of downloaded blocks.
##H Ask Tony how it works...
##H
##H
##H Usage:
##H   BlockDownloadVerify
##H      -state DIRECTORY -nodes NAME
##H      -db FILE[:SECTION] [-log OUT]
##H      -storagemap TFC.xml
##H
##H -state         agent state directory.
##H -nodes         nodes to run and clean files for.
##H -db            database connection configuration parameter file.
##H -log           where to redirect logging information.
##H -storagemap    path to TFC xml file
##H

BEGIN
{
  use warnings; use strict; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0;
  if ( $home !~ m%/% ) { $home = '.'; }
  $home =~ s|/[^/]+$||;
  $home ||= ".";
  $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

my $debug_me = 1;

######################################################################
use Getopt::Long;
use UtilsHelp;

&GetOptions ("state=s"      => \$args{DROPDIR},
	     "log=s"        => \$args{LOGFILE},
	     "db=s"         => \$args{DBCONFIG},
	     "storagemap=s" => \$args{STORAGEMAP},
             "nodes=s"      => sub { push(@{$args{NODES}}, split(/,/, $_[1])) },
             "ignore=s"     => sub { push(@{$args{IGNORE_NODES}}, split(/,/, $_[1])) },
             "accept=s"     => sub { push(@{$args{ACCEPT_NODES}}, split(/,/, $_[1])) },
	     "help|h"	    => sub { &usage() },
	     "use_srm"      => \$args{USE_SRM},
	     "use_rfdir"    => \$args{RFIO_USES_RFDIR},
	    );

#if (@ARGV || !$args{NODES} || !$args{DROPDIR} || !$args{DBCONFIG})
if (!$args{NODES} || !$args{DBCONFIG} || !$args{STORAGEMAP})
{
    die "Insufficient parameters, use -h for help.\n";
}
$args{LOGFILE} = $args{DROPDIR} . '/log.txt' unless defined $args{LOGFILE};

(new BlockDownloadVerify (%args))->process();

################################################
package BlockDownloadVerify; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use Data::Dumper;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;
use DBI;
use UtilsRFIO;
use UtilsBlockConsistencyCheck;

#sub daemon() { print "Stub the daemon() call\n"; }

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  NODES    => undef,		# Node names to run this agent for
	  	  IGNORE_NODES => [],		# TMDB nodes to ignore
	  	  ACCEPT_NODES => [],		# TMDB nodes to accept
		  WAITTIME => 60 + rand(15),	# Agent activity cycle
		  DELETING => undef,		# Are we deleting files now?
		  PROTOCOL => 'direct',         # File access protocol
	  	  STORAGEMAP => undef,		# Storage path mapping rules
		  USE_SRM => 0,			# Use SRM or native technology?
		  RFIO_USES_RFDIR => 0,		# Use rfdir instead of nsls?
		  );
    
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub doSizeCheck
{
  my ($self, $drop, $request) = @_;
  my ($n_files,$n_tested,$n_ok);
  my $dbh = undef;
  my @nodes = ();

my %Status = (
		0 => 'None',
		1 => 'OK',
		2 => 'Fail',
		3 => 'Queued',
		4 => 'Active',
		5 => 'Timeout',
		6 => 'Expired',
		7 => 'Suspended',
		8 => 'Error',
		9 => 'Rejected',
	      );

  print scalar localtime, ": doSizeCheck: starting\n";
  my $dropdir = "$$self{WORKDIR}/$drop";

  my $bcc = UtilsBlockConsistencyCheck->new
		(
			DBCONFIG	=> $self->{DBCONFIG},
		);
  $bcc->STORAGEMAP( $self->{STORAGEMAP} );
  $bcc->Checks($request->{TEST_NAME}) or
    die "Test $request->{TEST_NAME} not known to UtilsBlockConsistencyCheck!\n";

  my $ns = $bcc->NS;
  $bcc->DBH($self->{DBH});
  my $technology = $bcc->Buffers(@{$self->{NODES}});
  $ns->technology( $technology );

  $ns->protocol( 'srm' ) if $self->{USE_SRM};
  $ns->TFCPROTOCOL( 'srm' ) if $self->{USE_SRM};
  $ns->STORAGEMAP( $self->{STORAGEMAP} );
  $ns->RFIO_USES_RFDIR( $self->{RFIO_USES_RFDIR} );

  $bcc->LFNRef($request->{LFNs});
  print scalar localtime, ": doSizeCheck: Request ",$request->{ID},"\n";
  $n_files = $request->{N_FILES};
#$DB::single=$debug_me;
  foreach my $r ( @{$request->{LFNs}} )
  {
    my $pfn = $ns->lfn2pfn($r->{LOGICAL_NAME});
    my $size = $ns->statsize($pfn);
    if ( ! exists $Status{$r->{STATUS}} )
    {
$DB::single=$debug_me;
      print "Woah, unknown status! Get me outta here...\n";
      print Data::Dumper->Dump( [$r, $request], [qw/ r request/]);
      die "Don't know what to do with this. Ask Tony!\n";
    }
    if ( defined($size) && $size == $r->{FILESIZE} )
    {
      $r->{STATUS} = 'OK';
    }
    else
    {
      $r->{STATUS} = 'Error';
    }
    $r->{TIME_REPORTED} = time();
    last unless --$n_files;
    if ( $self->{USE_SRM} )
    { print scalar localtime,": $n_files files remaining\n"; }
  }

  eval
  {
    ($dbh,@nodes) = &expandNodesAndConnect($self);
    $n_tested = $n_ok = 0;
    $n_files = $request->{N_FILES};
    foreach my $r ( @{$request->{LFNs}} )
    {
      next unless $r->{STATUS};
      $self->setFileState($request->{ID},$r);
      $n_tested++;
      $n_ok++ if $r->{STATUS} eq 'OK';
    }
    $self->setRequestFilecount($request->{ID},$n_tested,$n_ok);
    if ( $n_ok == $n_files )
    {
      $self->setRequestState($request,'OK');
    }
    if ( $n_tested == $n_files && $n_ok != $n_files )
    {
      $self->setRequestState($request,'Fail');
      &touch ("$dropdir/done");
      $self->relayDrop ($drop);
    }
    $dbh->commit();
  };

# my $result = $bcc->getOnWithItThen();

  do
  {
    chomp ($@);
    &alert ("database error: $@");
    eval { $dbh->rollback() } if $dbh;
    return 0;
  } if $@;
    
  my $status = ( $n_files == $n_ok ) ? 1 : 0;
  print scalar localtime, ": doSizeCheck: returning $status\n";
  return $status;
}

sub sizeCheckJob
{
die "I should not be here...\n";
    my ($self, $file, $job) = @_;
    if ($$job{STATUS})
    {
	&warn("failed to delete file $$file{PFN} at node "
	      ."$$file{NODE}, log in $$job{LOGFILE}");
    }
    else
    {
	&logmsg("deleted file $$file{PFN} at node $$file{NODE}");
	unlink ($$job{LOGFILE});
    }
}

sub processDrop
{
  my ($self, $drop) = @_;

  print scalar localtime, ": processDrop: starting\n";
# Sanity checking
  return if (! $self->inspectDrop ($drop));
  delete $$self{BAD}{$drop};
  &timeStart($$self{STARTTIME});

# Read back file information
  my $dropdir = "$$self{WORKDIR}/$drop";
  my $request = do { no strict "vars"; eval &input ("$dropdir/packet") };
  my $bad = 0;
  $bad = 1 if ($@ || !$request );
  foreach ( qw/ BLOCK ID LFNs N_FILES PRIORITY TEST_NAME TIME_EXPIRE / )
  {
    $bad = 1 unless defined $request->{$_};
  }
  if ( $bad )
  {
    &alert ("corrupt packet in $drop for request $request->{ID}");

##TW Are there synchronisation implications here?
    $self->markBad ($drop);
    $self->setRequestState($request,'Rejected');
    $self->{DBH}->commit();
    return;
  }

  if ( $request->{TIME_EXPIRE} <= time() )
  {
##TW Are there synchronisation implications here?
    &touch ("$dropdir/done");
    $self->relayDrop ($drop);
    $self->setRequestState($request,'Expired');
    $self->{DBH}->commit();
    print scalar localtime, ": processDrop: return after Expiring $request->{ID}\n";
    return;
  }

# I can only process size-checks for now. Reject anything else
  if ( $request->{TEST_NAME} eq 'size' )
  {
    $self->setRequestState($request,'Active');
    $self->{DBH}->commit();
    my $result = $self->doSizeCheck ($drop, $request);
    return if ! $result;
  }
# elsif ( $request->{TEST_NAME} eq 'migration' )
# {
# }
# elsif ( $request->{TEST_NAME} eq 'cksum' )
# {
# }
# elsif ( $request->{TEST_NAME} eq 'dbs' )
# {
# }
  else
  {
##TW Are there synchronisation implications here?
    $self->markBad($drop);
    $self->setRequestState($request,'Rejected');
    $self->{DBH}->commit();
    print scalar localtime, ": processDrop: return after Rejecting $request->{ID}\n";
    return;
  }

# Mark drop done so it will be nuked
  &touch ("$dropdir/done");

# OK, got far enough to nuke and log it
  $self->relayDrop ($drop);
  print scalar localtime, ": processDrop: returning\n";
}

# Get a list of pending requests
sub requestQueue
{
  my ($self, $dbh, $limit, $node, $filter, $filter_args) = @_;
  my (@requests,$sql,%p,$q,$q1,$n,$i);

  print scalar localtime, ": requestQueue: starting\n";
  my $now = &mytimeofday();

# Find all the files that we are expected to work on
  $n = 0;

  $sql = qq{
		select b.id, block, n_files, time_expire, priority,
		test, t.name test_name
		from t_dvs_block b join t_dvs_test t on b.test = t.id
		join t_status_block_verify v on b.id = v.id
		where b.node = :node
		and status = 0
		${$filter}
		order by priority asc, time_expire asc
       };
  %p = ( ":node" => $$self{NODES_ID}{$node}, %{$filter_args} );
  $q = &dbexec($dbh,$sql,%p);

  $sql = qq{ select logical_name, checksum, filesize, vf.fileid,
		nvl(time_reported,0) time_reported, nvl(status,0) status
		from t_dps_file pf join t_dvs_file vf on vf.fileid = pf.id
		left join t_dvs_file_result vfr on vfr.fileid = vf.fileid
		where vf.request = :request };
  while ( my $h = $q->fetchrow_hashref() )
  {
    %p = ( ':request' => $h->{ID} );
    $q1 = &dbexec($dbh,$sql,%p);
    while ( my $g = $q1->fetchrow_hashref() )
    {
      push @{$h->{LFNs}}, $g;
    }
    $n += scalar @{$h->{LFNs}};
    push @requests, $h;
    last if ++$i >= $limit;
  }

  print scalar localtime,": Got ",scalar @requests," requests, for $n files in total\n";
  return @requests;
}

sub dropBoxName
{
# Derive a dropbox name for a request. Required to be alphabetically
# sorted to the same order that the requests should be processed in.
  my ($self,$request) = @_;
  my $b = sprintf("%08x_%08x_%010d",
                   $request->{PRIORITY},
                   $request->{TIME_EXPIRE},
                   $request->{ID}
                 );
  return $b;
}

# Create a drop for processing a request.  We create a drop for ourselves,
# i.e. in our own inbox, and then process the file in "processDrop".
# This way we have a permanent record of where we are with deleting
# the file, in case we have to give up some operation for temporary
# failures.
sub startOne
{
  my ($self, $request) = @_;

# Create a pending drop in my inbox
  my $drop = "$$self{DROPDIR}/inbox/" . $self->dropBoxName($request);
  do { &alert ("$drop already exists"); return 0; } if -d $drop;
  do { &alert ("failed to submit $$request{ID}"); &rmtree ($drop); return 0; }
	if (! &mkpath ($drop)
	  || ! &output ("$drop/packet", Dumper ($request))
	  || ! &touch ("$drop/go.pending"));

# OK, kick it go
  return 1 if &mv ("$drop/go.pending", "$drop/go");
  &warn ("failed to mark $$request{ID} ready to go");
  return 0;
}

# Pick up work from the database.
sub idle
{
  my ($self, @pending) = @_;
  my $dbh = undef;
  my @nodes = ();

  print scalar localtime,": idle: starting\n";
  eval
  {
    ($dbh, @nodes) = &expandNodesAndConnect ($self);
    @nodes or die "No node found? Typo perhaps?\n";
    my ($filter, %filter_args) = &otherNodeFilter ($self, "b.node");

    foreach my $node (@nodes)
    {

#     Close out finished requests. Do I need this?
#     $self->checkResults($dbh, \@nodes, \$filter, \%filter_args);

#     Get a list of requests to process
      foreach my $request ($self->requestQueue ($dbh, 5, $node, \$filter, \%filter_args))
      {
 	if ( $self->startOne ($request) )
        {
          $self->setRequestState($request,'Queued');
        }
        else
        {
          $self->setRequestState($request,'Error');
        }
      }
      $dbh->commit();
    }
  };
  do { chomp ($@); &alert ("database error: $@");
  eval { $dbh->rollback() } if $dbh } if $@;

  # Wait for all jobs to finish
  while (@{$$self{JOBS}})
  {
    $self->pumpJobs();
    select (undef, undef, undef, 0.1);
  }

  # Disconnect from the database
  &disconnectFromDatabase ($self, $dbh);

  # Have a little nap
  print scalar localtime,": idle: take a nap\n";
  $self->nap (5 + 0 * $$self{WAITTIME});
  print scalar localtime,": idle: Returning\n";
}

sub setFileState
{
# Change the state of a file-test in the database
  my ($self, $request, $result) = @_;
  my ($sql,%p,$q);
  return unless defined $result;

  $sql = qq{
	insert into t_dvs_file_result fr 
	(id,request,fileid,time_reported,status)
	values
	(seq_dvs_file_result.nextval,:request,:fileid,:time,
	 (select id from t_dvs_status where name like :status_name )
	)
       };
  %p = ( ':fileid'      => $result->{FILEID},
  	 ':request'     => $request,
         ':status_name' => $result->{STATUS},
         ':time'        => $result->{TIME_REPORTED},
       );
#$DB::single=$debug_me;
  $q = &dbexec($self->{DBH},$sql,%p);
}

sub setRequestFilecount
{
  my ($self,$id,$n_tested,$n_ok) = @_;
  my ($sql,%p,$q);

  $sql = qq{ update t_status_block_verify set n_tested = :n_tested,
		n_ok = :n_ok where id = :id };
  %p = ( ':n_tested' => $n_tested,
	 ':n_ok'     => $n_ok,
	 ':id'       => $id
       );
  $q = &dbexec($self->{DBH},$sql,%p);
}

sub setRequestState
{
# Change the state of a request in the database
  my ($self, $request, $state) = @_;
  my ($sql,%p,$q);
  my ($disconnect, $dbh, @nodes);
  return unless defined $request->{ID};
  if ( ! defined ($dbh = $self->{DBH} ) )
  {
print "Hmm, I have to connect...? (Request=$request->{ID}, state=$state)\n";
    ($dbh,@nodes) = &expandNodesAndConnect($self);
    $disconnect=1;
  }

  print scalar localtime,": Request=$request->{ID}, state=$state\n";

  $sql = qq{
	update t_status_block_verify sbv 
	set time_reported = :time,
	status = 
	 (select id from t_dvs_status where name like :state )
	where id = :id
       };
  %p = ( ':id'    => $request->{ID},
         ':state' => $state,
         ':time'  => time()
       );
  $q = &dbexec($dbh,$sql,%p);
  if ( $disconnect )
  {
#   commit and disconnect, since I was disconnected when I was called...
    $dbh->commit();
    &disconnectFromDatabase($self,$dbh);
  }
}

sub checkResults
{
  print "Stub for checkResults for now...\n";
  die "Why am I here????\n";
# select nvl(status,0) status, count(nvl(status,0)) status_count from t_dvs_file vf left join t_dvs_file_result vfr on vfr.fileid = vf.fileid where vf.request = 260 group by status;
}
1;
