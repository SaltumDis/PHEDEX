#!/usr/bin/env perl

##H Update subscription statistics for faster web access.
##H
##H Usage:
##H   InfoSubscriptions
##H      -state DIRECTORY -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 600);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = new InfoSubscriptions (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package InfoSubscriptions; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef);		# Database configuration file
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Recreate statistics
	my $now = &mytimeofday();
	my @qry = &dbexec($dbh, qq{delete from t_info_subscriptions});
	@qry = &dbexec($dbh, qq{insert into t_info_subscriptions
	   (timestamp, owner, dataset, destination, n_files, sz_files,
	    n_files_at_dest, sz_files_at_dest)
	   (select
	      :now,
              b.owner,
              b.dataset,
              s.destination,
              count(f.guid),
              nvl(sum(f.filesize),0),
              count(rs.guid),
              sum(decode(rs.guid,null,0,f.filesize))
            from t_file f
            left join t_block b
	      on b.name = f.inblock
            left join t_subscription s
              on s.owner = b.owner and s.dataset = b.dataset
            left join t_replica_state rs
              on rs.guid = f.guid and rs.node = s.destination
            group by :now, b.owner, b.dataset, s.destination)},
	    ":now" => $now);
	$dbh->commit();
    	&logmsg ("updated $qry[1] subscription summary rows") if $qry[1];
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
