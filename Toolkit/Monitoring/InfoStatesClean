#!/usr/bin/env perl

##H Update various core state monitoring values and keep tables clean.
##H
##H Usage:
##H   InfoStatesClean -state DIRECTORY -db FILE[:SECTION] -node NODE [-log OUT]
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -node      the node where this agent runs
##H -log       where to redirect logging information

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
use Getopt::Long;
use UtilsHelp;
&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "node=s"      => \$args{MYNODE},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG} || !$args{MYNODE})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new InfoStatesClean (%args))->process();

######################################################################
# Routines for this agent.
package InfoStatesClean; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	    	  MYNODE => undef,		# TMDB node name
	          WAITTIME => 45 + rand(15));	# Agent activity cycle
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self);
	my $now = &mytimeofday();

    	# Record, then nuke transfers that have expired
	&dbexec($dbh, qq{
	    insert into t_xfer_tracking
            (timestamp, from_node, to_node, priority, fileid,
             is_avail, is_try, is_done, is_fail, is_expire)
	    (select time_expire, from_node, to_node, priority, fileid,
		    0, 0, 0, 0, 1
             from t_xfer_state where time_expire < :now)},
	    ":now" => $now);
	&dbexec($dbh, qq{delete from t_xfer_state where time_expire < :now},
	    ":now" => $now);
    	$dbh->commit();

	# Summarise replica states
	&dbexec($dbh, qq{delete from t_info_xfer_replicas});
	&dbexec($dbh, qq{
	    insert into t_info_xfer_replicas
	    (select :now, xr.node, xr.state,
	            count (xr.fileid), nvl (sum (f.filesize), 0)
	     from t_xfer_replica xr join t_xfer_file f on f.id = xr.fileid
	     group by :now, xr.node, xr.state)},
	     ":now" => &mytimeofday ());

	# Summarise file transfer states
	&dbexec($dbh, qq{delete from t_info_xfer_states});
	&dbexec($dbh, qq{
	    insert into t_info_xfer_states
	    (select :now, xs.from_node, xs.to_node, xs.from_state, xs.to_state,
	            count (xs.fileid), nvl (sum (f.filesize), 0)
	     from t_xfer_state xs join t_xfer_file f on f.id = xs.fileid
	     group by :now, xs.from_node, xs.to_node, xs.from_state, xs.to_state)},
	     ":now" => &mytimeofday ());
        $dbh->commit();

	# Delete obsolete agent status messages (3 days)
	my %old = (":old" => &mytimeofday() - 3*86400);
	&dbexec($dbh,qq{delete from t_agent_status where time_update < :old}, %old);
	&dbexec($dbh,qq{delete from t_info_agent_status where time_update < :old}, %old);
	$dbh->commit();
    };
    do { chomp ($@); &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($$self{WAITTIME});
}
