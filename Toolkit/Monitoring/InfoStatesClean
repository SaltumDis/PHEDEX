#!/usr/bin/env perl

##H Update various core state monitoring values and keep tables clean.
##H
##H Usage:
##H   InfoStatesClean -state DIRECTORY -db FILE[:SECTION] -node NODE [-log OUT]
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -node      the node where this agent runs
##H -log       where to redirect logging information

######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "node=s"      => \$args{MYNODE},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG} || !$args{MYNODE})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new InfoStatesClean (%args))->process();

######################################################################
# Routines for this agent.
package InfoStatesClean; use strict; use warnings; use base 'PHEDEX::Core::Agent';
use PHEDEX::Core::Logging;
use PHEDEX::Core::Timing;
use PHEDEX::Core::DB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	    	  MYNODE => undef,		# TMDB node name
	          WAITTIME => 300);		# Agent activity cycle
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self);
	my $now = &mytimeofday();

	# Delete obsolete agent status messages (3 days)
	my %old = (":old" => &mytimeofday() - 3*86400);
	&dbexec($dbh,qq{delete from t_agent_status where time_update < :old}, %old);
	&dbexec($dbh,qq{delete from t_agent_log where time_update < :old},
		":old" => &mytimeofday() - 30*86400);
	$dbh->commit();

	# Delete requests for file and block deletion after 3 days
	&dbexec($dbh,qq{delete from t_xfer_delete where time_complete < :old}, %old);
	&dbexec($dbh,qq{delete from t_dps_block_delete where time_complete < :old}, %old);
	$dbh->commit();

	# Keep 100 most recent errors for every link
	&dbexec($dbh, qq{
	   delete from t_xfer_error xe where rowid not in
	     (select rowid from
	      (select rowid, row_number()
		over (partition by from_node, to_node order by time_done desc) rank
	       from t_xfer_error)
	      where rank <= 100)});
    };
    do { chomp ($@); &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);
}
