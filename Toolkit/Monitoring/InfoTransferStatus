#!/usr/bin/env perl

##H Update transfer status data for faster web access.
##H
##H Usage:
##H   InfoTransferStatus
##H      -state DIRECTORY -dbconfig FILE [-wait SECS]
##H
##H -state     agent state directory
##H -dbconfig  database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbconfig' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = new InfoTransferStatus (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package InfoTransferStatus; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef);		# Database configuration file
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Get most recent snapshot.  Pick a row that hasn't been updated
	# in a while, and select it as victim to update.  This way we do
	# only a limited amount of work each time around, limiting the
	# transaction length, and gradually remove obsolete entries.

	my $oldest = undef;
	my $now = &mytimeofday();
	my $squery = &dbprep ($dbh, qq{
	    select timestamp from t_info_transfer_status where node = ?});
	foreach my $row (@{$dbh->selectall_arrayref(qq{select name from t_node})})
	{
	    my ($node) = @$row;

	    # Get snapshot for this node
	    $squery->execute($node);
	    my ($stamp) = $squery->fetchrow();
	    $stamp ||= 0;

	    # If this is oldest row, remember it
	    $oldest = [ $node, $stamp ] if (! $oldest || $oldest->[1] > $stamp);
        }

	# If oldest row is less than 2 minutes, go away and sleep
	return if ! $oldest || $now - $oldest->[1] < 300;

	# No longer valid.  Remove this entry and recompute, then
	# move and have a nap so we don't overstress the database.
        my $node = $oldest->[0];
	&dbexec($dbh, qq{
	    delete from t_info_transfer_status where node = :node},
	    ":node" => $node);
	&dbexec($dbh, qq{
	    insert into t_info_transfer_status
	    (select :now, :node, x.*
	     from (select count(f.guid),
			  nvl(sum(f.filesize), 0),
			  count(rs.guid),
			  nvl(sum(case when rs.guid is not null then f.filesize else 0 end),0),
			  nvl(sum(case when rs.state = 1 then 1 else 0 end),0),
			  nvl(sum(case when rs.state = 1 then f.filesize else 0 end),0),
			  nvl(sum(case when ts.from_state = 1 and ts.to_state <= 2 then 1 else 0 end),0),
			  nvl(sum(case when ts.from_state = 1 and ts.to_state <= 2 then f.filesize else 0 end),0),
			  nvl(sum(case when ts.to_state = 2 then 1 else 0 end),0),
			  nvl(sum(case when ts.to_state = 2 then f.filesize else 0 end),0),
			  nvl(sum(case when ts.to_state = 1 then 1 else 0 end),0),
			  nvl(sum(case when ts.to_state = 1 then f.filesize else 0 end),0),
			  nvl(sum(case when ts.to_state = 0 then 1 else 0 end),0),
			  nvl(sum(case when ts.to_state = 0 then f.filesize else 0 end),0),
			  nvl(sum(case when ts.to_state > 3 then 1 else 0 end),0),
			  nvl(sum(case when ts.to_state > 3 then f.filesize else 0 end),0)
		   from t_file f
		   left join t_replica_state rs
		     on rs.guid = f.guid and rs.node = :node
		   left join t_transfer_state ts
		     on ts.guid = f.guid and ts.to_node = :node
      		   where (rs.node = :node) or (ts.to_node = :node)) x)},
	    ":node" => $node, ":now" => $now);

	$dbh->commit();
	&logmsg("updated transfer stats for $node");
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
