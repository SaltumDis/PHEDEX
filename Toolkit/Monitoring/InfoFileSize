#!/usr/bin/perl

## Update transfer status data for faster web access.

BEGIN { use strict; use warnings; }
my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 600);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n",
    exit (1);
}

my $agent = new InfoFileSize (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package InfoFileSize; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef);		# Database user password
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $now = time();
	$dbh = &connectToDatabase ($self, 0);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

	# Recreate statistics
	$dbh->do(qq{delete from t_info_file_size_overview});
	$dbh->do(qq{delete from t_info_file_size_histogram});
	$dbh->do(qq{insert into t_info_file_size_overview
			(select
			   $now,
			   count(to_number(value)),
		           sum(to_number(value)),
		           min(to_number(value)),
		           max(to_number(value)),
	                   avg(to_number(value)),
		           percentile_disc(.5) within group (order by to_number(value))
			 from t_replica_metadata
			 where attribute = 'filesize')});
	$dbh->do(qq{insert into t_info_file_size_histogram
			(select
			   $now,
			   binsize,
			   10 * 1024 * 1024,
			   count(binsize),
			   sum(realsize)
			 from (select
			         trunc(to_number(value)/(10 * 1024 * 1024)) as binsize,
				 to_number(value) as realsize
			       from t_replica_metadata
			       where attribute = 'filesize')
			 group by binsize)});

	$dbh->commit();
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
