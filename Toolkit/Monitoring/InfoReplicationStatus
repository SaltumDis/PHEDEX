#!/usr/bin/env perl

## Update subscription data for faster web access.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 600);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new InfoReplicationStatus (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package InfoReplicationStatus; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef);		# Database user password
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Recreate statistics
	my $now = time();
	my (@qry1, @qry2);
	&dbexec($dbh, qq{delete from t_info_replication_overview});
	&dbexec($dbh, qq{delete from t_info_replication_details});
	@qry1 = &dbexec($dbh, qq{insert into t_info_replication_overview
	   (update_stamp, dataset, owner, n_runs, n_files, sz_files)
	   (select
	      :now,
              m1.value,
              m2.value,
              count(distinct m3.value),
              count(m2.guid),
              nvl(sum(m4.value),0)
            from t_files_for_transfer f
            left join t_replica_metadata m1
              on m1.guid = f.guid and m1.attribute = 'POOL_dataset'
            left join t_replica_metadata m2
              on m2.guid = f.guid and m2.attribute = 'POOL_owner'
            left join t_replica_metadata m3
              on m3.guid = f.guid and m3.attribute = 'POOL_jobid'
            left join t_replica_metadata m4
              on m4.guid = f.guid and m4.attribute = 'filesize'
            group by :now, m1.value, m2.value)},
	    ":now" => $now);
	@qry2 = &dbexec($dbh, qq{insert into t_info_replication_details
	   (update_stamp, dataset, owner, node, n_files, sz_files)
	   (select
	      :now,
              m1.value,
              m2.value,
              rs.node,
              count(rs.guid),
              nvl(sum(m3.value),0)
            from t_replica_state rs
            left join t_replica_metadata m1
              on m1.guid = rs.guid and m1.attribute = 'POOL_dataset'
            left join t_replica_metadata m2
              on m2.guid = rs.guid and m2.attribute = 'POOL_owner'
            left join t_replica_metadata m3
             on m3.guid = rs.guid and m3.attribute = 'filesize'
            group by :now, m1.value, m2.value, rs.node)},
	    ":now" => $now);

	$dbh->commit();
    	&logmsg ("updated $qry1[1]/$qry2[1] replication summary rows") if $qry1[1] || $qry2[1];
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
