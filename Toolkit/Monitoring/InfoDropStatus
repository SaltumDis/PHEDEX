#!/usr/bin/env perl

##H Update agent status into database so it can be seen from outside.
##H
##H Usage:
##H   InfoDropStatus
##H      -state DIRECTORY -dir STATE-ROOT -site SITE-ID
##H      -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -dir       the parent directory of all agent state directories at this node
##H -site      an identifier for the site running these agents
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 57);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-site' && scalar @ARGV > 1)
    { shift (@ARGV); $args{SITEID} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dir' && scalar @ARGV > 1)
    { shift (@ARGV); $args{AGENTDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{AGENTDIR} || !$args{SITEID}
    || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new InfoDropStatus (%args))->process();

######################################################################
# Routines for this agent.
package InfoDropStatus; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsNet;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  AGENTDIR => undef,		# Directory of agent states
	  	  SITEID => undef);		# Site ID for database
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $now = time();
	$dbh = &connectToDatabase ($self, 0);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

	# Collect statistics
	my $item = undef;
	my %status = ();
	my %alive = ();
	my $site = $self->{SITEID};
	my $host = &getfullhostname();
	my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
	my $live = undef;
	my $dir = undef;
	open (STATUS, "$home/../../Utilities/DropStatus $self->{AGENTDIR}/* |") or return;
	while (<STATUS>)
	{
	    if (/^(.*\/(\S+)):/)
	    {
		do { $item = $live = $dir = undef; next } if ! -f "$1/pid";
		$item = $status{$2} = {};
		$live = $alive{$2} = {};
		$dir = $1;
	    }
	    elsif ($live && $dir && /^\s+((\S)(\d*)): /)
	    {
		my $subdir = $2 eq 'M' ? "" : "/worker-$3";
		my $pid = qx(cat "$dir$subdir/pid" 2>/dev/null); chomp ($pid); $pid ||= -1;
		$live->{$1} = { PID => $pid, LIVE => kill (0, $pid) };
		my $row = $item->{$1} = {};
		my $line = $';
		while ($line =~ /(\d+)\s(\S+)($|,)/)
		{
		    $row->{$2} = $1;
		    $line = $';
	        }
	    }
        }
	close (STATUS) or return;

	&dbexec($dbh, qq{
	    delete from t_info_agent_status
	    where site = :site
	      and host = :host
	      and path = :path},
	    ":site" => $site, ":host" => $host,
	    ":path" => $self->{AGENTDIR});
	my $stmt = $dbh->prepare(qq{
		    insert into t_info_agent_status values
		    (:now, :site, :host, :path, :agent, :worker,
		     :pid, :live, :state, :value)});
	foreach my $agent (keys %status)
	{
	    foreach my $worker (keys %{$status{$agent}})
	    {
		foreach my $state (keys %{$status{$agent}{$worker}})
		{
		    &dbbindexec($stmt,
			        ":now" => $now,
				":site" => $site,
				":host" => $host,
				":path" => $self->{AGENTDIR},
			    	":agent" => $agent,
				":worker" => $worker,
				":pid" => $alive{$agent}{$worker}{PID},
				":live" => $alive{$agent}{$worker}{LIVE},
				":state" => $state,
				":value" => $status{$agent}{$worker}{$state});
	        }
	    }
	}
	$dbh->commit();
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
