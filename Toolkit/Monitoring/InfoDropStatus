#!/usr/bin/perl

## Update agent status into database for faster web access.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 57);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-site' && scalar @ARGV > 1)
    { shift (@ARGV); $args{SITEID} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dir' && scalar @ARGV > 1)
    { shift (@ARGV); $args{AGENTDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{AGENTDIR} || !$args{SITEID})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX -dir STATE-PARENT-DIR -site SITE-ID\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new InfoDropStatus (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package InfoDropStatus; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsNet;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  AGENTDIR => undef,		# Directory of agent states
	  	  SITEID => undef);		# Site ID for database
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $now = time();
	$dbh = &connectToDatabase ($self, 0);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

	# Collect statistics
	my $item = undef;
	my %status = ();
	my %alive = ();
	my $site = $self->{SITEID};
	my $host = &getfullhostname();
	my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
	my $live = undef;
	my $dir = undef;
	open (STATUS, "$home/../../Utilities/DropStatus $self->{AGENTDIR}/* |") or return;
	while (<STATUS>)
	{
	    if (/^(.*\/(\S+)):/)
	    {
		do { $item = $live = $dir = undef; next } if ! -f "$1/pid";
		$item = $status{$2} = {};
		$live = $alive{$2} = {};
		$dir = $1;
	    }
	    elsif ($live && $dir && /^\s+((\S)(\d*)): /)
	    {
		my $subdir = $2 eq 'M' ? "" : "/worker-$3";
		next if ! -f "$dir$subdir/pid";
		my $pid = qx(cat "$dir$subdir/pid"); chomp ($pid);
		$live->{$1} = { PID => $pid, LIVE => kill (0, $pid) };
		my $row = $item->{$1} = {};
		my $line = $';
		while ($line =~ /(\d+)\s(\S+)($|,)/)
		{
		    $row->{$2} = $1;
		    $line = $';
	        }
	    }
        }
	close (STATUS) or return;

	&dbexec($dbh, qq{
	    delete from t_info_drop_status where site = :site and host = :host},
	    ":site" => $site, ":host" => $host);
	my $stmt = $dbh->prepare(qq{
		    insert into t_info_drop_status values
		    (:now, :site, :host, :agent, :worker,
		     :pid, :live, :state, :value)});
	foreach my $agent (keys %status)
	{
	    foreach my $worker (keys %{$status{$agent}})
	    {
		foreach my $state (keys %{$status{$agent}{$worker}})
		{
		    &dbbindexec($stmt,
			        ":now" => $now,
				":site" => $site,
				":host" => $host,
			    	":agent" => $agent,
				":worker" => $worker,
				":pid" => $alive{$agent}{$worker}{PID},
				":live" => $alive{$agent}{$worker}{LIVE},
				":state" => $state,
				":value" => $status{$agent}{$worker}{$state});
	        }
	    }
	}
	$dbh->commit();
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
