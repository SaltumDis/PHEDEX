#!/usr/bin/env perl

## Clean up active tables by moving historical data away.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 7);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new TableCleaner (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package TableCleaner; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef);		# Database user password
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";

	# Archive completed transfers from t_transfer_state into
	# t_transfer_completed; completed is to_state=3.
	my $rows = 0;
	my $archive = &dbprep ($dbh, qq{
	    insert into t_transfer_completed values
	    (:timestamp, :guid, :to_node, :to_state, :to_timestamp,
	     :from_node, :from_state, :from_timestamp)});
	my $retire = &dbprep ($dbh, qq{
	    delete from t_transfer_state
	    where guid = :guid and to_node = :to_node});
	my $completed = &dbexec ($dbh, qq{
	    select timestamp, guid, to_node, to_state, to_timestamp,
	           from_node, from_state, from_timestamp
	    from t_transfer_state
	    where to_state = 3});
        while (my $row = $completed->fetchrow_hashref())
	{
	    &dbbindexec ($archive, map { (":$_" => $row->{$_}) } keys %$row);
	    &dbbindexec ($retire, ":guid" => $row->{GUID},
		         ":to_node" => $row->{TO_NODE});
	    $dbh->commit();
	    ++$rows;
	}

	&logmsg ("$rows completed transfers archived") if $rows;

	# Delete obsolete agent status messages
	my %old = (":old" => &mytimeofday() - 3*86400);
	&dbexec($dbh,qq{delete from t_agent_status where timestamp < :old}, %old);
	&dbexec($dbh,qq{delete from t_info_agent_status where timestamp < :old}, %old);
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
