#!/usr/bin/perl

## Update transfer performance data for faster web access.

BEGIN { use strict; use warnings; }
my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new InfoTransferRate (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package InfoTransferRate; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef);		# Database user password
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $now = time();
	$dbh = &connectToDatabase ($self, 0);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

	# Select counts and time stamps from rows we are monitoring.
	my %info = ();
	my %start = (0 => 0, map { $_ => $now - $_ } 30*86400, 7 * 86400, 86400, 3600);
	my $query = qq{
		select
		  !DETAIL! xfrom, xto,
		  count(guid),			-- files
		  sum(xsize),			-- bytes
		  sum(xtime),			-- time
		  sum(xsize)/sum(xtime),	-- B/s
		  avg(xsize/xtime),		-- Mean B/s
		  min(xsize/xtime),		-- Min B/s
		  max(xsize/xtime)		-- Max B/s
		from (
		  select
		    ts.guid guid,
		    ts.from_node xfrom,
		    ts.to_node xto,
		    m.value xsize,
		    ts.to_time_stamp - ts.from_time_stamp xtime
		  from t_transfer_state ts
		  left join t_replica_metadata m
		    on m.guid = ts.guid and m.attribute = 'filesize'
		  where ts.to_state = 3
		    and ts.from_state = 1
		    and ts.to_time_stamp > !START!)
		!DETAIL! group by xfrom, xto};

	$dbh->do(qq{delete from t_info_transfer_rate});
	foreach my $span (keys %start)
	{
	    my $row;
	    my $q = $query;
	    my ($from, $to, $files, $bytes, $time, $bps, $abps, $ibps, $xbps);
	    $q =~ s/!DETAIL!//g; $q =~ s/!START!/$start{$span}/;
	    foreach $row (@{$dbh->selectall_arrayref($q)}) {
		($from, $to, $files, $bytes, $time, $bps, $abps, $ibps, $xbps) = @$row;
		next if ! $files;
		$dbh->do(qq{insert into t_info_transfer_rate values (
				$now, $span, 'N', '$from', '$to', $files, $bytes, $time,
				$bps, $abps, $ibps, $xbps)});
	    }

	    $q = $query;
	    $q =~ s/!DETAIL!/--/g; $q =~ s/!START!/$start{$span}/;
	    foreach $row (@{$dbh->selectall_arrayref($q)}) {
		($files, $bytes, $time, $bps, $abps, $ibps, $xbps) = @$row;
		next if ! $files;
	 	$dbh->do(qq{insert into t_info_transfer_rate values (
				$now, $span, 'T', '', '', $files, $bytes, $time,
				$bps, $abps, $ibps, $xbps)});
	    }
        }

	$dbh->commit();
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
