#!/usr/bin/env perl

##H Update transfer performance data for faster web access.
##H
##H Usage:
##H   InfoTransferRate
##H      -state DIRECTORY -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new InfoTransferRate (%args))->process();

######################################################################
# Routines for this agent.
package InfoTransferRate; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef);		# Database configuration file
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Aggregate from transfer performance histogram (FIXME: also
	# include stats for pending transfers?).
	my %info = ();
	my $now = &mytimeofday();
	my %start = (0 => 0, map { $_ => $now - $_ } 30*86400, 7 * 86400, 86400, 3600);
	my $basequery = qq{
		select
		  !DETAIL! from_node, to_node,
		  nvl(sum(xferred_files),0),
		  nvl(sum(xferred_bytes),0)
		from t_perf_histogram
		where timebin >= :starttime
		!DETAIL! group by from_node, to_node};

	&dbexec ($dbh, qq{delete from t_info_transfer_rate});
	my $stmt = $dbh->prepare(qq{
		insert into t_info_transfer_rate values
		(:now, :span, :type, :from_node, :to_node, :files, :bytes, 0,
		 0, 0, 0, 0)});

	foreach my $span (keys %start)
	{
	    my $row;
	    my $q = $basequery; $q =~ s/!DETAIL!//g;
	    my ($from, $to, $files, $bytes);
	    my ($query) = &dbexec($dbh, $q, ":starttime" => $start{$span});
	    while (my $row = $query->fetchrow_arrayref()) {
		($from, $to, $files, $bytes) = @$row;
		&dbbindexec($stmt, ":now" => $now, ":span" => $span, ":type" => 'N',
			    ":from_node" => $from, ":to_node" => $to,
			    ":files" => $files, ":bytes" => $bytes)
		    if $files;
	    }

	    $q = $basequery; $q =~ s/!DETAIL!/--/g;
	    ($query) = &dbexec($dbh, $q, ":starttime" => $start{$span});
	    while (my $row = $query->fetchrow_arrayref()) {
		($files, $bytes) = @$row;
		&dbbindexec($stmt, ":now" => $now, ":span" => $span, ":type" => 'T',
			    ":from_node" => '', ":to_node" => '',
			    ":files" => $files, ":bytes" => $bytes)
		    if $files;
	    }
        }

	$dbh->commit();
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
