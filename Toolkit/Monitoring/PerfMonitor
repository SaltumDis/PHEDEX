#!/usr/bin/env perl

##H Update node-to-node transfer performance statistics.  Aggregates
##H completed and pending transfers into historical histogram for
##H performance monitoring and latency estimation.
##H
##H Usage:
##H   PerfMonitor
##H      -state DIRECTORY -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 7);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new PerfMonitor (%args))->process();

######################################################################
# Routines for this agent.
package PerfMonitor; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef);		# Database configuration file
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";

	# Part I
	#
	# Update statistics on currently pending transfer queue.  This
	# is a heart-beat routine, we want to execute this regularly
	# so the histogram has no gaps -- if we miss a beat, there will
	# be no data for this time bin.
	my $timebin = int(&mytimeofday() / 300)*300;
	my $qpending = &dbexec ($dbh, qq{
	    select
	      ts.from_node,
	      ts.to_node,
	      count (ts.guid),
	      sum (f.filesize)
	    from t_transfer_state ts
	    join t_file f on f.guid = ts.guid
	    where ts.to_state != 3
	    group by ts.from_node, ts.to_node});
    	while (my ($from, $to, $files, $bytes) = $qpending->fetchrow())
	{
	    # We may run more frequently than once per time-bin.  Only
	    # update if values for this timebin don't exist yet.
	    eval { &dbexec ($dbh, qq{
		insert into t_perf_histogram
		(timebin, from_node, to_node, xferred_files, xferred_bytes)
		values (:timebin, :from_node, :to_node, 0, 0)},
		":timebin" => $timebin,
		":from_node" => $from,
		":to_node" => $to) };
	    &dbexec ($dbh, qq{
		update t_perf_histogram
		set pending_files = :files, pending_bytes = :bytes
		where timebin = :timebin
		  and from_node = :from_node
		  and to_node = :to_node
	          and pending_files is null
	          and pending_bytes is null},
		":timebin" => $timebin,
		":from_node" => $from,
		":to_node" => $to,
		":files" => $files,
		":bytes" => $bytes);
	}

	$dbh->commit();

	# Part II: Move completed transfer information into the histogram.
	# This is currently rather a sledge-hammer with the big lock, but
	# is required for this agent to keep up at high throughput (and
	# makes little difference at low throughput).
	&dbexec ($dbh, qq{lock table t_transfer_completed in exclusive mode});
	my $qrows = &dbexec ($dbh, qq{
	    select
	        trunc (tc.to_timestamp/300)*300,
		tc.from_node,
		tc.to_node,
		count(tc.guid),
		sum(f.filesize)
	    from t_transfer_completed tc
	    join t_file f on f.guid = tc.guid
	    group by trunc (tc.to_timestamp/300)*300, from_node, to_node});
	while (my ($bin, $from, $to, $files, $bytes) = $qrows->fetchrow())
	{
	    eval { &dbexec ($dbh, qq{
		insert into t_perf_histogram
		(timebin, from_node, to_node, xferred_files, xferred_bytes)
		values (:timebin, :from_node, :to_node, 0, 0)},
		":timebin" => $bin,
		":from_node" => $from,
		":to_node" => $to) };
	    &dbexec ($dbh, qq{
		update t_perf_histogram
		set xferred_files = xferred_files + :new_files,
		    xferred_bytes = xferred_bytes + :new_bytes
		where timebin = :timebin
		  and from_node = :from_node
		  and to_node = :to_node},
		":timebin" => $bin,
		":from_node" => $from,
		":to_node" => $to,
	  	":new_files" => $files,
		":new_bytes" => $bytes);
	}
	&dbexec ($dbh, qq{delete from t_transfer_completed});
	$dbh->commit();
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
