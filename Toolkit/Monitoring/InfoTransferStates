#!/usr/bin/env perl

##H Update transfer state data for faster web access.
##H
##H Usage:
##H   InfoTransferStates
##H      -state DIRECTORY -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args = (WAITTIME => 120);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new InfoTransferStates (%args))->process();

######################################################################
# Routines for this agent.
package InfoTransferStates; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef);		# Database configuration file
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Update database.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self, 0) or die "failed to connect";
        # FIXME: Pick up and process messages to me

	# Summarise from t_block_replica information.
	# FIXME: Remove 0, 0 entries before V2.2 release, update schema
	&dbexec($dbh, qq{delete from t_info_transfer_states});
	&dbexec($dbh, qq{
	    insert into t_info_transfer_states
	    (select :now, from_node, to_node, from_state, to_state,
	            count (ts.guid), nvl (sum (f.filesize), 0)
	     from t_transfer_state ts join t_file f on f.guid = ts.guid
	     group by :now, from_node, to_node, from_state, to_state)},
	     ":now" => &mytimeofday ());

	$dbh->commit();
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
