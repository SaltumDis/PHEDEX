#!/usr/bin/env perl

## Delete replica entries from fake nodes.
##
## This agent clears out replica entries for nodes that are not
## real disk buffers.  It deletes all replicas created more than
## three days ago that have no outbound transfers.  In nature
## this is like FileDiskCleaner, except it has no disk to worry
## about.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 8*3600);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-nodes' && scalar @ARGV > 1)
    { shift (@ARGV); push(@{$args{NODES}}, split(/,/, shift(@ARGV))); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{NODES})
{
    print STDERR
	"usage: $me -state IN-DROP-BOX -nodes TMDB-NODE[,TMDB-NODE...]\n",
	"    -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new FileFakeCleaner (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileFakeCleaner; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  NODES => undef,		# Nodes to clean tables for
	  	  MYNODE => undef,		# My TMDB node name
	  	  MSSNODE => undef,		# MSS TMDB node name
	  	  AGENTID => "Cleaner");	# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	foreach my $node (@{$self->{NODES}})
	{
	    my $start = &mytimeofday();
	    $self->{MYNODE} = $node;
	    $dbh = &connectToDatabase ($self) or die "failed to connect";

	    my ($stmt, $ndel) = &dbexec($dbh, qq{
		delete from t_replica_state
		where timestamp < :old
		  and node = :node
		  and guid not in (select guid from t_transfer_state
	  			   where to_node = :node or from_node = :node)},
		":old" => $start - 3*86400,
		":node" => $self->{MYNODE});
	    $dbh->commit();
	    &logmsg ("deleted $ndel replicas for $node in "
		     . sprintf ('%.1fs', &mytimeofday()-$start))
	        if $ndel > 0;
	    undef $self->{MYNODE};
	}
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
