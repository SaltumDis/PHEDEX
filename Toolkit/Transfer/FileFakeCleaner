#!/usr/bin/env perl

##H Delete replica entries from fake nodes.
##H
##H This agent clears out replica entries for nodes that are not
##H real disk buffers.  It deletes all replicas created more than
##H three days ago that have no outbound transfers.  In nature
##H this is like FileDiskCleaner, except it has no disk to worry
##H about.
##H
##H Usage:
##H   FileFakeCleaner
##H      -state DIRECTORY -nodes NAME[,NAME...] -db FILE[:SECTION] [-log OUT]
##H
##H -state     agent state directory
##H -nodes     comma-separated list of nodes to run the agent for
##H -db        database connection configuration parameter file
##H -log       where to redirect logging information

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
use Getopt::Long;
use UtilsHelp;
&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "nodes=s"     => sub { push(@{$args{NODES}}, split(/,/, $_[1])) },
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{NODES} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileFakeCleaner (%args))->process();

######################################################################
# Routines for this agent.
package FileFakeCleaner; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  NODES => undef,		# Nodes to clean tables for
		  WAITTIME => 8*3600,		# Time to nap between runs
		  BACKOFF => 3*86400,           # Safety time to wait before cleanup
	  	  AGENTID => "FileCleaner");	# Identity for activity logs
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	foreach my $node (@{$$self{NODES}})
	{
	    $$self{MYNODE} = $node;
	    $dbh = &connectToDatabase ($self) or die "failed to connect";

	    my $start = &mytimeofday();
	    my ($stmt, $ndel) = &dbexec($dbh, qq{
		delete from t_xfer_replica
		where time_create < :old
		  and node = :node
		  and id not in
		    (select from_replica from t_xfer_state
		     where from_node = :node)},
		":old" => $start - $$self{BACKOFF},
		":node" => $$self{ID_MYNODE});
	    $dbh->commit();
	    &logmsg ("deleted $ndel replicas for $node in "
		     . sprintf ('%.1fs', &mytimeofday()-$start))
	        if $ndel > 0;
	    undef $$self{MYNODE};
	}
    };
    do { chomp ($@); &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($$self{WAITTIME});
}
