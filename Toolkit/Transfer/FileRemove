#! /usr/bin/env perl

##H Clear up files marked for deletion.
##H
##H This agent perfoms the deletion requests entered into TMDB
##H by an administrator or via the web page.  Each request consists
##H of a dataset or block plus the node from where the file should
##H be deleted.
##H
##H Files on nodes without pending transfers are candidates for
##H clearing up.  Files are removed oldest first, first from the
##H TMDB replica table, then physically from disk.  File removal
##H may be a real removal, or simply ejection of the file from
##H stager disk but not permanently removed from tape.
##H
##H By default this agent is limited to pulling 100 files per minute
##H from the TMDB and creating deletion jobs.  This rate may be
##H increased using the -limit option, but one should be mindful of
##H the load the deletion command has on the storage systems
##H
##H Usage:
##H   FileRemove
##H      -state DIRECTORY -nodes NAME -db FILE[:SECTION] [-log OUT]
##H      -storagemap FILE [-protocol NAME] -delete COMMAND[,ARG...]
##H      [-limit N]
##H
##H -state         agent state directory.
##H -nodes         nodes to run and clean files for.
##H -db            database connection configuration parameter file.
##H -storagemap    storage mapping catalogue.
##H -protocol      protocol to use with storage map, by default "direct".
##H -delete        command to remove physical copy (typically FileDownloadDelete).
##H -limit         limit on the number of files to delete per minute, default 100
##H -log           where to redirect logging information.

######################################################################
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::File::Remove::Agent;

&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
	     "db=s"        => \$args{DBCONFIG},
             "nodes=s"     => sub { push(@{$args{NODES}}, split(/,/, $_[1])) },
             "delete=s"    => sub { push(@{$args{CMD_RM}}, split(/,/, $_[1])) },
	     "protocol=s"  => \$args{PROTOCOL},
	     "limit=i"     => \$args{LIMIT},
	     "help|h"	   => sub { &usage() });

if (!$args{NODES} || !$args{DROPDIR} || !$args{DBCONFIG} || !$args{CMD_RM} )
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = PHEDEX::File::Remove::Agent->new(%args,@ARGV);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;
