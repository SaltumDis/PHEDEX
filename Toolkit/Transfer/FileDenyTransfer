#!/usr/bin/env perl

##H This agent covers up bugs in file routing by refusing to transfer
##H files to certain nodes.  Occasionally when node routing table is
##H broken the file router makes strange decisions.  This affects
##H mainly central nodes such as CERN, which get lot of meaningless
##H flow-through traffic.  This agent denies that traffic in the hope
##H that the routing will fix itself sooner or later.
##H
##H Obviously this agent should never even need to run.  It should be
##H made obsolete by fixing the file routing.
##H
##H Usage:
##H   FileDenyTransfer
##H      -state DIRECTORY -node NAME -accept NODE[,NODE...]
##H      -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -accept    patterns of nodes from which transfers are legitimate
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-accept' && scalar @ARGV > 1)
    { shift (@ARGV); push(@{$args{ACCEPT_NODES}}, split(',', shift(@ARGV))); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{DBCONFIG} || !$args{ACCEPT_NODES})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileDenyTransfer (%args))->process();

######################################################################
# Routines for the master castor export agent.  This one simply manages
# the file transfer requests and passes the work to appropriate other
# local export agents (stage-in, checksum).
package FileDenyTransfer; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
		  ACCEPT_NODES => undef,	# Node patterns to accept
	  	  AGENTID => "Export");		# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	my $dbh = &connectToDatabase ($self) or die "failed to connect";

	# Delete everything not on accept list
	my @pats = @{$self->{ACCEPT_NODES}};
	my $keylist = join(" and ", map { "from_node not like :pat$_" } 0 .. $#pats);
	my %keys = map { (":pat$_"  => $pats[$_]) } 0 .. $#pats;
	my ($stmt, $rc) = &dbexec($dbh, qq{
	    delete from t_transfer_state
	    where to_node = :me and $keylist},
    	    ":me" => $self->{MYNODE}, %keys);
        &logmsg ("$rc bogus transfers to $self->{MYNODE} deleted") if $rc && $rc > 0;
	$dbh->commit();
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
