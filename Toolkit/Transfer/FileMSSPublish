#!/usr/bin/env perl

##H Upload files from a MSS node to a transfer node, where the two
##H are assumed to be actually the same, such as Castor or dCache.
##H Makes the replica available at the destination transfer node;
##H the outbound transfer availability from the destination is
##H controlled by whether the file is staged or not.
##H
##H This is technically a download agent, so it follows the file
##H routing rules.  However no real transfer ever occurs, the
##H files jump directly to the final state.  Note that if there
##H is a download agent running at the destination node, you will
##H want to run that with -ignore set to same as -mssnode here so
##H that the two won't compete over the same files.
##H
##H Usage:
##H   FileMSSPublish
##H      -state DIRECTORY -db FILE[:SECTION] [-wait SECS]
##H      -node NAME -mssnode NAME
##H
##H -state     agent state directory
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans
##H -node      the name of the destination node
##H -mssnode   the name of the source mass storage node

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-mssnode' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MSSNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{MSSNODE}
    || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileMSSPublish (%args))->process();

######################################################################
# Routines for this agent.
package FileMSSPublish; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsCatalogue;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
	  	  MSSNODE => undef,		# MSS TMDB node name
	  	  AGENTID => "MSSUpload");	# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";

	# Upload files.  We short-circuit normal handshake, especially
	# to avoid exporter from responding to transfers on this edge.
	# We create an appearance of correct transfer statistics for
	# monitoring purposes.  We expect no genuine transfers out of
	# the MSS node -- they will all go through the buffer node in
	# front of the MSS node.
        my %args = (":node" => $self->{MYNODE},
                    ":mss" => $self->{MSSNODE},
                    ":now" => &mytimeofday());
	
	# Guarantee a consistent result across the insert/update.
	&dbexec($dbh, qq{set transaction isolation level serializable});

	# First insert replicas for the transfers
        my ($istmt, $irows) = &dbexec($dbh, qq{
           insert into t_replica_state
              (timestamp, guid, node, state, state_timestamp)
              (select :now, guid, :node, 0, :now
               from t_transfer_state
               where from_node = :mss
                 and to_node = :node
                 and to_state = 0)},
           %args);

	# Then mark the transfers completed
	my ($ustmt, $urows) = &dbexec($dbh, qq{
           update t_transfer_state
           set to_state = 3, to_timestamp = :now
           where from_node = :mss
             and to_node = :node
             and to_state = 0},
           %args);

	# Prevent inconsistent update
        die "inconsistent update: $irows vs. $urows\n" if $irows != $urows;
        $dbh->commit();

	&logmsg ("$irows files uploaded") if $irows > 0;
    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($self->{WAITTIME});
}
