#!/usr/bin/env perl

##H This agent is for disk-only nodes whose files are always ready for
##H transfer to other nodes.  This export agent also requires the PFN
##H export agent to work along side it, but not any others.
##H
##H Usage:
##H   FileDiskExport -state DIRECTORY -node NAME -db FILE[:SECTION]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -log       where to redirect logging information

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
use Getopt::Long;
use UtilsHelp;
&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "node=s"      => \$args{MYNODE},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{MYNODE} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new FileDiskExport (%args))->process();

######################################################################
# Routines for the master castor export agent.  This one simply manages
# the file transfer requests and passes the work to appropriate other
# local export agents (stage-in, checksum).
package FileDiskExport; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  MYNODE => undef,		# My TMDB node name
		  WAITTIME => 10 + rand(5),	# Agent activity cycle
	  	  AGENTID => "FileExport");	# Identity for activity logs
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work
# assignments from the database here and pass them to slaves.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;

    # Always mark all files ready to go immediately.
    eval
    {
	my $dbh = &connectToDatabase ($self) or die "failed to connect";

	# Mark everything available locally.
	&dbexec($dbh, qq{
	    update t_xfer_replica
	    set state = 1, time_state = :now
	    where node = :node and state = 0},
   	    ":now" => &mytimeofday(), ":node" => $$self{ID_MYNODE});

	# Mark all pending transfers ready to go.
	&dbexec($dbh, qq{
	    update t_xfer_state
	    set from_state = 1, time_available = :now
            where from_node = :node
	      and from_pfn is not null
	      and from_state = 0
              and to_state < 2},
	    ":now" => &mytimeofday(), ":node" => $$self{ID_MYNODE});

	$dbh->commit();
    };
    do { chomp ($@); &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Check children are still running and then wait
    $self->nap ($$self{WAITTIME});
}
