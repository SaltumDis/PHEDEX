#!/usr/bin/env python

import kenosis, sys, os, os.path, re
from optparse import OptionParser
from UtilsAgent import *

class LogAccess:
    def __init__ (self, dir):
        self.logdir = dir
    
    def list (self):
        # Return list of log files in self.logdir
        return filter(lambda x: os.path.isfile("%s/%s" % (self.logdir, x)),
        	      os.listdir (self.logdir))
    
    def tail (self, file, lines = None):
        # Return LINES of output from the end of FILE.  LINES may be None,
        # in which case all file contents is returned.
        if lines != None and not str(lines).isdigit(): return None
        if not re.compile("^[-A-Za-z0-9._]+$").match (file, 0): return None
        path = "%s/%s" % (self.logdir, file)
        if not os.path.isfile (path) or not os.access (path, os.R_OK):
            return None
        if lines == None:
            return os.popen ("cat %s" % path).readlines()
        else:
            return os.popen ("tail -%d %s" % (lines, path)).readlines()

class PeerLogAccess (Agent):
    def __init__ (self, opts):
	# Initialise base class
	Agent.__init__ (self, opts)

        # Boot up this node
        self.node = kenosis.Node (bootstrapNetAddress = getattr (opts, 'bootaddr', None))
        self.node.registerNamedHandler ("LogAccess", LogAccess (getattr (opts, 'logdir')))

    def stop (self):
        self.node.stopEvent_.set ()

if __name__ == "__main__":
    cmds = OptionParser(usage="usage: %prog --state STATE --dir DIR [--boot BOOT] [--wait TIME]")
    # cmds.add_option ("--help", action="help")
    cmds.add_option ("--state", type="string", dest="statedir", help="Agent state directory")
    cmds.add_option ("--wait", type="int", dest="waittime", help="Time to nap between operations")
    cmds.add_option ("--dir", type="string", dest="logdir", help="Log directory to serve logs from")
    cmds.add_option ("--boot", type="string", dest="bootaddr", help="Boot from HOST:PORT")
    opts, args = cmds.parse_args ()
    if len (args):
	cmds.error ("extra command line parameters")
    if not getattr (opts, 'logdir', None):
	cmds.error ("--dir option requires a value")
    if not getattr (opts, 'statedir', None):
	cmds.error ("--state option requires a value")

    agent = PeerLogAccess (opts)
    agent.process ()
