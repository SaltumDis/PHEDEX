#!/usr/bin/env python

import kenosis, sys, os, os.path, getopt, re
from commands import getoutput
from time import sleep

def warn(arg):
    print >> sys.stderr, "warning: %s" % arg

def myoutput(file, contents):
    try:
        backup = "%s.%d.tmp" % (file, os.getpid())
        f = os.open (backup, "w")
        f.write (content)
        f.close ()
        os.rename (backup, file)
        return True
    except:
        try: os.remove (backup);
        except: None
        return False

class LogAccess:
    def __init__ (self, dir):
        self.logdir = dir
    
    def list (self):
        # Return list of log files in self.logdir
        return filter(lambda x: os.path.isfile("%s/%s" % (self.logdir, x)),
        	      os.listdir (self.logdir))
    
    def tail (self, file, lines = None):
        # Return LINES of output from the end of FILE.  LINES may be None,
        # in which case all file contents is returned.
        if lines != None and not str(lines).isdigit(): return None
        if not re.compile("^[-A-Za-z0-9._]+$").match (file, 0): return None
        path = "%s/%s" % (self.logdir, file)
        if not os.path.isfile (path) or not os.access (path, os.R_OK):
            return None
        if lines == None:
            return os.popen ("cat %s" % path).readlines()
        else:
            return os.popen ("tail -%d %s" % (lines, path)).readlines()

def usage():
    print >> sys.stderr, 'PeerLogAccess -s STATEDIR -d LOGDIR [-b BOOT-HOST:PORT]'
    print >> sys.stderr, '  -s Agent state directory STATEDIR'
    print >> sys.stderr, '  -d Serve log files from LOGDIR'
    print >> sys.stderr, '  -b Boot from node at BOOT-HOST:PORT'

if __name__ == "__main__":
    statedir = None
    logdir = None
    bootaddr = None

    # Process command line options
    try:
	optlist, rest = getopt.getopt (sys.argv[1:],'s:d:b:')
    except getopt.GetoptError:
        usage()
        sys.exit(1)
    for opt, arg in optlist:
        if opt == '-s':
            statedir = arg
        elif opt == '-d':
            logdir = arg
        elif opt == '-b':
            bootaddr = arg
        else:
            print >> sys.stderr, "unrecognised argument %s" % opt
            usage()
            sys.exit(1)
	
    # Check we got all we need
    if (logdir == None or statedir == None):
	usage()
	sys.exit(1)

    # FIXME: Do all the standard agent stuff: stop, pid, etc.
    if not os.path.isdir (statedir):
        print >> sys.stderr, "%s: non-existent state directory" % statedir
        sys.exit (1)
    
    # FIXME: warn about overriding these as in perl
    pidfile = "%s/pid" % statedir;
    stopfile = "%s/stop" % statedir;
    if os.path.isfile (stopfile):
        warn ("removing (old?) stop flag");
        os.remove (stopfile)
    if os.path.isfile (pidfile):
        oldpid = os.open (pidfile).read().strip ("\n")
        warn ("removing (old?) pidfile (%s)" % oldpid)
        os.remove (pidfile)

    myoutput(pidfile, os.getpid())
    myoutput(stopfile, "")

    # Boot up this node
    node = kenosis.Node (bootstrapNetAddress = bootaddr)
    node.registerNamedHandler ("LogAccess", LogAccess (logdir))

    # FIXME: Keep running until stopped, pumping rpc messages
    while not os.path.isfile (stopfile):
        sleep (1)
        
    node.stopEvent_.set ()

