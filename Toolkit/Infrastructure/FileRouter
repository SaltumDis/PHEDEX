#!/usr/bin/perl

## Assign the next hops to files that have arrived to a node.
##
## This agent scans the transfer state table in TMDB.  When it finds
## files that have arrived to a node (dest_state = 3), it determines
## the next hops for the file considering the final destinations, all
## current replicas and the distances in the routing table.  Given
## all the candidate source replicas and the paths to the destination,
## the best next hop alternative is assigned (if one doesn't already
## exist).
##
## This agent manages the routing for all files regardless of nodes.

BEGIN { use strict; use warnings; }
my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
my %args = (DBITYPE => "Oracle");
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{MYNODE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -node TMDB-NODE -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new FileRouter (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileRouter; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
		  MYNODE => undef);		# My TMDB node
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work
# assignments from the database here and pass them to slaves.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;

    # Always mark all files ready to go immediately.
    eval
    {
	$dbh = &connectToDatabase ($self);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

        my $stmt;

	# Warn about files that cannot be routed
	$stmt = $dbh->prepare(qq{
		select guid, dest_final from (
		  select d.guid guid, d.destination_node dest_final, count(r.gateway) paths
		  from t_destinations d
		  left join t_replica_state rs on rs.guid = d.guid
		  left join t_routing r on r.from_node = rs.node and r.to_node = d.destination_node
		  group by d.guid, d.destination_node)
		where paths = 0});
	$stmt->execute();
	while (my $row = $stmt->fetchrow_arrayref())
	{
	    my ($guid, $dest) = @$row;
	    next if $self->{WARNINGS}{NO_ROUTE}{$guid}{$dest};
	    $self->{WARNINGS}{NO_ROUTE}{$guid}{$dest} = 1;
	    &warning("$guid: no path to destination $dest");
	}

	# For each destination of each file, for each replica find the
	# transfer that got the file there and possible next hop to the
	# final destination.  Filter only the combinations that require
	# a new hop assignment.  The query may return more than one row
	# for a guid/destination pair: while there can be only possible
	# previous and next hop for guid/destination/replica, there may
	# be more than one replica we need to deal with.  This is even
	# after filtering only the rows that are completed transfers
	# and/or need a next hop assignment.  We sort the query result
	# by dest_state, which causes null states to be sorted after
	# non-null ones, and simply ignore what we've already handled.
	my %seen = ();
	$stmt = $dbh->prepare(qq{
		select d.guid, d.destination_node, rs.node,
		       r.from_node, ts.dest_state,
		       r1.gateway, ts2.dest_state
		from t_destinations d
		left join t_replica_state rs
		  on rs.guid = d.guid
		left join t_routing r
		  on r.gateway = rs.node
		 and r.to_node = d.destination_node
		left join t_transfer_state ts
		  on ts.guid = d.guid
		 and ts.src_node = r.from_node
		 and ts.dest_node = rs.node
		left join t_routing r1
		  on r1.from_node = rs.node
		 and r1.to_node = d.destination_node
		left join t_transfer_state ts2
		  on ts2.guid = d.guid
		 and ts2.src_node = rs.node
		 and ts2.dest_node = r1.gateway
		where (ts.dest_state = 3 or (r1.gateway is not null and ts2.dest_state is null))
	        order by d.guid, d.destination_node, ts.dest_state, ts2.dest_state, r.hops, r1.hops});
	$stmt->execute();
	while (my $row = $stmt->fetchrow_arrayref())
	{
	    my ($guid, $dest, $replica, $prev, $pstate, $next, $nstate) = @$row;
	    delete $self->{WARNINGS}{NO_ROUTE}{$guid}{$dest};

	    # If we haven't seen this completed transfer, mark it complete
	    if (defined $pstate && ! $seen{"PREV:$guid:$prev:$replica"})
	    {
		my $now = time();
		$seen{"PREV:$guid:$replica:$prev"} = 1;
		$dbh->do(qq{
			update t_transfer_state
			set dest_state = 4, dest_time_stamp = $now
			where guid = '$guid' and src_node = '$prev' and dest_node = '$replica'});
		&logmsg ("final $now $guid $dest") if $replica eq $dest;
	    }

	    # If we haven't seen this destination yet, apply next hop if any
	    if (! $seen{"DEST:$guid:$dest"})
	    {
		$seen{"DEST:$guid:$dest"} = 1;
		if (defined $next && ! defined $nstate && ! $seen{"NEXT:$guid:$replica:$next"})
		{
		    my $now = time ();
		    $seen{"NEXT:$guid:$replica:$next"} = 1;
		    $dbh->do(qq{
			    insert into t_transfer_state
			    values ('$guid', '$replica', '$next', 0, 0 ,$now, $now)});
		    &logmsg ("next $now $guid $dest $replica $next");
	        }
	    }
	}

	$dbh->commit ();
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
