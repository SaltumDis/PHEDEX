#!/usr/bin/perl

## Assign the next hops to files that have arrived to a node.
##
## This agent scans the transfer state table in TMDB.  When it finds
## files that have arrived to a node (to_state = 3), it determines
## the next hops for the file considering the final destinations, all
## current replicas and the distances in the routing table.  Given
## all the candidate source replicas and the paths to the destination,
## the best next hop alternative is assigned (if one doesn't already
## exist).
##
## This agent manages the routing for all files regardless of nodes.

BEGIN { use strict; use warnings; }
my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
unshift(@INC, $home);

######################################################################
my %args = (DBITYPE => "Oracle");
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{MYNODE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -node TMDB-NODE -state IN-DROP-BOX [-wait SECS-TO-WAIT]\n";
    exit (1);
}

my $agent = new FileRouter (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileRouter; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
		  MYNODE => undef,		# My TMDB node
	  	  AGENTID => "Router");		# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Pick up work
# assignments from the database here and pass them to slaves.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;

    # Always mark all files ready to go immediately.
    eval
    {
	$dbh = &connectToDatabase ($self);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

        my $stmt;

	# Warn about files that cannot be routed
	$stmt = $dbh->prepare(qq{
		select guid, dest_final from (
		  select d.guid guid, d.destination_node dest_final, count(r.gateway) paths
		  from t_destinations d
		  left join t_replica_state rs
		    on rs.guid = d.guid
		  left join t_routing r
		    on r.from_node = rs.node and r.to_node = d.destination_node
		  group by d.guid, d.destination_node)
		where paths = 0});
	$stmt->execute();
	while (my $row = $stmt->fetchrow_arrayref())
	{
	    my ($guid, $dest) = @$row;
	    next if $self->{WARNINGS}{NO_ROUTE}{$guid}{$dest};
	    $self->{WARNINGS}{NO_ROUTE}{$guid}{$dest} = 1;
	    &warn("@{[time()]} unroutable $guid $dest");
	}

	# For each destination of each file, select nearest replica.
	# If it isn't in transfer already, issue a new request.  But
	# as multiple destinations can go through a single gateway,
	# prune out duplicates to a single transfer request.
	my $now = time();
	my $rows = $dbh->do(qq{
	    insert into t_transfer_state (
		select d.guid, rs.node, r.gateway, 0, 0, $now, $now, $now
		from t_destinations d
		left join t_replica_state rs
		  on rs.guid = d.guid
		left join t_routing r
		  on r.from_node = rs.node
		 and r.to_node = d.destination_node
		left join t_transfer_state ts
		  on ts.guid = d.guid
		 and ts.from_node = rs.node
		 and ts.to_node = r.gateway
		where r.gateway is not null
		  and ts.to_state is null
		  and r.hops = (select min (rr.hops)
	  			from t_routing rr, t_replica_state trs
	  			where guid = d.guid
				  and to_node = d.destination_node
				  and rr.from_node = trs.node)
		group by d.guid, rs.node, r.gateway)});
	$dbh->commit ();

	&logmsg ("$rows transfer routings added") if $rows > 0;
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    $dbh->disconnect() if $dbh;
    undef $dbh;

    # Check children are still running and then wait
    $self->maybeStop ();
    sleep ($self->{WAITTIME});
}
