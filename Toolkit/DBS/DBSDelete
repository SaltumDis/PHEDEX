#!/usr/bin/env python
"""
_DBSDelete_
                                                                                
Command line tool to delete a block.

"""
from DBSAPI.dbsApi import DbsApi
from DBSAPI.dbsOptions import DbsOptionParser

import string,sys,os

def delete(url,lblock):
  args = {'url' : url}
  dbsapi = DbsApi(args)

  if (lblock != None):
    blockList=lblock.split(',')
    for block in blockList:
      block_objects = dbsapi.listBlocks(block_name=block)
      dbsblock = 0
      if len(block_objects):
        dbsblock = block_objects.pop(0)
      if dbsblock:
        block = dbsblock['Name']
        path  = dbsblock['Path']
        
        print "throwing away block=%s" % block
        dbsapi.deleteBlock(path, block)

        summary = dbsapi.listDatasetSummary(path)
        nblocks = summary['number_of_blocks']
        if (nblocks == 0):
          print "throwing away empty dataset=%s" % path
          dbsapi.deleteProcDS(path)
        
        print "deleting block=%s" % block
        dbsapi.deleteRecycleBin(path, block)
      else:
        raise Exception("block='%s' not found in dbs='%s'" % (block, url))

  return

def main ():
  from optparse import OptionParser

  usage="""\npython DBSDelete [options]"""
  parser = OptionParser(usage=usage)

  parser.add_option('-u', '--url', dest='url', default='https://cmsdbsprod.cern.ch:8443/cms_dbs_prod_global_writer/servlet/DBSServlet', help='DBS URL')
  parser.add_option('-b', '--block', dest='block', default=None, help='Block to be deleted')

  (opts, args) = parser.parse_args()

  if opts.url == None:
    print "--url option not provided."
    print "Using %s"%opts.url

  if opts.block == None:
    print "\n --block option has to be provided"
    print usage
    sys.exit(1)

  try:
    if opts.block != None:
      delete(opts.url, opts.block)
  except Exception, ex:
    print "Caught exception: %s" % str(ex)
    sys.exit(1)

  sys.exit(0)

if __name__ == "__main__":
  main()
