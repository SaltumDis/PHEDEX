#!/usr/bin/env python
"""
_DBSMigrateDataset_

Command line tool to migrate a dataset/block from a DBSa to a DBSb.

"""
from DBSAPI.dbsApi import DbsApi
from DBSAPI.dbsException import *
from DBSAPI.dbsApiException import *

import sys,os
                  
def MigrateDataset (srcDBS,destDBS,dataset,block,no_parents):
  """
  Migrate blocks of a dataset to a destination DBS.
  """
  #//
  #// Global DBS API
  #//
  args = {'url' : destDBS}
  dbsapi = DbsApi(args)

  try:
  # check if block exists
    if dbsapi.listBlocks(block_name=block):
      print "+ Block %s exists already in target DBS" %block
      # if block exists, check if files are invalid 
#      for f in dbsapi.listFiles(blockName=block):
#       if f['Status']=='invalid':
#        print f['LogicalFileName']
#        print f['Status']
      
      print "++ Migration skipped"

    else: 
      print "++ Migrating dataset %s"%dataset
      print "+ from DBS: \t\t%s "%srcDBS
      print "+ to DBS: \t\t%s "%destDBS
      print "+ no parentage: \t%s "%no_parents
    
      dbsapi.migrateDatasetContents(srcDBS,destDBS,dataset,block,noParentsReadOnly=no_parents)
#      print "migrating %s to %s" %(block,destDBS)

      print "++ Block %s from dataset %s was successfuly migrated"%(block,dataset)

  except DbsApiException, ex:
    print "Caught API Exception %s: %s "  % (ex.getClassName(), ex.getErrorMessage() )
    print "Failed to migrate %s" %block
    if ex.getErrorCode() not in (None, ""):
      print "DBS Exception Error Code: ", ex.getErrorCode()
    sys.exit(1)

  return

def cleanSEs (url,block):
  """
  Remove all SE name migrated with the block
  """
  args = {'url' : url}
  dbsapi = DbsApi(args)

  print "+ Cleaning locations for block %s" %block
  try:
    for e in dbsapi.listBlocks(block_name=block):
      for se in e['StorageElementList']:
        dbsapi.deleteReplicaFromBlock(block,se['Name'])
#        print "deleting %s for %s" %(se['Name'],block)

  except DbsApiException, ex:
    print "Caught API Exception %s: %s "  % (ex.getClassName(), ex.getErrorMessage() )
    print "Failed to clean SEs for %s" %block
    if ex.getErrorCode() not in (None, ""):
      print "DBS Exception Error Code: ", ex.getErrorCode()
    sys.exit(1)

  print "++ Locations cleaned for block %s" %block

  return

def addSE (url,block,se):
  """
  Add a specific SE name to the migrated block
  """

  args = {'url' : url}
  dbsapi = DbsApi(args)

  print "+ Adding location %s to block %s" %(se,block)

  try:
    dbsapi.addReplicaToBlock(block,se)
#    print "adding %s to %s" %(se,block)


  except DbsApiException, ex:
    print "Caught API Exception %s: %s "  % (ex.getClassName(), ex.getErrorMessage() )
    print "Failed to add %s to  %s" %(se,block)
    if ex.getErrorCode() not in (None, ""):
      print "DBS Exception Error Code: ", ex.getErrorCode()
    sys.exit(1)

  print "++ Added location %s to block %s" % (se,block)

  return

def main ():
  from optparse import OptionParser
                                                     
  usage="\n Usage: python %prog <options>" 

  parser = OptionParser(usage=usage)

  parser.add_option('-s', '--srcDBS', dest='srcDBS', metavar='URL',
                     default='http://cmsdbsprod.cern.ch/cms_dbs_prod_global/servlet/DBSServlet',
                     help='Source DBS URL')
  parser.add_option('-t', '--destDBS', dest='destDBS', metavar='URL', help='Target DBS URL')
  parser.add_option('-d', '--dataset', dest='dataset', metavar='DATASET', help='Dataset to be migrated')
  parser.add_option('-b', '--block', dest='block', metavar='BLOCK', help='Block to be migrated')
  parser.add_option('-p', '--parents', action='store_false',
                    default=True,dest='no_parents', help='Migrate dataset with parentage')
  parser.add_option('-a', '--add_se', dest='se', default=None, metavar='SE', help='Add SE to block in the target DBS')
  parser.add_option('-c', '--clean_se', action='store_true',
                    default=False,dest='clean_se', help='Clean all SEs migrated')

  (opts, args) = parser.parse_args()

  if not opts.destDBS or not opts.dataset:
    raise Exception("Either --destDBS or --dataset is missing")

  # do the job
  MigrateDataset(opts.srcDBS,opts.destDBS,opts.dataset,opts.block,opts.no_parents)

  if (opts.clean_se == True):
    cleanSEs(opts.destDBS,opts.block)

  if (opts.se != None):
    addSE(opts.destDBS,opts.block,opts.se)
    
  sys.exit(0)

if __name__ == "__main__":
  main()
