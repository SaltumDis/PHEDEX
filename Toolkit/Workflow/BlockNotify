#! /usr/bin/env perl

#-----------------------------------------------------------------------------------------------
# agent name: site monitoring agent
# purpose: monitor completeness of dataset/owner collections and triggers
#          site specific actions like publication
#-----------------------------------------------------------------------------------------------

BEGIN
{
    use warnings; use strict; use Getopt::Long; use Data::Dumper;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}


#---------------------------------------------
#     Argument parsing
#---------------------------------------------
my %args = (DBITYPE => 'Oracle', WAITTIME => 3600, NEXTDIR => []);

&GetOptions ("state=s"		=> \$args{DROPDIR},
	     "out=s@"           => $args{NEXTDIR},
	     "node=s"		=> \$args{MYNODE},
	     "db=s"		=> \$args{DBNAME},
	     "dbitype=s"	=> \$args{DBITYPE},
	     "dbuser=s"		=> \$args{DBUSER},
	     "dbpass=s"		=> \$args{DBPASS},
	     "dbitype=s"        => \$args{DBITYPE},
	     "wait=f"		=> \$args{WAITTIME});

if ($args{HELPME} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{MYNODE} || !$args{DROPDIR}
    || !@{$args{NEXTDIR}})
{
    print STDERR "usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
                 "       -state IN-DROP-BOX -node NODE-NAME\n",
                 "       -out NEXT-DROP [-wait SECONDS]\n";

    exit 1;
}


my $agent = new BlockNotify (%args);
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop() };
$SIG{QUIT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop() };
$SIG{TERM} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop() };
$agent->process();

################################################
package BlockNotify; use strict; use warnings; use base 'UtilsAgent';
use File::Path;
use Data::Dumper;
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
	  	  MYNODE => undef,		# My TMDB node name
	  	  AGENTID => "BlockNotify");    # Identity for activity logs

    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}


# Get list of all entirely transferred blocks.  This is always
# everything; we keep no record of what has already been notified.
# The downstream local agent must handle duplicates gracefully.
sub completeBlocks
{
    my ($self, $dbh) = @_;
    my $result = {};

    my $complete = &dbexec ($dbh, qq{
	select b.dataset, b.owner, b.files
	from t_block_replica br
	left join t_block b
	  on b.name = br.name
	where br.node = :node
	  and br.files = b.files
	  and br.timestamp < :now - 30},
	":node" => $self->{MYNODE},
	":now" => &mytimeofday());
 

    # prepare the drop and fill in all informations required
    while (my ($dataset, $owner, $files) = $complete->fetchrow_array())
    {
	$result->{$dataset}{$owner} = {
	    DATASET => $dataset,
	    OWNER => $owner,
	    FILES => $files
	    };
    }

    return $result;
}

# Pick up ready blocks from database and send info to downstream agents.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;

    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";

	# Get owner/dataset for all completely transferred blocks,
	# Also get other information necessary for e.g. publishing
	# and other local bookkeeping such as consistency checks.
	# In particular, get the number of files, and pass down
	# other transferred owners for the same dataset, so the
	# site can tell whether they have Hits *and* Digis.
	my $completed = $self->completeBlocks ($dbh);
        foreach my $dataset (sort keys %$completed)
        {
	    foreach my $owner (sort keys %{$completed->{$dataset}})
	    {
		# Dump out a drop box packet for each block in our own
		# outbox, for agent core to copy downstream.
		my $block = $completed->{$dataset}{$owner};
		my $blockid = "$block->{OWNER}.$block->{DATASET}";
		my $drop = "$self->{DROPDIR}/outbox/$blockid";
		do { &note ("$blockid already pending, skipping"); next; } if -d $drop;
		do { &alert ("failed to create drop for $blockid"); &rmtree ($drop); last; }
    	            if (! &mkpath ($drop)
        		|| ! &output ("$drop/packet", Dumper ($block))
        		|| ! &touch ("$drop/go.pending"));

		# OK, kick it go
		&warn ("failed to mark $blockid ready to go")
		    if ! &mv ("$drop/go.pending", "$drop/go");
	    }
        }
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Explicitly pump drops we just created, otherwise they will stay
    # in outbox until next time we wake up (usually an hour later!).
    foreach my $drop ($self->readOutbox())
    {
        $self->relayDrop ($drop);
    }

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
