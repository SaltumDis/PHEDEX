#!/usr/bin/env perl

## Allocate files to destinations based on subscriptions.
##
## Compare file replica metadata and destination subscriptions with
## current set of destinations assigned to files, and automatically
## create new assignments when necessary.  All the information is
## stored in the TMDB.
##
## The whole operation is done in a single SQL statement that compares
## files and subscriptions with existing destination assignments and
## replicas.  if there is a data subscription but no existing replica
## (for the site originating the data) nor a destination assignment, a
## new assignment is created.  File routing is handled elsewhere, this
## agent does not worry about if or how the file can make it to the
## requested destination, or which replica should be transferred.

BEGIN {
  use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args = (DBITYPE => "Oracle", WAITTIME => 600);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WAITTIME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-state' && scalar @ARGV > 1)
    { shift (@ARGV); $master = 1; $args{DROPDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1)
    { shift (@ARGV); $args{MYNODE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-once')
    { shift (@ARGV); $args{ONCE} = 1; }
    else
    { last; }
}

if (scalar @ARGV || !$args{DROPDIR} || !$args{DBNAME} || !$args{DBUSER}
    || !$args{DBPASS} || !$args{DBITYPE} || !$args{MYNODE})
{
    print STDERR
	"usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n",
	"    -node TMDB-NODE -state IN-DROP-BOX [-wait SECS-TO-WAIT] [-once]\n";
    exit (1);
}

my $agent = new FileAllocator (%args);
# Recapture interrupt signal, oracle swallows it.
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop (); };
$agent->process ();

######################################################################
# Routines for this agent.
package FileAllocator; use strict; use warnings; use base 'UtilsAgent';
use UtilsCommand;
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef,		# Database user password
		  MYNODE => undef,		# My TMDB node
		  ONCE => 0,			# Quit after one run
	  	  AGENTID => "Allocator");	# Identity for activity logs
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Called by agent main routine before sleeping.  Do some work.
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;

    # Always mark all files ready to go immediately.
    eval
    {
	$dbh = &connectToDatabase ($self);
	die "failed to connect" if ! $dbh;

        # FIXME: Pick up and process messages to me

	# Create new destinations for files not yet assigned.
	# Pick file/destination pairs where the file's dataset
	# matches a stream subscription, the destination isn't
	# yet entered into t_destinations nor is there a replica
	# already at that site (probably the data originator).
	my ($stmt, $rows) = &dbexec($dbh, qq{
	   insert into t_destination
	   (timestamp, guid, node)
	   (select :now, f.guid, s.destination
	    from t_file f
	    inner join t_block b
	      on b.name = f.inblock
	    inner join t_subscription s
	      on s.owner = b.owner and s.dataset = b.dataset
	    left join t_destination d
	      on d.guid = f.guid and d.node = s.destination
	    left join t_replica_state rs
	      on rs.guid = f.guid and rs.node = s.destination
	    where d.guid is null and rs.guid is null)},
	    ":now" => &mytimeofday());

	&logmsg ("$rows new file destinations allocated") if $rows > 0;
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh; } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a nap.
    &touch ($self->{STOPFLAG}) if $self->{ONCE};
    $self->nap ($self->{WAITTIME});
}
