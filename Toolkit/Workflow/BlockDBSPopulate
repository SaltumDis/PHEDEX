#! /usr/bin/env perl

##H Trigger DBS migration once blocks were completely transferred.
##H
##H The BlockMonitor agent periodically updates the transfer progress
##H of various blocks.  Once a block has been transferred completely,
##H this agent triggers an update of the target DBS.
##H
##H Usage:
##H   BlockDBSPopulate -state DIRECTORY -db FILE[:SECTION]
##H
##H -state         agent state directory
##H -db            database connection configuration parameter file
##H -log           where to redirect logging information
##H -target_dbs    which DBS to migrate to
##H -migr_command  command to migrate a block in DBS
##H -del_command   command to delete a block in DBS
##H -timeout       timeout for commands in seconds, default is 600
##H -dummy         do not actually execute commands.  for debugging.

######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::BlockDBSPopulate::Agent;

&GetOptions ("state=s"        => \$args{DROPDIR},
             "db=s"           => \$args{DBCONFIG},
	     "nodes=s"	      => \$args{NODES},
             "label=s"        => \$args{LABEL},
	     "log=s"          => \$args{LOGFILE},
	     "target_dbs=s"   => \$args{TARGET_DBS},
             "migr_command=s" => sub { push(@{$args{MIGR_COMMAND}}, split(/,/, $_[1])) },
             "del_command=s"  => sub { push(@{$args{DEL_COMMAND}}, split(/,/, $_[1])) },
	     "timeout=i"      => \$args{TIMEOUT},
	     "dummy"	      => \$args{DUMMY},	
	     "help|h"      => sub { &usage() });

my $agent = PHEDEX::BlockDBSPopulate::Agent->new(%args,@ARGV);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;
