#! /usr/bin/env perl

##H Deactivate blocks when file-level information is not needed.
##H
##H Files belong to blocks; when the file replicas are no longer needed
##H they are collapsed to block replicas, which remember entire sets of
##H files.  This agent monitors completeness of blocks and triggers
##H removal of the file-level information in TMDB.
##H
##H Usage:
##H   BlockDeactivate
##H      -state DIRECTORY -node NAME -db FILE[:SECTION] [-wait SECS]
##H      [-holdoff SECS]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans
##H -holdoff   time lag before deactivation (default: 86400 = day)

BEGIN {
  use warnings; use strict;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
use Getopt::Long;
my %args = (WAITTIME => 60);
&GetOptions ("state=s"		=> \$args{DROPDIR},
	     "node=s"           => \$args{MYNODE},
	     "db=s"		=> \$args{DBCONFIG},
	     "wait=f"		=> \$args{WAITTIME},
	     "help|h"		=> sub { &usage() },
	     "holdoff=f"        => \$args{HOLDOFF});

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = new BlockDeactivate (%args);
$SIG{INT} = sub { system "touch $agent->{STOPFLAG}"; $agent->maybeStop() };
$agent->process();

################################################
package BlockDeactivate; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  AGENTID => "BlockDeactivate", # Identity for activity logs
		  HOLDOFF => 86400);            # hold-off time for pruning (24h default)

    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}


# Pick up work from the database and start site specific scripts if necessary
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;
    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";
	
	# Deactivate complete blocks.  Get all blocks whose all replicas
	# are complete and active.  (Block replicas that are already
	# inactive are not interesting, nor any blocks whose destination
	# count does not match files at the node (FIXME: do we want to
	# constrain this?), or if there are still files in transfer.)
	# Do not act on blocks until specified time limit has passed.
	my %blocks = ();
	my $qblocks = &dbexec ($dbh, qq{
	    select b.name
	    from t_block b
	    where b.isopen = 0
	      and b.timestamp < :limit
	      and (b.files, b.bytes, 0, 0, 1, 1) = all
      	          (select br.node_files, br.node_bytes,
		  	  sign(br.node_files - br.dest_files),
			  sign(br.xfer_files),
			  sign(:limit - br.last_update),
			  br.isactive
		   from t_block_replica br
		   where br.name = b.name)},
	    ":limit" => &mytimeofday () - $self->{HOLDOFF});
        while (my ($name) = $qblocks->fetchrow())
	{
	    # Deactivate
	    my ($dr, $nr) = &dbexec ($dbh, qq{
		delete from t_replica_state where guid in
		(select guid from t_file where inblock = :block)},
		":block" => $name);
	    my ($db, $nb) = &dbexec ($dbh, qq{
		update t_block_replica set isactive = 0 where name = :block},
		":block" => $name);
	    $dbh->commit ();

	    &logmsg ("deactivated $name, $nr replicas removed, $nb block replicas");
        }
    };
    do { &alert ("database error: $@"); $dbh->rollback() if $dbh } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}

sub removeInTMDB {
    my ($self, $dbh, $collection) = @_;
    my ($dataset, $owner) = split(':',$collection);

# we need the guids for the files belonging to the selected dataset-owner pairs
    my @guids = &getGUIDs($dbh, $dataset, $owner);
    
     foreach my $guid (@guids) {
# let's remove all t_transfer and t_replica info for the chosen guids
	&dbexec ($dbh, qq{
		delete from t_transfer_state where
	        guid = :guid},
	        ":guid"=>$guid);
	    
	&dbexec ($dbh, qq{
		delete from t_replica_state where
	        guid = :guid},
	        ":guid"=>$guid);
	$dbh->commit();
    }
	
}

sub getGUIDs {
    my ($dbh, $dataset, $owner) = @_;
    my @guids = ();

    # fetch GUIDs from TMDB for given dataset and owner
    my $guids_h = &dbexec ($dbh, qq{
	select f.guid from t_dsb_fileid f, t_dsb_dataset d
	where  d.dataset=:dataset and d.owner=:owner and d.id=f.id},
	":dataset"=>$dataset, ":owner"=>$owner);
    
    while (my ($guid) = $guids_h->fetchrow() ) {
	push (@guids, $guid);
    }
    return @guids;
}
