#! /usr/bin/env perl

##H Activate blocks when file-level information is needed again.
##H
##H Files belong to blocks; when the file replicas are no longer needed
##H they are collapsed to block replicas, which remember entire sets of
##H files.  When the files in the blocks are needed again, for instance
##H because subscriptions need to be activated again, this agent expands
##H the block replicas back into file replicas.
##H
##H Usage:
##H   BlockActivate
##H      -state DIRECTORY -node NAME -db FILE[:SECTION] [-wait SECS]
##H
##H -state     agent state directory
##H -node      the node where this agent runs
##H -db        database connection configuration parameter file
##H -wait      time to wait in seconds between work scans

BEGIN {
  use warnings; use strict;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
use UtilsHelp;
use Getopt::Long;
my %args = (WAITTIME => 60);
&GetOptions ("state=s"		=> \$args{DROPDIR},
	     "node=s"           => \$args{MYNODE},
	     "db=s"	        => \$args{DBCONFIG},
	     "wait=f"		=> \$args{WAITTIME},
	     "help|h"		=> sub { &usage() });

if (@ARGV || !$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

(new BlockActivate (%args))->process();

################################################
package BlockActivate; use strict; use warnings; use base 'UtilsAgent';
use UtilsLogging;
use UtilsTiming;
use UtilsDB;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,		# Database configuration file
	  	  AGENTID => "BlockActivate");  # Identity for activity logs

    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}


# Pick up work from the database and start site specific scripts if necessary
sub idle
{
    my ($self, @pending) = @_;
    my $dbh = undef;

    eval
    {
	$dbh = &connectToDatabase ($self) or die "failed to connect";

	# Reactivate blocks with incomplete destinations.
	my $now = &mytimeofday ();
        my $stmt = &dbexec ($dbh, qq{
	    select b.name, count(br.name), sum(br.isactive)
	    from t_block b
	    join (select distinct name from t_block_destination
	          where completed is null) bd
	      on bd.name = b.name
	    join t_block_replica br
	      on br.namme = b.name
	    group by b.name});
	while (my ($block, $nreplica, $nactive) = $stmt->fetchrow())
	{
	    # Ignore active blocks
	    if ($nactive)
	    {
		&alert ("$block has $nreplica replicas, $nactive active")
		    if $nreplica != $nactive;
	        next;
	    }

	    # Inactive and wanted, activate the file replicas
	    my ($stmt, $ret) = &dbexec ($dbh, qq{
		insert into t_replica_state
		(timestamp, guid, node, state, state_timestamp)
		(select :now, f.guid, br.node, 0, :now
		 from t_block_replica br
		 join t_file f on f.inblock = br.name
		 where br.name = :block},
	   	 ":block" => $block, ":now" => $now);

	    &dbexec ($dbh, qq{
		update t_block_replica
		set isactive = 1, last_update = :now
		where name = :block},
		":block" => $block, ":now" => $now);

	    &logmsg ("reactivated $ret replicas for $block");
	    $dbh->commit();
	}

    };
    do { &alert ("database error: $@");
	 eval { $dbh->rollback() } if $dbh } if $@;

    # Disconnect from the database
    &disconnectFromDatabase ($self, $dbh);

    # Have a little nap
    $self->nap ($self->{WAITTIME});
}
