#!/usr/bin/env perl
#
# spacemon - client side utility for CMS Space Monitoring
# 
# Intended functionality: 
#  * Parces and aggregates storage dump file 
#  * Creates a record object for space monitoring 
#  * Downloads TFC and CMS namespace conventions
#  * Maps directories to CMS data types 
#  * Uploads record to dmwmmon database, or saves to a local file
#    (default: print to stdout)
#
# See project page for details:
#            https://twiki.cern.ch/twiki/bin/view/CMSPublic/CompProjSpaceMon
#
############################################################################

use strict;
use warnings;
use Carp;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw /:config pass_through /;


use DMWMMON::SpaceMon::StorageDumpTXT;
use DMWMMON::SpaceMon::Aggregate;
use DMWMMON::SpaceMon::RecordIO;
use DMWMMON::SpaceMon::Core;

my $me = basename($0);
my $argname='STORAGE_DUMP';
my ($upload, $save, $debug, $verbose);
#$debug = $verbose = 0; # use these to override class defaults. 

my ($dump, $parser);

sub vPrint{
    my $text = shift;
    $verbose && print "$me: " . $text . "\n"; 
}

GetOptions("deps|d" => sub {print Dumper(%INC); exit;}); # print dependencies and exit

GetOptions ( 'help|h' => sub { &usage },
	     'version'=> sub { print "$me version: " . 
				   DMWMMON::SpaceMon::Core::version()."\n";
			       exit;},
	     'upload-record' => \$upload,
	     'save-record'   => \$save,
	     'debug!' => \$debug,  # enables --nodebug option
	     'verbose!' => \$verbose,
	     );

sub usage
{ 
    my $ver = DMWMMON::SpaceMon::Core::version();
    print <<EOF;
  $me - client side utility for CMS Space Monitoring. 
  Version:  $ver    
	
      Usage:    
	$me --help|-h
	$me --version
	$me [OPTIONS] $argname
EOF
;
    openDumpUsage($argname);
    exit 0;
}

my $dumpfile = shift;

if (defined $dumpfile ) {
    vPrint("processing $argname = $dumpfile");
}else{
    die "$argname is not specified. See $me --help for usage help";
}

use DMWMMON::SpaceMon::StorageDump;
vPrint "detected txt in file name: handle as  TXT format";
$dump = DMWMMON::SpaceMon::StorageDump->new(
					    DEBUG => $debug,
					    VERBOSE => $verbose,
					    DUMPFILE => $dumpfile,
					    );
$verbose && print $dump->dump();
$verbose && print "VALIDATING DUMP $dumpfile\n";
$dump->validate();

$parser =  DMWMMON::SpaceMon::Aggregate->new(
					     DEBUG => $debug,
					     VERBOSE => $verbose,
					     );

$verbose && print $parser->dump();

my $record = $parser->createRecord($dump);
$verbose && print $record->dump();

my $rio = DMWMMON::SpaceMon::RecordIO->new(
					   DEBUG => $debug,
					   VERBOSE => $verbose,
					   );
my $tmprecfile='/tmp/record.save-in-file-test';

$rio->writeToFile($record, $tmprecfile);

my $rec_from_file = $rio->readFromFile($tmprecfile);

$verbose && print $rec_from_file->dump();

$rio->upload($record) if ($rec_from_file->matches($record));

$rio->show($record);
