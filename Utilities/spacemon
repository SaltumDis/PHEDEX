#!/usr/bin/env perl
#
# spacemon - client side utility for CMS Space Monitoring
# 
# Intended functionality: 
#  * Parces and aggregates storage dump file 
#  * Creates a record object for space monitoring 
#  * Downloads TFC and CMS namespace conventions
#  * Maps directories to CMS data types 
#  * Uploads record to dmwmmon database, or saves to a local file for later upload
#    (default: print to stdout)
#
# See project page for details:
#            https://twiki.cern.ch/twiki/bin/view/CMSPublic/CompProjSpaceMon
#
############################################################################

use strict;
use warnings;
use Carp;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw /:config pass_through /;

use DMWMMON::SpaceMon::FormatFactory;
use DMWMMON::SpaceMon::StorageDump;
use DMWMMON::SpaceMon::Aggregate;
use DMWMMON::SpaceMon::RecordIO;
use DMWMMON::SpaceMon::Core;

my $me = basename($0);
my $argname='STORAGE_DUMP';
my ($upload, $save, $debug, $verbose, $level, $format);
#$debug = $verbose = 0; # use these to override class defaults. 

my ($input, $dumpfile, $parser, $record, $rio, $tmp_rec_file, $rec_from_file);

sub vPrint{
    my $text = shift;
    $verbose && print "$me: " . $text . "\n"; 
}

# Check useful for packaging. Print dependencies and exit:
GetOptions("deps|d" => sub {print Dumper(%INC); exit;}); 

GetOptions ( 'help|h' => sub { &usage },
	     'version'=> sub { print "$me version: " . 
				   DMWMMON::SpaceMon::Core::version()."\n";
			       exit;},
	     'upload-record' => \$upload,
	     'save-record'   => \$save,
	     'format:s'   => \$format,
	     'debug!' => \$debug,  # enables --nodebug option
	     'verbose!' => \$verbose,
	     'level:i' => \$level,
	     );

sub usage
{ 
    my $ver = DMWMMON::SpaceMon::Core::version();
    print <<EOF;
  $me - client side utility for CMS Space Monitoring. 
  Version:  $ver    
	
      Usage:    
	$me --help|-h
	$me --version
	$me [OPTIONS] $argname
EOF
;
    #openDumpUsage($argname);
    exit 0;
}

$input = shift;

$dumpfile = DMWMMON::SpaceMon::FormatFactory->instantiate(
							  DUMPFORMAT => $format,
							  DEBUG => $debug,
							  VERBOSE => $verbose,
							  DUMPFILE => $input,
							  );
print $dumpfile->dump();
#$dumpfile->formattingHelp();

$parser =  DMWMMON::SpaceMon::Aggregate->new(
					     DEBUG => $debug,
					     VERBOSE => $verbose,
					     LEVEL => $level,
					     );

print "Using parsing algorithm: \n", $parser->dump() if $debug;
$record = $parser->createRecord($dumpfile);
print "Dump record returned by a parser: ", $record->dump(), "\n" if $debug;

$rio = DMWMMON::SpaceMon::RecordIO->new(
					DEBUG => $debug,
					VERBOSE => $verbose,
					);

$tmp_rec_file='/tmp/record.save-in-file-test';

$rio->writeToFile($record, $tmp_rec_file);

$rec_from_file = $rio->readFromFile($tmp_rec_file);

$verbose && print $rec_from_file->dump();

$rio->upload($record) if ($rec_from_file->matches($record));

$rio->show($record);
