#!/usr/bin/env perl

##H Generate drops from dataset bookkeeing system.
##H
##H Usage:
##H   DSBDrop { -from RefDB | -from DBS -db FILE[:SECTION] }
##H           DIRECTORY [PATTERN...]
##H
##H -from RefDB   read information from RefDB
##H -from DBS     read information from DBS
##H -db           database connection configuration parameter file
##H DIRECTORY     create drops as subdirectories here, typically some inbox
##H PATTERN       block match constraint (owner/dataset), such as "*/bt03_*"

BEGIN { use strict; use warnings; $^W=1;
  my $me = $0; $me =~ s|.*/||;
  my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
  unshift(@INC, "$home/../Toolkit/Common"); }
use UtilsHelp;
use UtilsDBS;
use UtilsWriters;
use Text::Glob 'glob_to_regex';
use File::Path;

my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-from' && scalar @ARGV > 1) {
	shift (@ARGV); $args{FROM} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
        shift (@ARGV); $args{DBCONFIG} = shift(@ARGV);
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

$args{TODIR} = shift (@ARGV);
$Text::Glob::strict_wildcard_slash = 0;
$args{PATS} = [ map { &glob_to_regex($_) } @ARGV ];
if (!$args{TODIR} || !$args{FROM}
    || !($args{FROM} eq 'RefDB' || $args{FROM} eq 'DBS')
    || !($args{FROM} ne 'DBS' || $args{DBCONFIG}))
{
    die "Insufficient parameters, use -h for help.\n";
}

# Create appropriate dataset bookkeeping proxy
my $dbs = UtilsDBS->connect ($args{FROM}, $args{DBCONFIG});

# Get all existing datasets
my $datasets = $dbs->fetchPublishedData();

# Get all current datasets
foreach my $item (@$datasets)
{
    my $token = "$item->{OWNER}/$item->{DATASET}";
    next if (@ARGV && !grep($token =~ $_, @{$args{PATS}}));
    local $| = 1;

    print "processing $token ";

    # Generate drops
    $dbs->fetchDatasetInfo ($item);
    my $runs = $item->{RUNS};
    my @dsfiles = map { values %{$_->{FILES}} } @$runs;
    foreach my $run (@{$item->{RUNS}})
    {
	print ".";
	my $label = "$item->{DATASET}.$item->{OWNER}.$run->{ID}";
	my $path = "$args{TODIR}/$label";
	-d $path && &rmtree ($path);
	&mkpath ($path);

	my $frag = join("", map { $_->{XML} } values %{$run->{FILES}}) . "\n";
	$frag =~ s/>(.)/>\n$1/g;
	&outputCatalog ("$path/XMLCatFragment.$label.txt", $frag);

	my $cksums = join("", map { "$_->{CHECKSUM} $_->{SIZE} $_->{LFN}\n" } values %{$run->{FILES}});
	&output ("$path/Checksum.$label.txt", $cksums);

	my $locs = join(" ", map { $_ . "_MSS" } @{$item->{SITES}});
	&output ("$path/PhEDEx-Nodes.txt", "$locs\n");

	&output ("$path/go", "");
    }

    print "\n";
}

exit 0;
