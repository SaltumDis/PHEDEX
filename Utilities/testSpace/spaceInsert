#!/usr/bin/env perl
# Storage accounting tool
use strict;
use warnings;
use Time::Local;
use File::Basename;
use PHEDEX::CLI::UserAgent;
use Getopt::Long qw /:config pass_through require_order /;
use PHEDEX::Core::Loader;
use PHEDEX::Core::Util ( qw / str_hash / );
my ($loader,$module,$interface,$ns,$timeFromXml);
my ($verbose,$debug,$terse);
my (@pfn,$dump,$level,$result,$command,$rootdir,$totalsize);
my %dirsizes = ();
$totalsize = 0;

sub usage {
  print <<EOF;
  Usage:

  spaceInsert --dump DUMP --collName COLLNAME --time DATE --depth LEVEL INTERFACE {OPTIONS}
 
  DUMP  is a storage dump file, must exist
  LEVEL is level of depth of the directory structure we want to go
  COLLNAME is the name of collection where data is put
  DATE is the timestamp needed to put for each inserted entry, here temperioly both used for the number of entries and timestamp of each entries in performance test.
 
  INTERFACE is the protocol for accessing the SE (should know how to parse the DUMP)

  OPTIONS are:  --verbose, --debug, --help, and anything else that the
  interface might support. Use --help per interface to find out more.

  Known interface protocols in this installation are:
EOF
  #print " '",join("', '", grep (!/\//,sort keys %{$loader->Commands})),"'\n\n";
  exit 0;
}


sub dirlevel {
  my ($pathSimple,$temp1);
  my $path=shift;
  my $depth=shift;
  my @tmp=();
  if  ( not $path =~ /^\//){ die "ERROR: path does not start with a slash:  \"$path\"";}
  if  ( $path = ~ /^(\S+\/cms)(\/\S+)$/) {
      $temp1 = $1;
      $pathSimple = $2;
  }      
  $rootdir = $temp1;
  @tmp = split ('/', $pathSimple, $depth+2);
  pop @tmp;
  if (scalar(@tmp) > 2) {
     return join ("/", @tmp);
  }
  else {
     return $pathSimple;
  }
}

sub parse_chimera_dump {
  my ($file_dump) = @_;
  #my $totalfiles    = 0;
  my ($totaldirs,$totalfiles, $line,$time, $timeFromName);
  if ( $file_dump =~ m%.gz$% )
    { open DUMP, "cat $file_dump | gzip -d - |" or die "Could not open: $file_dump\n"; }
  else
    { open(DUMP, "cat $file_dump |") or die  "Could not open: $file_dump\n"; }
  while ($line = <DUMP>){
	my ($size,$file);
	#chomp;
	if ($line =~ m/^\S+\s\S+\"(\S+)\"\S+\>(\d+)\<\S+$/) {
	   $file = $1;
	   $size = $2;
	   $debug and print "$file:$size\n";
	   $totalfiles++;
	   my $dir = dirname $file;
	   $dirsizes{$dir}+=$size;
	   $totalsize+=$size;
        }
        if ($line =~ m/^<dump recorded=\"(\S+)\">$/) {
           $time = $1;
        }
  }
  close DUMP;
  $timeFromXml = convertToUnixTime($time);
  
  print "total files: ", $totalfiles,"\n";
  $totaldirs = keys %dirsizes;
  print "total dirs:  ", $totaldirs, "\n";
  print "total size:  ", $totalsize, "\n";
  print "timestamp:  ", $timeFromXml, "\n";
}

sub convertToUnixTime
{
  my ($time) = @_;
  my ($unixTime, $d, $t, @d, @t);
  if ($time =~ m/^(\S+)T(\S+)Z$/)
  {
    $d = $1;
    @d = split /-/, $1;
    $t = $2;
    @t = split /:/, $2;
  }
  $unixTime = timelocal($t[2], $t[1], $t[0], $d[2], $d[1], $d[0]);
  return $unixTime;
}

my ($response,$content,$method,$timeout,$pua,$target,$timestamp,$collName,%payload,%topsizes);
GetOptions(
           "dump=s"      => \$dump,
           "collName=s"      => \$collName,
           "time=i"      => \$timestamp,
           "level=s"      => \$level,
           "verbose|v+"     => \$verbose,
           "debug+"         => \$debug,
           "help|h"         => sub { &usage() }
          );
$method   = 'post';
$timeout  = 500;
$pua = PHEDEX::CLI::UserAgent->new
    (
      URL        => 'https://pheSpaceMon.cern.ch/phedex/datasvc',
      FORMAT    => 'perl',
      INSTANCE    => 'debug',
    );
$pua->timeout($timeout) if $timeout;
$pua->CALL('mongo');
$target = $pua->target;

if ( $dump ) {
  parse_chimera_dump($dump);
}

#foreach ( keys %dirsizes ) {
#  print "DIRSIZE: $_: $dirsizes{$_} \n";
#}


$payload{"collName"}=$collName;
$payload{"rootdir"}="/pnfs/gridka.de/cms";
$payload{"totalsize"}=$totalsize;
#$payload{"_id"}=$timeFromXml;


#   $payload{"_id"}=$time + 0.0;
   
foreach  (keys %dirsizes) {
  $topsizes{ dirlevel($_,$level)}+=$dirsizes{$_} + 0;
}

foreach ( keys %topsizes ) {
  #print "TOPSIZE: $_: $topsizes{$_} \n";
  #if ($_=~ m/\S+\.\S+/) {
  #   print "TOPSIZE: $_: $topsizes{$_} \n";
  #   next; 
  #}
  $payload{$_} = $topsizes{$_} + 0;
}

# test data service response time for times

my ($j, $now, $past, $input);
$now = time();
for ($j = 100 ; $j < 100+$timestamp ; $j++) {
   $payload{"_id"}=$j + 0.0;
   $response = $pua->$method($target,\%payload);

   if ( $pua->response_ok($response) )
   {
   # HTTP call returned correctly, print contents and quit...
     no strict 'vars';
     $content = eval($response->content());
     $content = $content->{PHEDEX}{MONGO};
     foreach $record ( @{$content} ) {
       print "Record:\n  ",join(', ',map { "$_:$record->{$_}" } sort keys %{$record}),"\n";
     }
   }
   else
   {
     # Something went wrong...
     #chomp $content;
     print "Error from server ",$response->code(),"(",$response->message(),"), output below:\n",
           $response->content(),"\n";
     die "exiting after failure\n";
   }
}
$past = time() - $now;

print "level ",$level,": ",$timestamp, " times use time : ", $past, "\n";

exit 0;

print  "DONE!\n";
