#!/usr/bin/env perl
use strict;
use Getopt::Long;
use PHEDEX::CLI::UserAgent;
use Data::Dumper;

my ($datasvc_url, $response,$content,$method,$timeout,$collName,$time_since,$time_until);
my ($level,$temp,$pua,$target,%payload,$rootdir,$output,$debug);
$timeout = 500;
$datasvc_url = 'https://pheSpaceMon.cern.ch/phedex/datasvc';
sub usage {
  print <<EOF;
  Usage:

  spaceQuery --collName NAME --time_since DATE --time_until DATE --level LEVEL --root ROOTDIR --output FILENAME
  level is depth of the directory structure you want to go, default is 4
  collname is the name of collection where data is put, must exist
  time_since&time_until is to specify the time scope
  root is the sub directory you are insterested in
  output is the file name you put output of query

  Additional Options:
   --url DATASVC     overrides the default data service url:
                     $datasvc_url

EOF
  exit 0;
}

$time_since = -1;
$time_until = -1;
GetOptions(
        'collName=s'    => \$collName,
        'time_since=i'    => \$time_since,
        'time_until=i'    => \$time_until,
        'url=s'    => \$datasvc_url,
        'level=i'    => \$level,
        'root=s'    => \$rootdir,
        'output=s'    => \$output,
        'debug'    => \$debug,
        'help|h'         => sub { &usage() }

      );

if(!$collName) { die "You must specify collect name\n"; }
$pua = PHEDEX::CLI::UserAgent->new
    (
      URL        => $datasvc_url,
      FORMAT    => 'perl',
      INSTANCE    => 'debug',
    );
$pua->timeout($timeout) if $timeout;
$pua->CALL('storageusage');
$pua->Dump();
$target = $pua->target;
$payload{collName} = $collName;

if($level) { $payload{level} = $level; }
if($rootdir) {$payload{rootdir} = $rootdir; }
if($time_since >= 0)  { $payload{time_since} = $time_since; }
if($time_until >= 0)  { $payload{time_until} = $time_until; }

if ($debug) {
   print "You input the following parameter:\n";
   foreach ( keys %payload ) {
      print $_, " :: ", $payload{$_}, "\n";
   }
   print "Data Service url::   $datasvc_url\n";
}

if ($output) {
   open(SOURCE, "> $output") or die "Couldn't open $output for writing!\n";
}
 
print "Begin to connect data service......\n";
$response = $pua->get($target,\%payload);
if ( $pua->response_ok($response) )
{
# HTTP call returned correctly, print contents and quit...
  no strict 'vars';
  $content = eval($response->content());
  $content = $content->{PHEDEX}{NODES};
  foreach $record ( @{$content} ) {
    #print "Record:\n  ",join(', ',map { "$_:$record->{$_}" } sort keys %{$record}),"\n";
    if ($output) {
       print SOURCE Data::Dumper->Dump([$record]);
    }
    else {
       print Data::Dumper->Dump([$record]), "\n";
    }
  }
}
else
{
# Something went wrong...
  chomp $content;
  print "Error from server ",$response->code(),"(",$response->message(),"), output below:\n",
        $response->content(),"\n";
  die "exiting after failure\n";
}

close SOURCE;
exit 0;
