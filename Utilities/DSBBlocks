#!/usr/bin/env perl

##H Generate SQL for dataset blocks from DSB data.
##H
##H Usage:
##H   DSBBlocks { -from RefDB | -from PhEDEx -db FILE[:SECTION] } [PATTERN...]
##H
##H -from RefDB   read information from RefDB
##H -from PhEDEx  read information from PhEDEx pseudo-bookkeeping-system
##H -db           database connection configuration parameter file
##H PATTERN       block match constraint (owner/dataset), such as "*/bt03_*"

BEGIN { use strict; use warnings; $^W=1;
  my $me = $0; $me =~ s|.*/||;
  my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
  unshift(@INC, "$home/../Toolkit/Common"); }
use UtilsHelp;
use UtilsDBS;
use TextGlob 'glob_to_regex';

my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-from' && scalar @ARGV > 1) {
	shift (@ARGV); $args{FROM} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
	shift (@ARGV); $args{DBCONFIG} = shift (@ARGV);
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

$TextGlob::strict_wildcard_slash = 0;
$args{PATS} = [ map { &glob_to_regex($_) } @ARGV ];
if (!$args{FROM}
    || !($args{FROM} eq 'RefDB' || $args{FROM} eq 'PhEDEx')
    || !($args{FROM} ne 'PhEDEx' || $args{DBCONFIG}))
{
    die "Insufficient parameters, use -h for help.\n";
}

# Create appropriate dataset bookkeeping proxy
my $dbs = ($args{FROM} eq 'RefDB'
	   ? new UtilsDBS::RefDB (%args)
	   : new UtilsDBS::PhEDEx (%args));

# Get all existing datasets
my $datasets = $dbs->fetchPublishedData();

# Get all current datasets
foreach my $item (@$datasets)
{
    my $token = "$item->{OWNER}/$item->{DATASET}";
    next if (@ARGV && !grep($token =~ $_, @{$args{PATS}}));
    local $| = 1;

    # Get file information
    $dbs->fetchDatasetInfo ($item);
    my $runs = $item->{RUNS};
    my @dsfiles = map { @{$_->{FILES}} } @$runs;
    my $events = 0; map { $events += $_->{EVTS} } @$runs;

    print "insert into t_block (name, owner, dataset, files, bytes)",
	  " values ('$item->{OWNER}/$item->{DATASET}', '$item->{OWNER}',",
	  " '$item->{DATASET}', @{[scalar @dsfiles]}, -1);\n";
}

exit 0;
