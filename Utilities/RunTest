#!/usr/bin/env perl

##H RunTest: runs a specific PhEDEx test
##H
##H Thinking of this as a base generic test... don't want to take it too far, rather
##H want to work out what functionality we _need_ of a test suite. Particularly, we want
##H to be able to periodically query the TMDB and compare the results of a particular
##H query with what we expect.
##H
##H Usage:
##H
##H -db       database connection configuration parameter file
##H -testdir  the directory in which the test is stored
##H -workdir  a directory to store logs, etc in
##H -period   the period of iteration of the test code
##H -duration the duration the test should run for
##H -delay    the delay in startup from agent to agent
##H -env      the env script used to setup the agent environment
##H -scripts  the dir holding RunTest, ExecuteSQL, Master

# FIXME: when things fail, make sure you shut down the agents!

$|=1;

$SIG{INT} = sub { print "Caught sig INT\n"; exit 2 };

######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
&GetOptions ("db=s"        => \$args{DBCONFIG},
             "testdir=s"   => \$args{TEST},
             "workdir=s"   => \$args{WORKDIR},
             "env=s"       => \$args{ENV},
             "duration=i"  => \$args{DURATION},
             "delay=i"     => \$args{DELAY},
             "period=i"    => \$args{PERIOD},
             "scripts=s"   => \$args{SCRIPTS},
	     "help|h"      => sub { &usage() });

if (@ARGV || !$args{DBCONFIG} || 
    !$args{TEST} || 
    !$args{ENV} || 
    !$args{WORKDIR} ||
    !$args{SCRIPTS})
{
    die "RunTest- Sorry, you're missing parameters, use -h for help. Args not processed: @ARGV\n";
}

(new Tool (%args))->process();

######################################################################
package Tool; use strict; use warnings; use base 'Exporter';
# Define any more 'use's here.
use PHEDEX::Core::Logging;
use PHEDEX::Core::JobManager;
use POSIX;
use File::Basename;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (DBCONFIG => undef,
		  TEST => undef,
		  DURATION => 60,
		  DELAY => 0,
		  PERIOD => 1,
		  WORKDIR => undef,
		  ENV => undef,
		  SCRIPTS => undef);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub process 
{
    my $self = shift;
    
    # To start the test we prepare the TMDB
    &logmsg( "Running test at $self->{TEST}, workdir is $self->{WORKDIR}" );
    $self->runSQL( "prep" );

    # Here we run the test and the agent startup concurrently. 
    my $mgr = new PHEDEX::Core::JobManager (NJOBS => 2);
    &logmsg( "Starting job queue" );
    $mgr->addJob( sub { $self->collectResult($mgr,"$self->{WORKDIR}/logs/master",@_) },
		  { },
		  "sh","-c",
		  "$self->{SCRIPTS}/Master -config $self->{ENV},$self->{TEST}/Config start all >& $self->{WORKDIR}/logs/master 2>&1" );
    $mgr->addJob( sub{ $self->collectResult($mgr,"$self->{WORKDIR}/logs/test",@_) },
		  { },
		  "sh","-c",
		  "$self->{TEST}/TheTest -db $self->{DBCONFIG} -duration $self->{DURATION} -period $self->{PERIOD} -workdir $self->{WORKDIR} -testdir $self->{TEST} > $self->{WORKDIR}/logs/test 2>&1");

    # Now wait for the agent startup and the test to finish
    while (@{$mgr->{JOBS}})
    {
        $mgr->pumpJobs();
        select (undef, undef, undef, .1);
    }

    # Make sure the agents are stopped and clean up the TMDB behind us
    $self->stopAgents();
    $self->runSQL( "clean" );
}

sub collectResult 
{
    my ($self, $mgr, $output, $job) = @_;

    if ($job->{STATUS}) {
        &logmsg( "Job running @{$job->{CMD}} has had a problem: $job->{STATUS}" );
    } else {
        open (IN, "< $output") or die "$output: cannot open: $!\n";
        while(<IN>) {
            print "$_";
        }
        close (IN) or die "$output: cannot read: $!\n";
    }}

sub runSQL {
    my ( $self, $stage ) = @_;

    system( "$self->{SCRIPTS}/ExecuteSQL -db $self->{DBCONFIG} -script $self->{TEST}/$stage" );
}

sub stopAgents {
    my $self = shift;

    &logmsg( "Stopping agents" );
    system( "$self->{SCRIPTS}/Master -config $self->{ENV},$self->{TEST}/Config stop all");

    sleep( 5 );
}


