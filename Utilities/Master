#!/usr/bin/env perl

# This is a variation on the production Master for use with tests. A different
# Master is required because each test is defined by at least one Config file.
# Shifting the tests to work somewhere else would require identical changes to
# the environment variables defined (ik!) in each of these Config files. To
# avoid this, here we allow the user to specify a file containing key=value
# pairs which are then used to when starting up agents.

# Usage
#
# Master -config <Config file> -env <env file> MODE AGENT|all

# First we need to parse the command line arguments
BEGIN { use warnings; use strict; }

while (@ARGV)
{
    if ($ARGV[0] eq "-config" && scalar @ARGV > 1) 	
    { shift (@ARGV); push (@{$args{CONFIG}}, split(/,/, shift(@ARGV))); }
    elsif ($ARGV[0] =~ /^-/) 
    { die "TestMaster- unrecognised option $ARGV[0]\n"; } 
    else { last; }
}

my $mode = shift(@ARGV) || "start";

if (!$args{CONFIG} ) { 
    die "Sorry, you need to specify a config file\n"; 
}

# Then set variables at script scope...
my @configuration = ();
my $environ = '';
my @agents = ();

# Then we need to open up each of the config files
foreach my $file ( @{$args{CONFIG}} ) {
    -f $file || die "$file: no such file\n";
    -r $file || die "$file: not readable\n";
    open(CONFIG, "< $file") || die "$file: cannot read: $!\n";

    while (<CONFIG>) {
	while (/^###\s+([A-Z]+)(\s+(.*)|$)/) {
	    chomp; s/\s+$//;
	    if ($1 eq "ENVIRON")
	    {
		while (<CONFIG>)
		{
		    last if /^###/; chomp; s/#.*//; s/^\s+//; s/\s+$//;
		    $environ .= "$_\n" if ($_ ne "");
		}
	    }
	    elsif ($1 eq "AGENT")
	    {
		push(@agents, $agent = { map { m|([^=]+)=(\S+)|g } split(/\s+/, $3) });
		while (<CONFIG>)
		{
		    last if /^###/; chomp; s/#.*//; s/^\s+//; s/\s+$//;
		    $agent->{OPTS} .= " $_" if ($_ ne "");
		}
	    }
	    else
	    {
		die "unrecognised section $1\n";
	    }
	}
    }
	       
    close (CONFIG);

}
    
# And finally act on all this information
if ($mode eq "start" || $mode eq "stop" || $mode eq 'show')
{
  if ($mode eq 'show') {
      open (SH, ">&STDOUT") or die "cannot open output: $!\n";
  } else {
      open (SH, "| sh") or die "cannot exec sh: $!\n";
  }
  print SH $environ, "\n";

  foreach $agent (@agents) {
    next if (@ARGV && !grep($_ eq "all" || $_ eq $agent->{LABEL}, @ARGV));
    next if (! @ARGV && ($agent->{DEFAULT} || 'on') eq 'off');

    if ($mode eq 'start' || $mode eq 'show') {
      print SH "mkdir -p \${PHEDEX_STATE}/$agent->{LABEL} &&",
               " mkdir -p \${PHEDEX_LOGS} &&",
               ($agent->{STATELINK}
                ? " ln -sf $agent->{LABEL} \${PHEDEX_STATE}/$agent->{STATELINK};" : " :;"),
               "\nnohup \${PHEDEX_SCRIPTS}/$agent->{PROGRAM}",
               (" -", $agent->{STATEOPT} || "state", " ", "\${PHEDEX_STATE}/$agent->{LABEL}"),
               $agent->{OPTS},
               " >> \${PHEDEX_LOGS}/$agent->{LABEL} 2>&1 </dev/null &\n";
    } elsif ($mode eq 'stop') {
      print SH "touch \${PHEDEX_STATE}/$agent->{LABEL}/stop\n";
    }
  }
  close (SH);
}
elsif ($mode eq "environ")
{
  print $environ, "\n";
}
else
{
  die "unrecognised operation mode \"$mode\"\n";
}
    
