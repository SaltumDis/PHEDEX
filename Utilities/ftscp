#!/bin/sh

##H This is a "srmcp"-like script using FTS to transfer files.
##H
##H Usage: ftscp -copyjobfile=FILE [-report=FILE]
##H
##H Takes a list of source/destination file pairs and copies them
##H using FTS.  The files must be given through a "copyjob" file,
##H with one "SOURCE DESTINATION" line per file copy, the names
##H separated with a single space character, and no leading or
##H trailing white space.
##H
##H If the "-report" option is used, the status of each file copy
##H is written in there.  The exit code from the command is zero
##H if all the files have been copied successfuly, otherwise non-
##H zero; the details can be found in the report file.

usage() { grep '^##H' < $0 | sed 's/^\(##H \|##H$\)//'; exit 1; }

# Pick up options
#report=/dev/null copyjob=
#copyjob=
#while [ $# -ge 1 ]; do
#echo "1= $1"
#echo "arg= $arg"
#echo "#= $#"
#  case $1 in
for arg; do
#echo "arg= $arg"
  case $arg in
    -copyjobfile=* )
      copyjobfile="${arg#-copyjobfile=}"
### [FIXME] cat $copyjobfile | sed 's|grid|gridsc|' > $copyjobfile 
      echo "copyjobfile=$copyjobfile"
      cat $copyjobfile
#      break;;
     ;;
    -report=* )
      report="${arg#-report=}"
      echo "report=$report"
      ;;
    -server=* )
      server="${arg#-server=}"
      echo "server=$server"
#      break;;
      ;;
    -h )
      usage;;
    -* )
      echo "unrecognised option $1" 1>&2; exit 1 ;;
    * )
      break ;;
  esac
done

#echo "-- $copyjob --"
#cat $copyjob
[ -z "$copyjobfile" ] && { echo "Missing -copyjobfile, use -h for help." 1>&2; exit 1; }
[ -z "$server" ] && { echo "Missing -server, use -h for help." 1>&2; exit 1; }
[ ! -f "$copyjobfile" ] && { echo "$copyjobfile: no such file" 1>&2; exit 2; }
[ ! -r "$copyjobfile" ] && { echo "$copyjobfile: cannot read" 1>&2; exit 3; }

#echo "copyjob: $copyjob"
ftsjobid=

# FIXME: signal handling
# trap 1 2 15 's=$?; [ -z "$ftsjobid" ] || glite-transfer-cancel $ftsjobid; exit $s'

# Create a FTS transfer request.
echo "glite-transfer-submit -p pppppp -s $server -f $copyjobfile"
ftsjob=$(glite-transfer-submit -p pppppp -s $server -f $copyjobfile)
#ftsjob=$(glite-transfer-submit -p pppppp -s \"$server\" -f \"$copyjobfile\")
#ftsjob=$(echo \"eccomi\")

echo "ftsjob = $ftsjob"


# Poll transfer status, record output into the report
while true; do
  # FIXME: we need to be recording per-file status, not just the job!
  sleep 10 
  ftsstatus=$(glite-transfer-status -s $server $ftsjob)
  case $ftsstatus in
    Submitted )
      # [FIXME] need to just ignore this transient state
      echo "$ftsjob status is Submitted";;

    Pending )
      # [FIXME] Need something smarter here, adaptive sleep based on
      # how much has been done and remains to be done.
      echo "$ftsjob status is Pending";;

    Active )
      echo "$ftsjob status is Active";;

    Canceled )
      # [FIXME] how can I find it Canceled?
      echo "$ftsjob status is Canceled";;

    Hold )
      # [FIXME] what to do in this case?
      echo "$ftsjob status is Hold"
      echo "glite-transfer-cancel -s $server $ftsjob"
      glite-transfer-cancel -s $server $ftsjob
      exitcode=1
      ;;

    Done )
      echo "$ftsjob status is Done"
      # Job done, record report file, quit
      exitcode=0
      while read src dest; do
	# FIXME: Get the transfer status for this pair
        #echo "-- src $src"
        #echo "-- dest: $dest"
        #echo "-- status: $status"

	[ X"$status" != X0 ] && exitcode=10
        echo "$src $dest $status"
      done < "$copyjobfile" > "$report"
      exit $exitcode
      ;;

    * )
      echo "ftscp: unexpected job status $ftsstatus" 1>&2
      exit 4
      ;;
  esac
done
