#!/usr/bin/env perl

##H Check how many registered for a TMDB node and known in DBS exist in
##H in the node's local file catalogue.
##H
##H Usage:
##H   DSBCheck { -from RefDB | -from PhEDEx -db FILE[:SECTION] }
##H            -pfnquery CMD[,ARG...] -node NAME [PATTERN...]
##H
##H -from RefDB   read information from RefDB
##H -from PhEDEx  read information from PhEDEx pseudo-bookkeeping-system
##H -db           database connection configuration parameter file
##H -pfnquery     the command to query local file catalogue; see agents
##H -node         the node for which to check replica completeness
##H PATTERN       block match constraint (owner/dataset), such as "*/bt03_*"
##H
##H Generates summary information for each owner/dataset pair that matches
##H PATTERNs.  Prints out owner/dataset pair with three numbers: number of
##H files in the set, number of files at the node, number of files in the
##H catalogue.

BEGIN { use strict; use warnings;
  my $me = $0; $me =~ s|.*/||;
  my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
  unshift(@INC, "$home/../Toolkit/Common"); }
use UtilsHelp;
use UtilsDBS;
use TextGlob 'glob_to_regex';

my %args;
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-from' && scalar @ARGV > 1) {
	shift (@ARGV); $args{FROM} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
        shift (@ARGV); $args{DBCONFIG} = shift(@ARGV);
    } elsif ($ARGV[0] eq '-pfnquery' && scalar @ARGV > 1) {
	shift (@ARGV); push(@{$args{PFN_QUERY}}, split (',', shift (@ARGV)));
    } elsif ($ARGV[0] eq '-node' && scalar @ARGV > 1) {
	shift (@ARGV); $args{NODE} = shift (@ARGV);
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

$TextGlob::strict_wildcard_slash = 0;
$args{PATS} = [ map { &glob_to_regex($_) } @ARGV ];
if (!$args{PFN_QUERY} || !$args{NODE} || !$args{FROM}
    || !($args{FROM} eq 'RefDB' || $args{FROM} eq 'PhEDEx')
    || !($args{FROM} ne 'PhEDEx' || $args{DBCONFIG}))
{
    die "Insufficient parameters, use -h for help.\n";
}

# Create appropriate dataset bookkeeping proxy
my $dbs = ($args{FROM} eq 'RefDB'
	   ? new UtilsDBS::RefDB (%args)
	   : new UtilsDBS::PhEDEx (%args));

# Get all existing datasets
my $datasets = $dbs->fetchPublishedData();

# Get all current datasets
foreach my $item (@$datasets)
{
    my $token = "$item->{OWNER}/$item->{DATASET}";
    next if (@ARGV && !grep($token =~ $_, @{$args{PATS}}));
    local $| = 1;
    print $token;

    # Generate drops
    $dbs->fetchDatasetInfo ($item);
    my @dsfiles = map { @{$_->{FILES}} } @{$item->{RUNS}};
    my $nfiles = scalar @dsfiles;
    my $onsite = grep ($_ eq $args{NODE}, @{$item->{SITES}}) ? $nfiles : 0;
    my @guids = map { $_->{GUID} } @dsfiles;
    my $pfns = &guidToPFN (\@guids, "direct", "local", @{$args{PFN_QUERY}});
    my $found = grep (defined $_, values %$pfns);
    print " $nfiles $onsite $found\n";
}

exit 0;
