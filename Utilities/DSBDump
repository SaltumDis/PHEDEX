#!/usr/bin/env perl

##H List dataset information from DBS database.
##H
##H Usage:
##H   DSBDump { -from RefDB | -from { PhEDEx | DBS } -db FILE[:SECTION] }
##H           [-details] [-files] [-evc] [-application] [-history] [-blocks]
##H           [PATTERN...]
##H
##H -from DBS     read information from DBS
##H -from RefDB   read information from RefDB
##H -from PhEDEx  read information from PhEDEx pseudo-bookkeeping-system
##H -db           database connection configuration parameter file
##H -evc          print out EventCollection information (more costly)
##H -application  print out Application information (more costly)
##H -history      print out provenance history (more costly)
##H -details      include detailed information about files (more costly)
##H -blocks       print out block information (more costly)
##H -files        print out file GUID and LFNs (more costly)
##H PATTERN       block match constraint (owner/dataset), such as "*/bt03_*"

BEGIN { use strict; use warnings; $^W=1;
  my $me = $0; $me =~ s|.*/||;
  my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
  unshift(@INC, "$home/../Toolkit/Common"); }
use UtilsHelp;
use UtilsDBS;
use TextGlob 'glob_to_regex';

my %args = (DETAILS => 0, FILES => 0);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-h') {
	&usage();
    } elsif ($ARGV[0] eq '-from' && scalar @ARGV > 1) {
	shift (@ARGV); $args{FROM} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-db' && scalar @ARGV > 1) {
	shift (@ARGV); $args{DBCONFIG} = shift (@ARGV);
    } elsif ($ARGV[0] eq '-details') {
	shift (@ARGV); $args{DETAILS} = 1;
    } elsif ($ARGV[0] eq '-evc') {
        shift (@ARGV); $args{EVC} = 1;
    } elsif ($ARGV[0] eq '-application') {
        shift (@ARGV); $args{APPLICATION} = 1;
    } elsif ($ARGV[0] eq '-history') {
        shift (@ARGV); $args{PROVENANCE} = 1;
    } elsif ($ARGV[0] eq '-blocks') {
	shift (@ARGV); $args{BLOCKS} = 1;
    } elsif ($ARGV[0] eq '-files') {
	shift (@ARGV); $args{FILES} = $args{DETAILS} = 1;
    } elsif ($ARGV[0] eq '--') {
	shift (@ARGV); last;
    } elsif ($ARGV[0] =~ '^-') {
	&usage ("$0: unrecognised option $ARGV[0]\n\n");
    } else {
	last;
    }
}

$TextGlob::strict_wildcard_slash = 0;
$args{PATS} = [ map { &glob_to_regex($_) } @ARGV ];
if (!$args{FROM}
    || !grep($args{FROM} eq $_, qw(RefDB PhEDEx DBS))
    || !($args{FROM} ne 'PhEDEx' || $args{DBCONFIG})
    || !($args{FROM} ne 'DBS' || $args{DBCONFIG}))
{
    die "Insufficient parameters, use -h for help.\n";
}

# Create appropriate dataset bookkeeping proxy
my $dbs = UtilsDBS->connect ($args{FROM}, $args{DBCONFIG});

# Get all existing datasets
my $datasets = $dbs->fetchPublishedData();

# Get all current datasets
foreach my $item (@$datasets)
{
    my $token = "$item->{OWNER}/$item->{DATASET}";
    next if (@ARGV && !grep($token =~ $_, @{$args{PATS}}));
    print "processing $token\n";
    if ($args{EVC} || $args{APPLICATION} || $args{DETAILS} || $args{FILES} || $args{BLOCKS})
    {
        # Get the full data
        eval { $dbs->fillDatasetInfo ($item); };
        do { warn ($@); next } if $@;
    }

    # Evaluate dataset information
    if ($args{DETAILS})
    {
        my $blocks = $item->{BLOCKS};
        my $runs = $item->{RUNS};
        my $files = $item->{FILES};
        my $events = 0; map { $events += $_->{EVTS} } values %$runs;
        print " Id                 = @{[$item->{ID} || '']}\n";
        print " Owner              = $item->{OWNER}\n";
        print " Dataset            = $item->{DATASET}\n";
        print " Collection         = @{[$item->{COLLECTION} || '']}\n";
        print " Datatype           = $item->{DSINFO}{InputProdStepType}\n";
        print " InputOwner         = @{[$item->{DSINFO}{InputOwnerName} || '']}\n";
        print " PUDataset          = @{[$item->{DSINFO}{PUDatasetName} || '']}\n";
        print " PUOwner            = @{[$item->{DSINFO}{PUOwnerName} || '']}\n";
        print " Status             = $item->{DSINFO}{CollectionStatus}\n";
        print " Blocks             = @{[scalar keys %$blocks]}\n";
        print " Runs               = @{[scalar keys %$runs]}\n";
        print " Files              = @{[scalar @$files]}\n";
        print " Events             = $events\n";
        print " Sites              = @{[sort keys %{$item->{SITES}}]}\n";
        print " DBSPath            = /$item->{DATASET}/$item->{DSINFO}{InputProdStepType}/$item->{OWNER} \n";
    }

    if ($args{APPLICATION})
    {
        print " Application        = $item->{APPINFO}{ApplicationName}\n";
        print " ApplicationVersion = $item->{APPINFO}{ApplicationVersion}\n";
        print " ExecutableName     = $item->{APPINFO}{ExecutableName} (from assignment $item->{APPINFO}{ASSIGNMENT})\n";
    }

    if ($args{PROVENANCE})
    {
	for ($i = 0; $i < scalar @{$item->{PARENTS}}; ++$i)
	{
	    my $parent = $item->{PARENTS}[$i];
            print " Provenance history #$i\n";
	    print "  ParentReason      = $parent->{TYPE}\n";
	    print "  ParentDataset     = $parent->{DSINFO}{DatasetName}\n";
	    print "  ParentOwner       = $parent->{DSINFO}{OwnerName}\n";
	    print "  ParentDatatype    = $parent->{DSINFO}{InputProdStepType}\n";
	    print "  DBSPath           = /$parent->{DATASET}/$parent->{DSINFO}{InputProdStepType}/$parent->{OWNER}\n";
        }
    }

    if ($args{BLOCKS})
    {
        foreach my $b (sort { $a->{NAME} cmp $b->{NAME} } values %{$item->{BLOCKS}})
        {
	    print " Block $b->{NAME}\n";
        }
    }

    if ($args{EVC})
    {
	foreach my $run (sort { $a->{NAME} cmp $b->{NAME} } values %{$item->{RUNS}})
	{
            print " EventCollection: EvC_Run$run->{NAME} ($run->{EVTS} events)\n";
            foreach my $f (@{$run->{FILES}})
            {
                print "  File $f->{GUID} $f->{INBLOCK} $f->{LFN}[0]\n";
            }
        }
    }

    if ($args{FILES})
    {
        foreach my $f (sort { $a->{LFN}[0] cmp $b->{LFN}[0] } @{$item->{FILES}})
        {
	    print " File $f->{GUID} $f->{INBLOCK} $f->{LFN}[0]\n";
        }
    }

    # Clear out the item so we don't accumulate lots of memory
    $item->{FILES} = [];
    $item->{BLOCKS} = {};
    $item->{RUNS} = {};
}


$dbs->disconnect();

exit 0;
