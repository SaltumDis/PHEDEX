#!/usr/bin/env perl
#
# spacemon-read-from-datasvc - test utility for visualization 
# 
# Intended functionality: 
#  * Gets last record object by a given date from dmwmmon db using dataservice
#  * Converts record into format foreseen for dashboard visualization and saves as a file 
#    (default: print to stdout)
#  * Other options:
#	- print out a list of nodes in dmwmmon db 
#	- print out an authentication information based on proxy certificate. 
#	- get all upload dates with total sizes for a given  node
#
#  This can be implemented via a  separate utility per use case, or as one utility 
#  supporting different  'command' arguments. 
# 
# See project page for details:
#            https://twiki.cern.ch/twiki/bin/view/CMSPublic/CompProjSpaceMon
#
############################################################################

use strict;
use warnings;
use Carp;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw /:config pass_through /;

use DMWMMON::SpaceMon::RecordIO;
use DMWMMON::SpaceMon::Core;
use DMWMMON::SpaceMon::UserAgent;

my $me = basename($0);
my ($debug, $verbose, $level, $url, $auth, $node, $date, $writetofile);
#$debug = $verbose = 0; # use these to override class defaults. 

my ($rec_from_datasvc, $rec_from_file, $rio, $tmp_rec_file);

sub vPrint{
    my $text = shift;
    $verbose && print "$me: " . $text . "\n"; 
}

# Check useful for packaging. Print dependencies and exit:
GetOptions("deps|d" => sub {print Dumper(%INC); exit;}); 

GetOptions ( 'help|h' => sub { &usage },
	     'version'=> sub { print "$me version: " . 
				   DMWMMON::SpaceMon::Core::version()."\n";
			       exit;},
	     'write-to-file:s'   => \$writetofile,
	     'debug!' => \$debug,  # enables --nodebug option
	     'verbose!' => \$verbose,	     
	     'auth' => \$auth,	     
	     'level:i' => \$level,
	     'url:s' => \$url,
	     'node:s' => \$node,
  	     'date:i' => \$date,  # default - current time
	     );
&DMWMMON::SpaceMon::UserAgent::auth_getoptions();
sub usage
{ 
    my $ver = DMWMMON::SpaceMon::Core::version();
    print <<EOF;
  $me - client side utility for CMS Space Monitoring. 
  Version:  $ver    
	
      Usage:
        $me --help|-h
        $me --version
	$me [OPTIONS] 

      Options: 
	--url           - overrides the data service url
	--node [name]   - node to get data for (required)
	--date [date]   - get last upload by this date (in sec since epoch)
	--auth          - get authentication info from the data service

EOF
;
    &DMWMMON::SpaceMon::UserAgent::auth_usage();
    exit 0;
}

if (defined $auth) {
    # Check  Authentication: 
    print "$me: Checking authentication\n" if $verbose;
    my $smua = DMWMMON::SpaceMon::UserAgent->new (
                                      URL      => $url,
                                      FORMAT   => 'perl',
                                      DEBUG    => $debug,
                                      VERBOSE  => $verbose,
                                     );
    $smua->readAuthFromDatasvc();
    exit;
}

if (defined $node) {
    $rec_from_datasvc = $rio->readFromDatasvc ($node);
    $rio = DMWMMON::SpaceMon::RecordIO->new(
					DEBUG => $debug,
					VERBOSE => $verbose,
					DATASVC => $url,
					);
    $tmp_rec_file='/tmp/record.save-datasvc-record';
    $rio->writeToFile($rec_from_datasvc, $tmp_rec_file);
    $rec_from_file = $rio->readFromFile($tmp_rec_file);
    $verbose && print $rec_from_file->dump();
    $rio->show($rec_from_file);
    exit;
}

print "Try \"$me -h\"  for usage help \n";

