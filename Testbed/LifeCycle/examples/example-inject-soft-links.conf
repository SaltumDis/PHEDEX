%Lifecycle::Lite = (

  Name		=> 'Injection',

  Quiet		=> 0,
  Verbose	=> 0,
  Debug		=> 0,

  Jitter	=>  0.1,
  CycleSpeedup	=>    1,
  Suspend       =>    0,
  NJobs         =>    1,

  TmpDir	=>  '/tmp/' . (getpwuid($<))[0] . '/tmp/',
  GarbageCycle  =>  300,
  GarbageAge    => 3600,
  StatsFrequency => 3600 * 12,

  CycleTime     => 600,
  NCycles       => 1, # < 0 => infinite, > 0 to limit

  Templates => {
    'RAW' => {
      CycleTime		=> 999_999_999,
      Events		=> [ 'makeDataset', 'makeBlocks', 'makeFiles', 'makeLinks', 'Inject' ],
      Intervals => {
        Inject    =>    0,
      },
    },
    Auth => {
      Incarnations => 1,
      NCycles      => 1,
    },
  },

  Defaults => {
#   Use the Datasvc module to perform the actions, instead of calling the code directly.
    Namespace  => 'PHEDEX::Testbed::Lifecycle',
    Module => {
      Auth        => 'Datasvc',
      Inject      => 'Datasvc',
      makeDataset => 'DataProvider',
      makeBlocks  => 'DataProvider',
      makeFiles   => 'DataProvider',
      makeLinks   => 'DataProvider',
    },
    DataProvider => { },
    Datasvc	 => {
        url      => 'https://vphedex.cern.ch:443/phedex/datasvc',
        instance => 'vlad',
        # Set up your proxy by running 'voms-proxy-init --voms cms --valid 192:00'
        cert_file => "/home/vlad/.globus/usercert.pem",
        key_file  => "/home/vlad/.globus/userkey.pem",
        ca_file   => "/etc/grid-security/certificates/CERN-Root.pem",
        ca_dir    => "/etc/grid-security/certificates/"
    },
  },

  Workflows => [
    {
    
    Name			=> 'Raw data',
    Template			=> 'RAW',
    Suspend			=> 0,

    InjectionSite	=>    'T2_ANSE_CERN_1',

    # Initial parameters for the generator
    Dataset	=> '/data/test-fdt-%04x/RAW',
    Datasets	=>   	1,
    Blocks	=>     	1,
    
    # There are now two ways of specifying how many files to create per block
    # First is the normal mode : 
    # 		Files	=>	number of files
    # Second allows you to add tags at the end of each file's name 
    #	Files => {
    #			nameOfTag	=>	number of files for 'nameOfTag'
    #			differentTag	=>	number of files for 'differentTag'
    #		}
    
    Files	=>   	1000,
#    Files => {
#	tag1	=>	3,
#	tag2	=>	4,
#	tag4    =>	5,
#    },

    AutoRestart => 1,

    DBS	=> 'http://cmsdoc.cern.ch/cms/aprom/DBS/CGIServer/query',
    
    makeLinks => {
        LinkStyle => 'soft',
	LinkDir   => '/data/ANSE',
	
	# Links to these files are created in a round robin fashion, using each file sequentially
	# Size and Checksum are optional here. If size is not set, it will be checked and set
	# when the script is run. If Checksum is not set, it will default to 0 and no CRC check should occur
	SrcFiles => [
	    {
		Name => '/data/ANSE/random.data',
		Checksum => 'cksum:1948514810',
	    }
	],

#	SrcFiles => {
#	    tag1	=> {
#		Name => '/data/Tests/links/file1.data',
#		Checksum =>  'cksum:2879015793',
#	    },
#	    tag2	=> {
#		Name => '/data/Tests/links/file2.data',
#		Size => 16106127360,
#		Checksum => 'cksum:2879015793',
#	    },
#	    tag3	=> {
#		Name => '/data/Tests/links/file3.data',
#	    },
#	},
    },

    },
    { Name => 'Auth' },
  ],
);

1;
