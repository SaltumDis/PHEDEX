# This is where it all happens...
%PhEDEx::Lifecycle =
(
  Name		=> '4Node Lifecycle',

  Quiet		=> 0,
  Verbose	=> 1,
  Debug		=> 1,
  Dummy		=> 0,   # Don't update TMDB, just run the framework
  StopOnIdle	=> 1,   # Not yet implemented...
  DoInjection	=> 1,   # Set to 1 to run, to 0 to drain.
  Jitter	=> 0.1, # To spread things out a bit
  CycleSpeedup	=>   1, # speed up time.

  FileSizeMean	 => 2.0,
  FileSizeStdDev => 0.2,

  Dataflow =>
  {
#   These are arrays of POE events in Lifecycle.pm, and reflect the workflow
#   for different types of data.
    'RAW'      => [ 'inject', 't1subscribe', 'srcdelete' ],
    'INJC'     => [ 'inject' ], # Only injection, for testing...
  },

  DataflowDefaults =>
  {
#   Default parameters for each workflow. These override global defaults, but
#   are overridden by values in the specific dataflow instance.
#   Typically, set CycleTime and NFiles, based on the expectations from the
#   computing model in question. These values assume 8 primary physics
#   datasets and a total DAQ rate of 350 MB/sec raw data.

    'RAW' =>
    {
      Priority	=>     1,
      CycleTime	=>   300,
      NFiles	=>   500,
    },
  },

  DatasetDefaults =>
  {
#   These are global defaults. They are overridden by per-dataflow defaults and
#   by values in the individual workflows.
    InUse		=>    0, # These are standard block-parameters
    IsOpen		=>   'y',
    IsMove		=>   'n',
    IsTransient		=>   'n',
    IsCustodial		=>   'y',
    InjectionSite	=>    'T0_Test_Buffer',
    NFiles		=> 1000,
    Priority		=>    3,
    InjectionsPerBlock	=>   10, # Use open blocks <n> times, then close them

    NCycles	=>   -1, # < 0 => infinite. > 0 to limit
    CycleTime	=>   7200,

#   These are intervals between events. Undefined => event fires immediately
    inject	=> undef,
    t1subscribe	=>     3,
    srcdelete	=>     3600,
  },

  Datasets =>
  [
    {
      Name	  => '/lifecycle/custodial/raw_1',
      IsCustodial =>   'y',
      InUse	  =>     0,
      Dataflow	  => 'RAW',
      T1s => ['T0_Test_MSS','TX_Test1_MSS'],
    },
    {
      Name	  => '/lifecycle/default/raw_2',
      IsCustodial =>   'n',
      InUse	  =>     1,
      Dataflow	  => 'RAW',
      T1s => ['T0_Test_MSS','TX_Test1_MSS' ], #,'TX_Test2_MSS','TX_Test3_MSS','TX_Test4_MSS'],
    },
  ],

# These are in case I am using a PhEDEx::Logger to send stuff to. I'm not...
  QueueEntries  => 1,
  RetryInterval => 2,
);

do "$ENV{PHEDEX_CONFIG}/LifecycleNodes.pl";

# Everything below here can be ignored.
%Logger::Monalisa =
(
  Host		=> 'lxarda12.cern.ch:28884',
  apmon		=> {
			sys_monitoring	=> 1,
			general_info	=> 1,
		   },
);

%Logger::Receiver =
(
  ConfigRefresh	=> 10, # Interval for checking config file
  Host		=> 'pctony.cern.ch',
  Port		=> 22201,

# Logfile	=> /tmp/wildish/PhEDEx/logs/prototype.log,

  Quiet		=> 0,
  Verbose	=> 1,
  Debug		=> 0,
);

%Logger::Sender =
(
  QueueEntries	=> 1,
  RetryInterval => 2,
  Quiet		=> 1,
  Verbose	=> 0,
  Debug		=> 0,
);

1;
