#!/usr/bin/env perl

##H Seed test database (set up with separate SQL) with a number of
##H files.
##H
##H Use: $0 -db <DBCONFIG> -count N_FILES -blocks N_BLOCKS
##H

BEGIN { use strict; use warnings; $^W=1;
	my $me = $0; $me =~ s|.*/||;
	my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
	unshift(@INC, "$home/../../Toolkit/Common"); }

my %args;
use Getopt::Long;
use UtilsHelp;
use UtilsDB;
use UtilsTiming;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "blocks=i"    => \$args{BLOCKS},
	     "count=i"     => \$args{COUNT},
    	     "help|h"      => sub { &usage() });

my $checksum = 1;
my $size = 1000000000;
my $node = 0;

if (! $args{DBCONFIG} || ! $args{COUNT} || ! $args{BLOCKS})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $count = $args{COUNT};
my $blocks = $args{BLOCKS};
my $now = &mytimeofday();

my $dbh = &connectToDatabase (\%args, 0);

my %params;
my $ifile = &dbprep($dbh, qq{
    insert into t_dps_file
    (id,node,inblock,logical_name,checksum,filesize,time_create)
    select seq_dps_file.nextval, n.id, ?, ?, ?, ?, ?
    from t_node n where n.name = ?});

for( my $block=1; $block<=$blocks; $block++)
{
    print "Creating block $block";
    my $bid = undef;
    &dbexec($dbh, qq{
	insert into t_dps_block 
	  (id,dataset,name,files,bytes,is_open,time_create)
	  values (seq_dps_block.nextval,1,:name,:nfiles,:nbytes,'y',:now)
	  returning id into :id},
	  ":id" => \$bid, ":now" => $now, ":name" => "block$block",
    	  ":nfiles" => $count, ":nbytes" => $count * $size);
    print ", id=$bid\n";

    for( my $f = 0; $f<$count; $f++)
    {
	my $node = (qw(A B C D E))[$f % 5];
	my $fid = $f + $block * $count;
	my $n = 1;
	push(@{$params{$n++}}, $bid);
	push(@{$params{$n++}}, "/my/test/file$fid");
	push(@{$params{$n++}}, "1");
	push(@{$params{$n++}}, $size);
	push(@{$params{$n++}}, $now);
	push(@{$params{$n++}}, $node);
    }
}

print "Executing SQL inserts\n";
&dbbindexec($ifile, %params);
&dbexec($dbh, qq{
    insert into t_xfer_file (id, inblock, logical_name, checksum, filesize)
    (select id, inblock, logical_name, checksum, filesize from t_dps_file)});
&dbexec($dbh, qq{
    insert into t_xfer_replica
    (id, fileid, node, state, time_create, time_state)
    (select seq_xfer_replica.nextval, id, node, 0, time_create, time_create
     from t_dps_file)});
print "Done\n";

$dbh->commit();
$dbh->disconnect();
