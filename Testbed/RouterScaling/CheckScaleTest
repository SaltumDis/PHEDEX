#!/usr/bin/env perl

##H Periodically query TMDB to determine test parameters
##H
##H Use: $0 -db <DBCONFIG> -period <sample period in s>
##H

BEGIN { use strict; use warnings; $^W=1;
	my $me = $0; $me =~ s|.*/||;
	my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
	unshift(@INC, "$home/PHEDEX/Toolkit/Common"); }

$|=1;

my %args;
use Getopt::Long;
use UtilsHelp;
use UtilsDB;
use UtilsTiming;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "period=i"     => \$args{PERIOD},
    	     "help|h"      => sub { &usage() });

if (! $args{DBCONFIG} || ! $args{PERIOD})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $dbh = &connectToDatabase (\%args, 0);

my $start = &mytimeofday();

print "min\treps\txfers\treqs\n";

while( 1 )
{
    my $now = &mytimeofday();
    printf( "%.2f\t", ($now-$start)/60 );

    my $q = &dbexec ($dbh, qq{ select count(*) from t_xfer_replica});
    while (my @row = $q->fetchrow_array()) { print "$row[0]\t"; }
    $q = &dbexec ($dbh, qq{ select count(*) from t_xfer_state});
    while (my @row = $q->fetchrow_array()) { print "$row[0]\t"; }
    $q = &dbexec ($dbh, qq{ select count(*) from t_xfer_request});
    while (my @row = $q->fetchrow_array()) { print "$row[0]\t"; }
    $q = &dbexec ($dbh, qq{ select count(*) from t_xfer_path});
    while (my @row = $q->fetchrow_array()) { print "$row[0]\t"; }
    
    print "\n";
    sleep( $args{PERIOD} );
}

do { chomp ($@); &alert ("database error: $@");
     eval { $dbh->rollback() } if $dbh; } if $@;

$dbh->disconnect();
