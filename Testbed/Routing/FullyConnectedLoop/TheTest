#!/usr/bin/env perl

BEGIN {
    use strict; use warnings;
    our $me = $0; $me =~ s|.*/||;
    our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../../Toolkit/Common";
    unshift(@INC, $home);
}

######################################################################

use UtilsHelp;

# FIXME: should be able to determine which test it is from the directory it's in!

my %args = ();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-test' && scalar @ARGV > 1)
    { shift (@ARGV); $args{TEST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else 
    { last; }
}

if (@ARGV || !$args{DBCONFIG} || !$args{TEST})
{
    die "Sorry, you're missing parameters, use -h for help.\n";
}

(new Tool (%args))->process();

######################################################################
package Tool; use strict; use warnings; use base 'Exporter';
# Define any more 'use's here.
use UtilsDB;
use UtilsLogging;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (DBCONFIG => undef,
                  TEST => undef);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub process 
{
    my $self = shift;

    my $dbh = undef; $dbh = &connectToDatabase ($self,0) or die "failed to connect";
    eval {
        $self->checkLogs( $dbh );  # These are automatic tests of the logs for alerts etc
	$self->test( $dbh );      # This is the custom, specific test
    };
    do { &alert ("Problem in test loop: $@") } if $@;
    $dbh->disconnect();
}

sub checkLogs {
    my ($self, $dbh) = @_;

    opendir( DIR, "logs" ) or die "Couldn't open log directory: $!";
    while( defined (my $file = readdir( DIR )) ) {
	if ( $file ne "." && $file ne ".." ) {
	    system( "touch logs/last-$file" );
	    open( FILE, "diff logs/$file logs/last-$file |" );
	    while(<FILE>) {
		if (/alert/ 
		    || /Use of uninitialized value/
		    || /unique constraint/) {
		    &logmsg( "Problem in $file log" );
		    print "$_\n";
		}
	    }
	    close( FILE );
	    system( "rm logs/last-$file" );
	    system( "cat logs/$file > logs/last-$file" );
	}
    }
    close( DIR );
}

sub test {
    my ($self, $dbh) = @_;

    # First check to see if the total number of routes is as expected
    my $count = 0;
    my $sql = "select count(*) from t_routing where gateway like 'Test-FCL-%'"; 
    my $query = $dbh->prepare($sql);
    $query->execute();
    while (my @row = $query->fetchrow())
    {
	if ($row[0] != 132) {
	    &logmsg( "Found $row[0] routes instead of 132" );
	}
    }
    $query->finish();

    # Now check whether the table has changed since the last iteration
    # In this test it should remain the same, I think
    my %lastTable = ();
    system( "touch $self->{TEST}/last-routes.txt" );
    open ( LAST, "$self->{TEST}/last-routes.txt" );
    while (<LAST>) {
        chop;
	my ($from,$to,$gate,$hops) = split (/ /);
        my $route = "$from $to";
	$lastTable{"$route"} = "$gate $hops";
    }
    close( LAST );

    my %actualTable = ();
    $sql = "select from_node,to_node,gateway,hops
            from t_routing
            where to_node like 'Test-FCL-%' order by 'from_node' asc";
    $query = $dbh->prepare($sql);
    $query->execute();
    while (my @row = $query->fetchrow())
    {
	$actualTable{"$row[0] $row[1]"} = "$row[2] $row[3]";
	if ( $row[3] > 3 ) {
	    &logmsg( "Found route that's too long @row" );
	}
    }
    $query->finish();
    
    my $tableCompFailed = 0;
    foreach my $route ( keys %actualTable ) {
	if ( ! exists $lastTable{$route} || $actualTable{$route} ne $lastTable{$route}) {
	    $tableCompFailed = 1;
	}
	$count++;
    }
    
    if ($tableCompFailed == 1) {
	&logmsg( "$count routes have changed" );
    }
    
    system( "rm $self->{TEST}/last-routes.txt; touch $self->{TEST}/last-routes.txt" );
    open ( NEWLAST, ">$self->{TEST}/last-routes.txt" );
    $count = 0;
    foreach my $route ( keys %actualTable ) {
	print NEWLAST "$route $actualTable{$route}\n";
    }
    close( NEWLAST );

}
    
