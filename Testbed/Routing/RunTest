#!/usr/bin/env perl

##H RunTest: runs a specific PhEDEx test
##H
##H Thinking of this as a base generic test... don't want to take it too far, rather
##H want to work out what functionality we _need_ of a test suite. Particularly, we want
##H to be able to periodically query the TMDB and compare the results of a particular
##H query with what we expect.
##H
##H Usage:
##H
##H -db       database connection configuration parameter file
##H -test     test name- the directory in which the test is stored
##H -period   the period of iteration of the test code
##H -duration the duration the test should run for
##H -delay    the delay in startup from agent to agent

# FIXME: when things fail, make sure you shut down the agents!

$|=1;

BEGIN {
    use strict; use warnings;
    our $me = $0; $me =~ s|.*/||;
    our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
    unshift(@INC, $home);
}

$SIG{INT} = sub { print "Caught sig INT\n"; exit 2 };

######################################################################

use UtilsHelp;

my %args = ();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-test' && scalar @ARGV > 1)
    { shift (@ARGV); $args{TEST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-duration' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DURATION} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-delay' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DELAY} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-period' && scalar @ARGV > 1)
    { shift (@ARGV); $args{PERIOD} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else 
    { last; }
}

if (@ARGV || !$args{DBCONFIG} || !$args{TEST} )
{
    die "RunTest- Sorry, you're missing parameters, use -h for help.\n";
}

(new Tool (%args))->process();

######################################################################
package Tool; use strict; use warnings; use base 'Exporter';
# Define any more 'use's here.
use UtilsLogging;
use UtilsJobManager;
use POSIX;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (DBCONFIG => undef,
		  TEST => undef,
		  DURATION => 60,
		  DELAY => 0,
		  PERIOD => 1);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub process 
{
    my $self = shift;

    &logmsg( "Running test $self->{TEST}" );
    $self->runSQL( "prep" );

    my $mgr = new UtilsJobManager (NJOBS => 2);
    &logmsg( "Starting job queue" );
    $mgr->addJob( sub { },
		  { TIMEOUT => 600 }, 
		  "./Master","-config","$self->{TEST}/Config","-delay","$self->{DELAY}",
		  "start","all" );
    $mgr->addJob( sub{ $self->collectResult($mgr,"logs/test",@_) },
		  { TIMEOUT => 600 },
		  "sh","-c","./$self->{TEST}/TheTest -db $self->{DBCONFIG} -test $self->{TEST} -duration $self->{DURATION} -delay $self->{DELAY} -period $self->{PERIOD} > logs/test 2>&1");

    while (@{$mgr->{JOBS}})
    {
        $mgr->pumpJobs();
        select (undef, undef, undef, .1);
    }

    $self->stopAgents();
    $self->runSQL( "clean" );
}

sub collectResult 
{
    my ($self, $mgr, $output, $job) = @_;

    if ($job->{STATUS}) {
        &logmsg( "Job running @{$job->{CMD}} has had a problem: $job->{STATUS}" );
    }
    else 
    {
        open (IN, "< $output") or die "$output: cannot open: $!\n";
        while(<IN>) {
            print "$_";
        }
        close (IN) or die "$output: cannot read: $!\n";
#        unlink $output;
    }
}

sub runSQL {
    my ( $self, $stage ) = @_;

    system( "./ExecuteSQL -db $self->{DBCONFIG} -test $self->{TEST} -stage $stage" );
}

sub stopAgents {
    my $self = shift;

    &logmsg( "Stopping agents" );
    system( "./Master -config $self->{TEST}/Config stop all -delay 0");

    sleep( 5 );
}


