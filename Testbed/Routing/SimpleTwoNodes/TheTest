#!/usr/bin/env perl

BEGIN {
    use strict; use warnings;
    our $me = $0; $me =~ s|.*/||;
    our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../../Toolkit/Common";
    unshift(@INC, $home);
}

######################################################################

use UtilsHelp;

# FIXME: should be able to determine which test it is from the directory it's in!

my %args = ();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-test' && scalar @ARGV > 1)
    { shift (@ARGV); $args{TEST} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else 
    { last; }
}

if (@ARGV || !$args{DBCONFIG} || !$args{TEST})
{
    die "Sorry, you're missing parameters, use -h for help.\n";
}

(new Tool (%args))->process();

######################################################################
package Tool; use strict; use warnings; use base 'Exporter';
# Define any more 'use's here.
use UtilsDB;
use UtilsLogging;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (DBCONFIG => undef,
                  TEST => undef);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub process 
{
    my $self = shift;

    my $dbh = undef; $dbh = &connectToDatabase ($self,0) or die "failed to connect";
    eval {
        $self->testLoop( $dbh );
    };
    do { &alert ("Problem in test loop: $@") } if $@;
    $dbh->disconnect();
#    &disconnectFromDatabase ($self, $dbh);
}

sub testLoop {
    my ($self, $dbh) = @_;

    # First we check the database against expected contents
    my @idealTable = ();
    open ( IDEAL, "$self->{TEST}/idealtable.txt" );
    while (<IDEAL>) {
        chop;
        push( @idealTable, $_ );
    }
    close( IDEAL );

    my @actualTable = ();
    
    my $sql = "select from_node,to_node,gateway,hops
	    from t_routing
	    where to_node like 'Tim-%'";
    my $query = $dbh->prepare($sql);
    $query->execute();
    while (my @row = $query->fetchrow())
    {
	push( @actualTable, "@row" );
    }
    $query->finish();

    my $count = 0;
    my $tableCompFailed = 0;
    foreach my $row ( @actualTable ) {
	if ( $row ne $idealTable[$count] ) {
	    print "$row\t$idealTable[$count]\n";
	    $tableCompFailed = 1;
	}
	$count++;
    }

    # Now we check the logs
    system( "touch logs/last-router-a logs/last-router-b" );

    my $deadlockFailed = 0;
    open ( LOG, "diff logs/router-a logs/last-router-a |" );
    while(<LOG>) {
	if (/deadlock/) {
	    $deadlockFailed = 1;
	}
    }
    close( LOG );
    open ( LOG, "diff logs/router-b logs/last-router-b |" );
    while(<LOG>) {
        if (/deadlock/) {
            $deadlockFailed = 1;
        }
    }
    close( LOG );

    system( "rm logs/last-router-a" );
    system( "cat logs/router-a > logs/last-router-a" );
    system( "rm logs/last-router-b" );
    system( "cat logs/router-b > logs/last-router-b" );


    if ( $tableCompFailed == 1 ) {
        &logmsg( "Table comparison failed" );
    }
    if ( $deadlockFailed == 1 ) {
        &logmsg( "Deadlock check failed" );
    }
}
