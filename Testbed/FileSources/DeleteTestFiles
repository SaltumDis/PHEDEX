#!/usr/bin/perl

# This script removes test files from the system. cd to your fake SE
# directory then run 
#
# DeleteTestFiles
#
# It works through each file in the pwd. If it's a test file it
# opens it and reads the guid. It uses the pfn to remove the entry
# from the catalogue. It then removes the file. It builds a series
# of SQL commands that allow it to remove entries from the TMDB.

$pwd = $ENV{PWD};
@sql = ();

opendir( DIR, "." ) or die "Can't open pwd...";
while( defined( $file = readdir( DIR ) ) ) {
    
    $guid = '';
    $full_path = $pwd."/".$file;
    
    if ( $file =~ /TestbedFile/ ) {
    
        print "$file\n";
    
    
        open( FILE, $file ) or die "Can't open $file";
        while( <FILE> ) {
            $guid = $_;
        }
        close( FILE );
            
            
        ($exit_value, @output) = run_command( "FCdeletePFN -p $full_path" );
        if ($exit_value == 1) {
            print "Problem deleting pfn\n@output\n";
            exit(1);
        }
        
        
        unlink( $file );
        
        
        push( @sql, "delete from t_replica_metadata where guid = '$guid'" );
        push( @sql, "delete from t_destinations where guid = '$guid'" );
        push( @sql, "delete from t_file_state where guid = '$guid'" );
        push( @sql, "delete from t_files_for_transfer where guid = '$guid'" );     
    
    
    }
    
}
close( DIR );

do_sql( "devdb9", \@sql );


# =========================================================
# Subroutines
# =========================================================

sub do_sql {
    my $dbname = shift;
    my @$sql = shift;
    
    eval {
        my $dbh;
        eval "use DBI"; $dbh = DBI->connect ("DBI:Oracle:$dbname",
    					     "CMS_TRANSFERMGMT_WRITER",
    					     "threeBagsFULL",
    					     { RaiseError => 1, AutoCommit => 1 });              

        foreach my $cmd (@$sql) {
            $dbh->do ($cmd);
        }

    	$dbh->disconnect;
    };

    if ($@) {
    	print "database operation failed: $@";
        if ($dbh) {
            $dbh->rollback;
            $dbh->disconnect;
	   }
	   exit(1);
    }
    
    return 0;    
}


sub run_command {
    my $cmd = shift;
    
    my @output = `$cmd 2>&1`;
    my $exit_value = $? >> 8;
    
    return ($exit_value,@output);
}
