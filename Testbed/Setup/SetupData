#!/usr/bin/env perl

##H Seed test database (set up with separate SQL) with a number of
##H files.
##H
##H Use: $0 -db <DBCONFIG> -datasets N_DS -blocks N_BLOCKS -files N_FILES 
##H                        [-label LABEL] [-no-subscribe]
##H
##H Parameters:
##H      db:            path to DB Config file
##H      datasets:      amount of datasets you wish to make known to the DB
##H      blocks:        amount of blocks you wish to make known to the DB
##H      count:         amount of files you wish to make known to the DB
##H      label:         identifying label for the data items, default 'TEST'
##H      no-subscribe:  don't automatically create subscriptions for the generated data

BEGIN { use strict; use warnings; $^W=1;
	my $me = $0; $me =~ s|.*/||;
	our $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
	unshift(@INC, "$home/../../Toolkit/Common"); }

my %args;
use Getopt::Long;
use UtilsHelp;
use UtilsDB;
use UtilsTiming;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "datasets=i"  => \$args{DATASETS},
	     "blocks=i"    => \$args{BLOCKS},
	     "files=i"     => \$args{FILES},
	     "label=s"     => \$args{LABEL},
	     "open_blocks" => \$args{OPEN_BLOCKS},
	     "rotate-priority" => \$args{ROTATE_PRIORITY},
	     "no-subscribe"   => \$args{NOSUBSCRIBE},
	     "nodes=s"     => sub { push @{$args{NODES}},
				    split m|,|, $_[1] },
    	     "help|h"      => sub { &usage() });

$|=1;
my $checksum = 1;
my $filesize = int((1 + rand(1)) * (1024**3)); # Between 1 and 2 GB

if (! $args{DBCONFIG} || ! $args{DATASETS} || ! $args{BLOCKS} || ! $args{FILES})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $files = $args{FILES};
my $blocks = $args{BLOCKS};
my $datasets = $args{DATASETS};
my $label = $args{LABEL} || "TEST";
my $open_blocks = $args{OPEN_BLOCKS} ? 'y' : 'n';
my $rotate_priority = $args{ROTATE_PRIORITY} ? 1 : 0;
my $subscribe = $args{NOSUBSCRIBE} ? 0 : 1;

my %priorities = (0 => 'HIGH', 1 => 'NORMAL', 2 => 'LOW');

my $now = &mytimeofday();
my $dbh = &connectToDatabase (\%args, 0);

eval
{
    # Get list of test nodes
    my @nodes = @{&dbexec($dbh, qq{
		      select id, name from t_adm_node
		      where name like 'TX%'})
                  ->fetchall_arrayref({})};

    # Prepare file and block injections into TMDB
    my $ifile = &dbprep($dbh, qq{
	insert /*+ append */ into t_dps_file
	(id,node,inblock,logical_name,checksum,filesize,time_create)
	values (seq_dps_file.nextval, ?, ?, ?, ?, ?, ?)});

    my $fid = 1;
    for( my $ds=1; $ds<=$datasets; $ds++)
    {
	my $dsid = undef;
	my $label1 = $label;
	my $label2 = $rotate_priority ? $priorities{$ds % 3} : $label;
        print "Dataset $ds, ";
	&dbexec($dbh, qq{
	   insert into t_dps_dataset
	   (id,dbs,name,is_open,is_transient,time_create)
	   values (seq_dps_dataset.nextval,1,:name,'n','y',:now)
	   returning id into :id},
	   ":id" => \$dsid, ":now" => $now, ":name" => "/$label1/$label2/dataset-$ds");
	print "ID $dsid: ";

        my %params;
        for( my $block=1; $block<=$blocks; $block++)
        {
	    my $node = $nodes[($ds*$datasets+$block) % scalar @nodes]{ID};
	    my $bid = undef;
	    print ".";
	    &dbexec($dbh, qq{
	        insert into t_dps_block 
	        (id,dataset,name,files,bytes,is_open,time_create)
	        values (seq_dps_block.nextval,:ds,:name,:files,:bytes,:open,:now)
	        returning id into :id},
	        ":id" => \$bid, ":now" => $now, ":ds" => $dsid,
		":name" => "/$label1/$label2/dataset-$ds#block-$block",
                ":files" => $files,
                ":bytes" => $files*$filesize,
		":open" => $open_blocks);
	    print "$bid";
	
	    for( my $f = 0; $f<$files; ++$f, ++$fid)
	    {
	        my $n = 1;
	        push(@{$params{$n++}}, $node);
	        push(@{$params{$n++}}, $bid);
	        push(@{$params{$n++}}, "/$label1/$label2/dataset-$ds/block-$block/file-$fid");
	        push(@{$params{$n++}}, "cksum:$checksum");
	        push(@{$params{$n++}}, $filesize);
	        push(@{$params{$n++}}, $now);
	    }
	}

        print " inserting files\n";
        &dbbindexec($ifile, %params);
        &dbexec($dbh, qq{
	    insert into t_xfer_file (id, inblock, logical_name, checksum, filesize)
	    (select f.id, f.inblock, f.logical_name, f.checksum, f.filesize
	     from t_dps_file f join t_dps_block b on b.id = f.inblock
	     where b.dataset = :ds)}, ":ds" => $dsid);
        &dbexec($dbh, qq{
	    insert into t_xfer_replica
	    (id, node, fileid, state, time_create, time_state)
	    (select seq_xfer_replica.nextval, f.node, f.id, 0, f.time_create, f.time_create
	     from t_dps_file f join t_dps_block b on b.id = f.inblock
	     where b.dataset = :ds)}, ":ds" => $dsid);
        $dbh->commit();
    }
    
    if ($subscribe) {
	print "Inserting subscriptions\n";
	my @priorities = $rotate_priority ? (sort keys %priorities) : (1);
	foreach $prio (@priorities) {
	    my $label1 = $label;
	    my $label2 = $rotate_priority ? $priorities{$prio} : $label;
	    &dbexec($dbh, qq{
		insert into t_dps_subscription
		    (dataset, destination, priority, is_move, is_transient, time_create)
		    select ds.id, n.id, :priority, 'n', 'n', :time_create 
                      from t_dps_dataset ds cross join t_adm_node n
		    where n.name like 'TX%' and ds.name like '/$label1/$label2/%'},
		    ":priority" => $prio,
		    ":time_create" => $now
		    );
	}
	$dbh->commit();
	print "Done\n";
    }

};
if ( $@ )
{
    chomp ($@);
    print "$@\n";
    print "Rolling back\n";
    $dbh->rollback();
}
&disconnectFromDatabase(\%args, $dbh, 1);
