-- Deploying the schema over a 3.3 schema
-- From SQLPLUS

alter table t_req_xfer add time_start float;

alter table t_dps_block add constraint uq_dps_block_dataset unique (dataset, id);
@PHEDEX/Schema/OracleCoreSubscription

-- Dump request parameters in subscription parameter table
insert into t_dps_subs_param
(id, request, 
 priority, is_custodial, user_group, 
 original, time_create)
select seq_dps_subs_param.nextval, rx.request,
       rx.priority, rx.is_custodial, rx.user_group,
       'y', r.time_create
  from t_req_xfer rx
  join t_req_request r on r.id = rx.request;

-- Copy over dataset subscriptions, linking to original parameters
insert into t_dps_subs_dataset
(destination, dataset, param, is_move, 
 time_create, time_fill_after, time_suspend_until,
 time_complete, time_done)
select s.destination, s.dataset, sp.id, s.is_move,
       s.time_create, NULL, s.time_suspend_until,
       s.time_complete, s.time_done
  from t_dps_subscription s
  join t_dps_subs_param sp on sp.request = s.request
 where s.request is not null
   and s.dataset is not null;

-- Copy over dataset subscriptions with no request
-- First create parameters (for blocks with null request too)
insert into t_dps_subs_param
(id, request, 
 priority, is_custodial, user_group, 
 original, time_create)
select seq_dps_subs_param.nextval, NULL,
       uq.*
  from (select distinct s.priority, s.is_custodial, s.user_group,
               'y', s.time_create
          from t_dps_subscription s
         where request is null) uq;

-- Now get the datasets
insert into t_dps_subs_dataset
(destination, dataset, param, is_move,
 time_create, time_fill_after, time_suspend_until,
 time_complete, time_done)
select s.destination, s.dataset, sp.id, s.is_move,
       s.time_create, NULL, s.time_suspend_until,
       s.time_complete, s.time_done
  from t_dps_subscription s
  join t_dps_subs_param sp on sp.priority = s.priority
                          and sp.is_custodial = s.is_custodial
                          and nvl(sp.user_group,-1) = nvl(s.user_group,-1)
                          and sp.time_create = s.time_create
 where s.request is null
   and s.dataset is not null;

-- Now get the block-only subscriptions with a request
insert into t_dps_subs_block
(destination, dataset, block, param, is_move,
 time_create, time_suspend_until,
 time_complete, time_done)
select s.destination, b.dataset, s.block, sp.id, s.is_move,
       s.time_create, s.time_suspend_until,
       s.time_complete, s.time_done
  from t_dps_subscription s
  join t_dps_block b on b.id = s.block
  join t_dps_subs_param sp on sp.request = s.request
 where s.request is not null
   and s.block is not null;

-- And block-only subscriptions without a request
insert into t_dps_subs_block
(destination, dataset, block, param, is_move,
 time_create, time_suspend_until,
 time_complete, time_done)
select s.destination, b.dataset, s.block, sp.id, s.is_move,
       s.time_create, s.time_suspend_until,
       s.time_complete, s.time_done
  from t_dps_subscription s
  join t_dps_block b on b.id = s.block
  join t_dps_subs_param sp on sp.priority = s.priority
                          and sp.is_custodial = s.is_custodial
                          and nvl(sp.user_group,-1) = nvl(s.user_group,-1)
                          and sp.time_create = s.time_create
 where s.request is null
   and s.block is not null;

-- Sanity check: count subscriptions of each level, they should be equal!
select count(*) from t_dps_subscription where dataset is not null;
select count(*) from t_dps_subs_dataset;
select count(*) from t_dps_subscription where block is not null;
select count(*) from t_dps_subs_block;

-- Now create new subscription parameters for those subscriptions where the current parameters
-- have been updated since the original request
-- Note: time_create is arbitrarily set to the creation time of the subscription
-- since no record of parameter updates applied through the website is available
-- Another arbitrary possibility is the update time of the block destination

insert into t_dps_subs_param 
(id, request,
 priority, is_custodial, user_group,
 original, time_create)  
select seq_dps_subs_param.nextval, uq.* from (
       select distinct sub.request,                                                                                                               
       sub.priority, sub.is_custodial, sub.user_group,  
       'n', sub.time_create 
  from t_dps_subscription sub
  left join t_dps_subs_dataset sd on sd.dataset=sub.dataset and sd.destination=sub.destination
  left join t_dps_subs_block sb on sb.block=sub.block and sb.destination=sub.destination
  join t_dps_subs_param sp on sd.param=sp.id or sb.param=sp.id 
    where sp.priority != sub.priority
    or sp.is_custodial != sub.is_custodial                                                                                               
    or nvl(sp.user_group,-1) != nvl(sub.user_group,-1)) uq;

-- Link to the new subscription parameters those dataset-level subscriptions where the current parameters        
-- have been updated since the original request
merge into t_dps_subs_dataset d using
(select sub.dataset, sub.destination, pm.id param from t_dps_subscription sub
	join t_dps_subs_dataset ds on ds.dataset=sub.dataset and ds.destination=sub.destination
	join t_dps_subs_param pm on
	  nvl(pm.request,-1) =  nvl(sub.request,-1)
	  and pm.priority = sub.priority
          and pm.is_custodial = sub.is_custodial                                                                                               
          and nvl(pm.user_group,-1) = nvl(sub.user_group,-1)                                                                                   
          and pm.time_create = sub.time_create
	join t_dps_subs_param sp on
	 sp.id=ds.param	   
	where sp.priority != sub.priority            
	 or sp.is_custodial != sub.is_custodial
	 or nvl(sp.user_group,-1) != nvl(sub.user_group,-1)) dnew on
	(d.dataset=dnew.dataset and d.destination=dnew.destination)
	 when matched then
	  update set d.param=dnew.param;

-- Link to the new subscription parameters those block-level subscriptions where the current parameters                                                   
-- have been updated since the original request
merge into t_dps_subs_block b using
 (select sub.block, sub.destination, pm.id param from t_dps_subscription sub                                                                                      
        join t_dps_subs_block ds on ds.block=sub.block and ds.destination=sub.destination                                                              
        join t_dps_subs_param pm on     
          nvl(pm.request,-1) =  nvl(sub.request,-1)  
          and pm.priority = sub.priority  
           and pm.is_custodial = sub.is_custodial  
           and nvl(pm.user_group,-1) = nvl(sub.user_group,-1)   
           and pm.time_create = sub.time_create    
         join t_dps_subs_param sp on  
          sp.id=ds.param  
         where sp.priority != sub.priority   
          or sp.is_custodial != sub.is_custodial   
          or nvl(sp.user_group,-1) != nvl(sub.user_group,-1)) dnew on    
         (b.block=dnew.block and b.destination=dnew.destination)   
          when matched then   
           update set b.param=dnew.param;

-- Sanity check: both queries should return 0; all new subscriptions should now have the same parameters as the old ones

select count(*) from t_dps_subs_dataset sd
 join t_dps_subs_param sp on sp.id=sd.param
 join t_dps_subscription sub on sub.dataset=sd.dataset
  and sub.destination=sd.destination
 where sub.is_custodial!=sp.is_custodial
  or nvl(sub.user_group,-1)!=nvl(sp.user_group,-1)
  or sub.priority!=sp.priority;

select count(*) from t_dps_subs_block sd
 join t_dps_subs_param sp on sp.id=sd.param
 join t_dps_subscription sub on sub.block=sd.block
  and sub.destination=sd.destination
 where sub.is_custodial!=sp.is_custodial
  or nvl(sub.user_group,-1)!=nvl(sp.user_group,-1)
  or sub.priority!=sp.priority;
 
-- Now, create block-level subscriptions for all blocks in a dataset-level subscription
-- note: time_complete comes from t_dps_block_dest, if available
merge into t_dps_subs_block n using
(
select sd.destination, b.dataset, b.id block, sd.param, sd.is_move,
       greatest(sd.time_create, b.time_create) time_create, sd.time_suspend_until,
       bd.time_complete, bd.time_complete time_done
  from t_dps_subs_dataset sd
  join t_dps_block b on b.dataset = sd.dataset
left join t_dps_block_dest bd on bd.block = b.id and bd.destination = sd.destination
) o on (n.destination = o.destination
        and n.dataset = o.dataset
        and n.block = o.block)
when not matched then insert
(destination, dataset, block, param, is_move,
 time_create, time_suspend_until,
 time_complete, time_done)
values
(o.destination, o.dataset, o.block, o.param, o.is_move,
 o.time_create, o.time_suspend_until,
 o.time_complete, o.time_done);

-- Sanity check: IFF the BlockAllocator was shut down after the last subscription was created,
-- then these three queries will be equal
select count(*) from t_dps_block_dest;
select count(*) from t_dps_subs_block;
select count(*) from t_dps_block_dest bd
 join t_dps_subs_block bs on bd.block=bs.block
  and bd.destination=bs.destination;

-- Sanity check: block destinations and block subscriptions should have the same parameters
-- KNOWN ISSUE: currently this is not true for custodiality, because the block destination
-- custodiality is never updated if the subscription custodiality is changed manually in the DB

select count(*) from t_dps_block_dest bd join t_dps_subs_block bs on bd.block=bs.block and bd.destination=bs.destination
join t_dps_subs_param sp on sp.id=bs.param
where bd.priority!=sp.priority;

select count(*) from t_dps_block_dest bd join t_dps_subs_block bs on bd.block=bs.block and bd.destination=bs.destination
join t_dps_subs_param sp on sp.id=bs.param
where bd.is_custodial!=sp.is_custodial;

-- Finally, update t_dps_dataset.time_fill_after to the latest block creation time
update t_dps_subs_dataset sd
   set sd.time_fill_after = 
     (select max(b.time_create) 
       from t_dps_block b
      where sd.dataset = b.dataset);
