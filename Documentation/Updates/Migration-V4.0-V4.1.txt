# Migration procedure applied to Dev instance **

# This migration should be able to be performed while site agents and web services are still active
# Central agents should be shut down for the instance, however.

# cd to a directory where the PHEDEX directory exists and there is an
# RPM installation

cd /data/DevNodes

# Source environment
source sw/slc*/cms/PHEDEX-admin/PHEDEX_*/etc/profile.d/env.sh

# Checkout the Schema revision for 4.1

cvs co -d PHEDEX_CVS/Schema -r PHEDEX_4_1_0 COMP/PHEDEX/Schema

# Set authentication for DB access
export PHEDEX_INSTANCE=Dev;
export PHEDEX_DB="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/Admin";
export PHEDEX_DB_R="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/Reader";
export PHEDEX_DB_W="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/CERN";
export PHEDEX_CON=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB});
export PHEDEX_CON_R=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_R});
export PHEDEX_CON_W=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_W});
export PHEDEX_SCHEMA=$(echo $PHEDEX_CON | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_R=$(echo $PHEDEX_CON_R | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_W=$(echo $PHEDEX_CON_W | perl -p -e 's|/.*$||')
env | egrep 'PHEDEX_(DB|CON|SCHEMA)';

# Get rid of X tables
sqlplus -S $PHEDEX_CON @PHEDEX_CVS/Schema/OracleResetOld.sql </dev/null

# Connect to DB using SQLPlus
sqlplus $PHEDEX_CON

-- Deploying the schema over a 4.0 schema
-- From SQLPLUS

set serveroutput on size 100000;
set timing on;
spool migration.sqllog

# Backup old t_log_block_latency table;
rename t_log_block_latency to xt_log_block_latency;

BEGIN
   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE constraint_name NOT LIKE 'X%'
        AND constraint_name NOT LIKE 'SYS%'
        AND constraint_name LIKE '%_STATUS_BLOCK_LATENCY%')
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
	  || ' rename constraint ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE index_name NOT LIKE 'X%'
        AND index_name NOT LIKE 'SYS%'
        AND index_name LIKE '%_LOG_BLOCK_LATENCY%')
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
	  || ' rename to X' || substr (o.name, 1, 29);
   END LOOP;
END;
/

-- recreate t_log_block_latency table

create table t_log_block_latency
  (time_update		float		not null,
   destination		integer		not null,
   block		integer			, -- block id, can be null if block remvoed
   files		integer	       not null, -- number of files
   bytes		integer	    not null, -- block size in bytes
   priority		integer	 not null, -- t_dps_block_dest priority
   is_custodial		char (1)  not null, -- t_dps_block_dest custodial
   time_subscription	float	       not null, -- time block was subscribed
   block_create		float	    not null, -- time the block was created
   block_close		float	      , -- time the block was closed
   first_request	float		   , -- time block was first routed (t_xfer_request appeared)
   first_replica	float		   , -- time the first file was replicated
   latest_replica	float		, -- time when a file was most recently replicated
   percent25_replica	float		   , -- time the 25th-percentile file was replicated
   percent50_replica	float		  , -- time the 50th-percentile file was replicated
   percent75_replica	float		    , -- time the 75th-percentile file was replicated
   percent95_replica	float		   , -- time the 95th-percentile file was replicated
   last_replica		float		 , -- time the last file was replicated
   last_suspend		float		   , -- time the block was last observed suspended
   partial_suspend_time	float		 , -- seconds the block was suspended since the creation of the latest replica
   total_suspend_time	float		 , -- seconds the block was suspended since the start of the transfer
   latency		float		 , -- current latency for this block
   --
   constraint fk_status_block_latency_dest
     foreign key (destination) references t_adm_node (id),
   --
   constraint fk_status_block_latency_block
     foreign key (block) references t_dps_block (id)
     on delete set null,
   --
   constraint ck_status_block_latency_cust
     check (is_custodial in ('y', 'n'))
  );

create index ix_log_block_latency_update
  on t_log_block_latency (time_update);

create index ix_log_block_latency_dest
  on t_log_block_latency (destination);

create index ix_log_block_latency_block
  on t_log_block_latency (block);

create index ix_log_block_latency_subs
  on t_log_block_latency (time_subscription);

-- fill old latency table into new table
-- NOTE: the BlockLatency SQL was not updating files/bytes counts for blocks that were still open when the transfer started,
-- NOTE: therefore the number of files/bytes transferred in the block is systematically underestimated in this case.
-- NOTE: For this reason, we increase the files/bytes count if we notice that more files were injected into the block after
-- NOTE: the creation of the entry in the latency table. This might not be the actual number of files that were transferred
-- NOTE: in the block at the time, if the block was updated after closure (invalidating some files, or reopening and injecting more files),
-- NOTE: but it is correct or closer to the correct value in most cases
-- NOTE2: for block_close (the block closure time) our only estimate is the last block time_update, assuming that the block wasn't
-- NOTE2: updated again after closure (invalidating some files, or reopening and injecting more files). We still use this estimate, because
-- NOTE2: the block_close time isn't used in the latency calculation (it's only logged to find out how much time passed AFTER the transfer of the last replica
-- NOTE2: before the block was actually visible for the processing system)
-- NOTE3: suspend_time is historically bugged and can cause negative latencies in special edge cases, but we don't attempt to correct
-- NOTE3: the historical values because we don't have all information available.

insert /*+ append */ into t_log_block_latency
(time_update, destination, block, files, bytes, priority, is_custodial, time_subscription,
   block_create, block_close, first_request, first_replica, last_replica, last_suspend, total_suspend_time, latency)
select xl.time_update, xl.destination, xl.block, greatest(xl.files,nvl(b.files,0)), greatest(xl.bytes,nvl(b.bytes,0)),
   xl.priority, xl.is_custodial, xl.time_subscription,
   xl.block_create, decode(b.is_open,'n',b.time_update,'y',NULL), xl.first_request, xl.first_replica, xl.last_replica,
   xl.last_suspend, xl.suspend_time, xl.latency from xt_log_block_latency xl left join t_dps_block b on b.id=xl.block;

commit;

-- cross check old/new latency tables

select count(*) from t_log_block_latency;
select count(*) from xt_log_block_latency;

-- These values are expected to be the same
select sum(time_update),sum(destination),sum(block),sum(priority),sum(decode(is_custodial,'y',1,'n',2,NULL,3)),
 sum(time_subscription), sum(block_create), sum(first_request),
 sum(first_replica),sum(last_replica),sum(suspend_time),sum(latency) from xt_log_block_latency;
select sum(time_update),sum(destination),sum(block),sum(priority),sum(decode(is_custodial,'y',1,'n',2,NULL,3)),
 sum(time_subscription), sum(block_create), sum(first_request),
 sum(first_replica),sum(last_replica),sum(total_suspend_time),sum(latency) from t_log_block_latency;
-- These values are NOT expected to be the same
select sum(block),sum(files) from xt_log_block_latency;
select sum(block),sum(files) from t_log_block_latency;

-- Increase the schema_version
create or replace function schema_version return varchar is
  result varchar(20);
begin
  return('4.1.0');
end schema_version;

select schema_version from dual;

quit;

-- If you're running on Testbed, you're done here, otherwise remember to run
-- the following scripts in a shell
-- PHEDEX_SCHEMA,PHEDEX_SCHEMA_R,PHEDEX_SCHEMA_W : the Admin, Reader, Writer user name (DB instance name)
-- PHEDEX_CON,PHEDEX_CON_R,PHEDEX_CON_W) : the Admin, Reader, Writer connection ID as returned by PHEDEX/Utilities/OracleConnectId

-- Create synonmys
PHEDEX_CVS/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_R
PHEDEX_CVS/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_W

-- Create privileges
PHEDEX_CVS/Schema/OraclePrivs.sh $PHEDEX_CON $PHEDEX_SCHEMA_R $PHEDEX_SCHEMA_W

