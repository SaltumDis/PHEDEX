#!/usr/bin/perl -Tw

BEGIN {use strict; use warnings;}
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use IO::Capture::Stdout;
use DBI;
use POSIX;

my %db = ();
open (DBCONF, "< /afs/cern.ch/cms/aprom/phedex/DBAccessInfo/dbconf") || die "Failed to read database confiugration file";
while(<DBCONF>) {
    chomp;
    my @args = split(/\s+/);
    if (scalar(@args) >= 2) {
        $db{$args[0]} = $args[1];    
    }
}

my $cgi = new CGI;
$cgi->param('page','status') if !$cgi->param('page');

runme();

sub runme
{
    #Select page we are visting to generate its contents
    my @pageinfo = (['status',     \&status,     "Heartbeat Status"],
                    ['viewlog',    \&viewLog,    "Heartbeat Log View"],
                    ['ostatus',     \&ostatus,   "Overall Status of Heartbeat"],
                    ['heartbeatQuality', \&heartbeatQuality, "Quality Graph for Heartbeat"],
                    ['statusHisto',  \&statusHisto,   "Heartbeat Status History"]);

    my %pagemap = map{ $pageinfo[$_][0] => $_} 0..$#pageinfo;
    my $pagename = param('page');
    my $page = ($pagename && exists $pagemap{$pagename} ? $pagemap{$pagename} : 0);
    my $pagename = $pageinfo[$page][0];
    my $template = do { local $/; undef $/; <DATA> };
    my $replacements = {

        'CONTENT' => '',
        'PAGETITLE' => $pageinfo[$page][2],
        'TIME' =>  strftime ("%Y-%m-%d %H:%M:%S GMT", gmtime(time())),                                
    };
    
    $capture = new IO::Capture::Stdout;
    $capture->start();
    eval
    {
        #Connect to the database, create the page
        my $connectionInfo;
	$connectionInfo = "DBI:mysql:database=$db{'database'};$db{'host'};$db{'port'}";
        my $dbh = DBI -> connect( $connectionInfo, $db{'user'}, $db{'password'} );
        &{$pageinfo[$page][1]} ($dbh);
	$dbh->disconnect();
    };

    if ($@)
    {
         my $message = &escapeHTML($@);
         print "<div align=left>\n",
               "<p>OOPS BAD SERVER</p>\n",
	       "<p><i>$@</i></p>\n",
               "</div>\n";
    }
    
    $capture->stop();
    $replacements->{CONTENT}=join("\n",$capture->read());
    if($pagename ne "heartbeatQuality") {

        #Lets create some warnings (Latest news from our site).
        $capture -> start();
        eval {
            my $connectionInfo;
            $connectionInfo = "DBI:mysql:database=$db{'database'};$db{'host'};$db{'port'}";
            my $dbh = DBI -> connect($connectionInfo, $db{'user'}, $db{'password'});
	    warnings($dbh);
            $dbh -> disconnect();
        };

        if ($@)
        {
            my $message = &escapeHTML($@);
            print "<div align=left>\n",
                  "<p> OOPS BAD SERVER</p>\n",
                  "<p><i>$@</i></p>\n",
                  "</div>\n";
        }

        $capture->stop();
        $replacements->{WARNINGS}=join("\n",$capture->read());
    } else {
        $replacements->{WARNINGS}="";
    }

    while (my ($key, $value) = each %$replacements)
    {
         $template=~ s/\@$key\@/$value/g;
    }    
    
    print $cgi->header();
    print $template;
}
# Gives an overall status of Heartbeat including number for up/down sites with their listings.
sub ostatus {

    my $dbh = shift;

    my $totalLinks = qq{SELECT site1.timestamp,site1.log_id,site1.source_site,site1.destin_site,site1.logstatus,
                        site1.tool from site_logs as site1,
                        (SELECT MAX(timestamp) as timestamp,source_site,destin_site,tool FROM site_logs 
                        GROUP BY source_site,destin_site,tool) AS site2  
                        WHERE site1.timestamp=site2.timestamp AND site1.source_site=site2.source_site 
                        AND site1.destin_site=site2.destin_site AND site1.tool=site2.tool};

    my $linksUp    = qq{SELECT site1.timestamp,site1.log_id,site1.source_site,site1.destin_site,site1.logstatus,
                        site1.tool from site_logs as site1,
                        (SELECT MAX(timestamp) as timestamp,source_site,destin_site,tool  FROM site_logs 
                        GROUP BY source_site,destin_site,tool) AS site2  
                        WHERE site1.timestamp=site2.timestamp AND site1.source_site=site2.source_site 
                        AND site1.destin_site=site2.destin_site AND site1.tool=site2.tool AND site1.logstatus='OK'};

  
    my $linksDown =   qq{SELECT site1.timestamp,site1.log_id,site1.source_site,site1.destin_site,site1.logstatus,
                         site1.tool from site_logs as site1,
                         (SELECT MAX(timestamp) as timestamp,source_site,destin_site,tool FROM site_logs 
                         GROUP BY source_site,destin_site,tool) AS site2  
                         WHERE site1.timestamp=site2.timestamp AND site1.source_site=site2.source_site 
                         AND site1.destin_site=site2.destin_site AND site1.tool=site2.tool AND site1.logstatus='NOK'};
    
    my $sthlinks = $dbh -> prepare ($totalLinks);
    my $c_totalLinks = 0;
    $sthlinks -> execute();
    $c_totalLinks = $sthlinks -> rows;
    
    $sthlinksUp = $dbh -> prepare ($linksUp);
    my $c_linksUp = 0;
    $sthlinksUp -> execute();
    $c_linksUp = $sthlinksUp -> rows;
    
    $sthlinksDn = $dbh -> prepare ($linksDown);
    my $c_linksDown = 0;
    $sthlinksDn -> execute();
    $c_linksDown = $sthlinksDn -> rows;
  
    print "<center><table  width=80%>";
    print "<tbody>";
    #Call the php script to draw a pie graph.

    print "<tr><td><img src='",
          "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/heartbeat-status.php?t=$c_totalLinks&u=$c_linksUp&d=$c_linksDown",
          "'></td></tr>",
          "</tbody>",
          "</table></center>";   

    # Overal Status in Tabular form. This includes listing of Up/Dn sites.
    # Sites Up.

    print "<br><p><h3><u>Links Up<u></h3></p><br><p><table class='striped' widht=80%>",
          "<tbody><tr class=selected>",
          "<th>No.</th>",
          "<th>Source Site</th>",
          "<th>Destination Site</th>",
          "<th>Tool</th></tr>";
    
    $sthlinksUp -> bind_columns(undef, \$timestamp, \$logid, \$source, \$destin, \$logstatus, \$tool);
    while ($sthlinksUp -> fetch()) {
        print "<tr>",
              "<td></td>",
              "<td>$source</td>",
              "<td>$destin</td>",
              "<td>$tool</td>",
              "</tr>";
    }
    print "</table>";
    print "<br><p><h3><u>Links Down</u></h3></p><p><br><table class='striped' widht=80%>",
          "<tbody><tr class=selected>",
          "<th>No.</th>",
          "<th>Source Site</th>",
          "<th>Destination Site</th>",
          "<th>Tool</th></tr>";

    $sthlinksDn -> bind_columns(undef, \$timestamp, \$logid, \$source, \$destin, \$logstatus, \$tool);
    while ($sthlinksDn -> fetch()) {
        print "<tr>",
              "<td></td>",
              "<td>$source</td>",
              "<td>$destin</td>",
              "<td>$tool</td>",
              "</tr>";
    }
    print "</table>";

}
# Show the log in tabular form provided with the log id
sub viewLog {

    my $dbh = shift;
    my $logid = param('id');   

    if (! $logid) {
        print "No Log id was specified";
        return;
    } elsif($logid !~ /^[0-9]+$/) {
       print "Log id format not correct";
       return;
    }

    my $query = qq{select source_site,destin_site,tool,timestamp,logfile,sizeLog,removeLog from site_logs where log_id = ?};     
    my $sth = $dbh -> prepare($query);
    $sth -> bind_param(1, $logid);
    $sth -> execute();
    my ($source,$destin,$tool,$timestamp,$logfile,$logSize,$logRemove); 
    $sth -> bind_columns(undef, \$source, \$destin, \$tool, \$timestamp, \$logfile, \$logSize, \$logRemove);
    $sth -> fetch();
    $logfile =~ s/\&/<br>/g;
    $logSize =~ s/\&/<br>/g;
    $logRemove =~ s/\&/<br>/g;
    $transferTime = gmtime($timestamp);

    print "<p><table class='striped' width=80%>\n",
          "<tbody>\n",
          "<tr>\n",
          "<td>Source Site</td>\n",
          "<td>$source</td></tr>\n",
          "<tr><td>Destin Site</td>\n",
          "<td>$destin</td></tr>\n",
          "<tr><td>Tool</td>\n",
          "<td>$tool</td></tr>\n",
          "<tr><td>Time</td>\n",
          "<td>$transferTime</td></tr>\n",
          "<tr><td>Log File</td>\n",
          "<td>$logfile</td></tr>\n",
          "<tr><td>File Size Log</td>\n",
          "<td>$logSize</td></tr>\n",
          "<tr><td>File Remove Log</td>\n",
          "<td>$logRemove</td></tr><table>\n";
}

sub status {

    my $dbh = shift;
    # Parameters for applying filters
    my $qtool = param('tool');
    my $ssite = param('ssite');
    my $dsite = param('dsite');    

    my $query = qq{SELECT site1.timestamp,site1.log_id,site1.source_site,site1.destin_site,
                   site1.logstatus,site1.tool FROM site_logs AS site1,
                   (SELECT MAX(timestamp) AS timestamp,source_site,destin_site,tool 
                   FROM site_logs GROUP BY source_site,destin_site,tool) as site2 
                   WHERE site1.timestamp=site2.timestamp AND site1.source_site=site2.source_site 
                   AND site1.destin_site=site2.destin_site and site1.tool=site2.tool};

    my $countParam = 0;
    my @params;

    if ($qtool || $ssite || $dsite) {        
         
        $tempquery = qq{Select * FROM ($query) as filter WHERE };
        my $conjunct = "";
        if ($qtool) {
            $qtool =~ s/\*/\%/g;
            
            $tempquery .= qq{filter.tool LIKE ?};
            $countParam++;
            $params[$countParam] = $qtool;
            $conjunct = "AND";
        }
        if ($ssite) {
            $ssite =~ s/\*/\%/g;
            $tempquery .= qq{$conjunct filter.source_site LIKE ? };
            $countParam++;
            $params[$countParam] = $ssite;
            $conjunct = "AND";
        }
        if ($dsite) {
            $dsite =~ s/\*/\%/g;
            $tempquery .= qq{$conjunct filter.destin_site LIKE ?};
            $countParam++;
            $params[$countParam] = $dsite;
            $conjunct = "AND";
        }
        $query = $tempquery;
    }

    my $sth = $dbh -> prepare ($query);

    for (my $index = 1; $index<4; $index++) {
        if($params[$index]) {
            $sth -> bind_param($index, $params[$index]);
        }
    }

    $sth -> execute();
    my ($sourceSite, $logID, $timestamp, $destinSite, $tool, $status);
    # This timestamp will be used to calculate the last time when did the log arrived
    $sth -> bind_columns(undef,\$timestamp,\$logID,\$sourceSite,\$destinSite,\$status,\$tool);
    print "<p> <form name=heartbeat action='/heartbeat/cgi-bin/browser?page=status'>\n",
          "<table><tr colspan=2><td>Apply Filter</td></tr>\n",
          "<tr><td>Source Site</td><td><input type=text name=ssite></td></tr>\n",
          "<tr><td>Destination Site </td><td><input type=text name=dsite></td></tr>\n",
          "<tr><td>Tool</td><td><input type=text name=tool></td></tr>\n",
          "<tr align=center><td colspan=2><input type=submit name=submit value='Update'></td></tr>\n",
          "</table></form><br><hr></p>\n";

    print "<br><center><table class='striped' width=80%>\n",
          "<tbody>\n",
          "<tr class='selected'>\n",
          "<th>Source Site</th>\n",
          "<th>Destination Site</th>\n",
          "<th>Tool</th>\n",
          "<th>Current Status </th>\n",
          "<th>Down Time </th>\n",
          "<th>Latest Update  </th>\n",
          "<th>Log </th>\n",
          "</tr>\n";

    while ( $sth -> fetch() ) {
        print "<tr>\n",
              "<td> $sourceSite </td>\n",
              "<td> $destinSite </td>\n",
              "<td> $tool </td>\n";
        if ( $status eq 'NOK' ) {
            $downt = downTime ($dbh, $sourceSite, $destinSite, $tool);
            $dispt = calcTime ($downt);
            if ((time() - $timestamp) >= 10800 ) {
                print  "<td bgcolor='orange'> DOWN/Doubt </td>\n";           
            } else {
                print "<td bgcolor='red'>DOWN</td>\n";
            }                            
            print "<td>$dispt </td>\n",
        } else {
            if((time() - $timestamp) >= 10800) {
                print "<td bgcolor='orange'> UP/Doubt </td>\n";
            } else {
                print "<td bgcolor='green'> UP </td>\n";
            } 
            print "<td> N/A </td>\n";
        }

         my $lastlog = gmtime($timestamp);
         print "<td> $lastlog </td>\n"; 
         print "<td><a href=/heartbeat/cgi-bin/browser?page=viewlog&id=$logID>View Log</a></td>\n";
         print   "</tr>\n";
    }
    print "</table></center>\n";    
}


# This calculates the total time for which a link is down. Its based on the difference of last ok logstatus
# or the last time the server recvd the logging information if no ok log found from the database to the current 
# time. 

sub downTime {
     
    my ($dbh, $sourceSite, $destinSite, $tool)  = @_;

    if($tool && $tool ne "srmcp" && $tool ne "globus-url-copy") {
        print "Please specify the correct tool name";
        return;
    }

    $query = qq{SELECT min(timestamp) from site_logs WHERE source_site='$sourceSite' AND destin_site='$destinSite'
                AND tool='$tool' AND logstatus='NOK' AND timestamp >= (SELECT max(timestamp) from site_logs 
                WHERE source_site='$sourceSite' AND destin_site='$destinSite' AND tool='$tool' AND logstatus='OK')};

    my $sth = $dbh -> prepare( $query );
    $sth -> execute();
    my $maxTimestamp;
    $sth -> bind_columns( undef, \$maxTimestamp);
    if( $sth -> fetch() ) {         
	if($maxTimestamp) {
             return $maxTimestamp;
         }                    
    } 

    # We got here because there was no timestamp regarding this link which has an OK status.
        
    $query = qq{SELECT min(timestamp) from site_logs 
                WHERE source_site='$sourceSite' AND destin_site='$destinSite' AND tool='$tool'};

    $sth = $dbh -> prepare( $query );
    $sth -> execute();
    $sth -> bind_columns( undef, \$minTimestamp);
    if( $sth -> fetch() ) {
	return $minTimestamp;
       
    } 
    return -1;        
    
}

sub calcTime {

    my $downTime = shift;
    my ($day, $hour, $min);
    my $time = '';
    my $totalTime = time() - $downTime;
    if( $totalTime < 60 ) {
        $time = "< 1 min ";
    } else {
        $min = int( $totalTime / 60 );
        if( $min >= 60 ) {
            $hour = int( $min / 60 );
            if( $hour >= 24 ) {
                $day = int( $hour / 24 );
                $hour = int( $hour % 24 );
                $time = "$day d,";
            }
            $min = int( $min % 60 );
            $time .= "$hour h,$min m";
        } else {
            $time ="$min mins";
        }
   }   
   return $time
}

# This method shows the graphical view of hourly status of selected sites
sub heartbeatQuality
{
    my $now = time();
    my $dbh = shift;
    my @plotorder = qw(l48h l72h l96h l132h l7d l14d l30d l90d l6w ad aw am);
    my %plots = ("l48h"  => ["Last 48 Hours" ],
                 "l72h"  => ["Last 72 Hours" ],
	         "l96h"  => ["Last 96 Hours" ],
	         "l132h" => ["Last 132 Hours" ],
	         "l7d"   => ["Last 7 Days" ],
	         "l14d"  => ["Last 14 Days" ],
	         "l30d"  => ["Last 30 Days" ],
	         "l90d"  => ["Last 90 Days" ],
		 "l6w"   => ["Last 6 Weeks" ],
	         "ad"    => ["Daily Since Start" ],
		 "aw"    => ["Weekly Since Start" ],
		 "am"    => ["Monthly Since Start" ]);

    my %tools = ("srmcp" =>["srmcp"],
                 "globus-url-copy" => ["globus-url-copy"]);  

    my $source = param('source');
    my $tool = param('tool');
    my $filter = param('filter');   
    $filter = "$plotorder[0]" if(!$filter || !exists $plots{$filter});
    $source = "castorgrid.cern.ch" if(!$source);
    $now = time();
    $tool = "srmcp" if(!$tool || !exists $tools{$tool});
    #GRAPH
 
    my $query = "SELECT DISTINCT(source_site) FROM site_logs";
    my $sth = $dbh -> prepare ($query);
    $sth -> execute();
    my $sites;
    $sth -> bind_columns(undef, \$sites);
    
    print "<p><form method='GET' action='browser?page=heartbeatQuality'>",
          "<input type=hidden name=page value='heartbeatQuality'>",
          "<center><table>",
          "<tr><td>Select site:</td>",
          "<td><select name='source'>";    
 
    while ($sth -> fetch()) {
        print "<option ", ($sites eq $source ? 'selected=selected' : ''),
              "  value=$sites>$sites</option>";
    }

    print "</select></td>",
          "<td> tool: </td>",
          "<td><select name='tool'>";

    foreach my $t (keys %tools) {
        print "<option ",($t eq $tool ? 'selected=selected':''),
              " value=$t>$tools{$t}[0]</option>";
    }
    print "</select></td>",
          "<td>filter</td>",
          "<td><select name='filter'>";
    
    foreach my $p (@plotorder) {
        print "<option ",($filter eq $p ? 'selected=selected' : ''),
              " value ='$p'> $plots{$p}[0]</option>";
    }
    
    print "</select></td>",
          "<td><input type=submit value=Update></td></tr>",
          "</table><br><hr>";

    if ($tool) {
    
        if($tool ne "srmcp" && $tool ne "globus-url-copy") {
            print "Please specify correct tool";
            return;
        }
    }

    print "<img src='",
          "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/heartbeat-quality.php?source=$source&tool=$tool&filter=$filter",
          "'>";
    # The bar charts for attempted, successful and failed transfers will only be shown if the filtering is not based on hours
    if($filter !~ m/h$/) {

        print "<br><br><img width=900 height=400 src='",
               "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/heartbeat-quality-graph.php?source=$source",
               "&tool=$tool&filter=$filter&type=attempted",
	       "'>",
               "<br><br><img width=900 height=400 src='",
               "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/heartbeat-quality-graph.php?source=$source",
               "&tool=$tool&filter=$filter&type=success",
               "'>",
               "<br><br><img width=900 height=400 src='",
               "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/heartbeat-quality-graph.php?source=$source",
               "&tool=$tool&filter=$filter&type=failure",
               "'>";
    }
    
}

#History Status.
sub statusHisto {

    my $dbh = shift;
    my %days =  ("1" =>  "604800",
                 "2" =>  "518400" ,
	         "3" =>  "432000" ,
	         "4" =>  "345600" ,
	         "5" =>  "259200" ,
	         "6" =>  "172800" ,
	         "7" =>  "86400" );	         

    my $query = qq{SELECT DISTINCT(source_site) FROM site_logs};
    my $sth = $dbh -> prepare ($query);
    $sth -> execute();
    my $sites;
    $sth -> bind_columns(undef, \$sites);

    my $source    = param('source');
    my $destin    = param('destin');
    my $startTime = param('start');
   

    print "<p><form method='GET' action='browser?page=statusHisto'>",
          "<input type=hidden name=page value='statusHisto'>",
          "<center><table>",
          "<tr><td>Select site:</td>",
          "<td><select name='source' onChange=submit()>";      
 
    while ($sth -> fetch()) {
        print "<option ", ($sites eq $source ? 'selected=selected' : ''),
              "  value=$sites>$sites</option>";
    }

    print "</select></td>";
      
    if($source) {
        my $query = qq{SELECT source_site,destin_site,tool FROM site_logs where source_site=? group by destin_site,tool};
        my $sth = $dbh -> prepare ($query);
        $sth -> bind_param(1, $source);
        $sth -> execute();
        my $ssites,$dsites,$tool;
        $sth -> bind_columns(undef, \$ssites, \$dsites, \$tool);
	print "<td> Destination: </td>",
              "<td><select name='destin'>";

        while($sth->fetch()) {
            print "<option ", ("$dsites:$tool" eq $destin ? 'selected=selected' : ''),
                 "  value=$dsites:$tool>$dsites $tool</option>";
        }
        print "</select></td>";
    }
    
    print "<td><input type=submit value=Update></td></tr>",
          "</table><br><hr></form>";   
    @res    = split /:/, $destin;	
    $destin = $res[0];
    $tool   = $res[1];
    my $now; #starting time 
    if($source && $destin && $tool) {

        if($startTime) {
 
            if($startTime !~ /^[0-9]+$/) {
                print "Filter specified was incorrect";
                return;
            }
            $now = $startTime;

        } else {

            $now = time();
        }

        my $range = $now - 604800;

        my $query = qq{SELECT log_id,logstatus,timestamp FROM site_logs WHERE source_site=? 
                       AND destin_site=? AND tool=? AND timestamp>=? ORDER BY timestamp};       

        my $sth = $dbh -> prepare($query);

        $sth -> bind_param(1, $source);
        $sth -> bind_param(2, $destin);
        $sth -> bind_param(3, $tool);
        $sth -> bind_param(4, $range);

        $sth -> execute();
        my ($logstatus,$timestamp);
        my %timestamps = ();
        my $logids = ();
        my @status;
        $sth -> bind_columns(undef,\$logid, \$logstatus, \$timestamp);        
        while ($sth -> fetch()) {          
           $timestamps{$timestamp} = $logstatus;    
           $logids{$timestamp} = $logid;
        }
        foreach $key (sort keys %timestamps) {
            #identify which day of the week it is
            $weekDay1 = $now - $days{1};
            $weekDay2 = $now - $days{2};
            $weekDay3 = $now - $days{3};
            $weekDay4 = $now - $days{4};
            $weekDay5 = $now - $days{5};
            $weekDay6 = $now - $days{6};
            $weekDay7 = $now - $days{7};

            #Categorise the time in days of week
	    if($key gt $weekDay1 && $key le $weekDay2){              
                $hour = ($#{$status[0]} == -1 ? 0: $#{$status[0]}+1);
                $status[0][$hour] = $key;
            } elsif ($key gt $weekDay2 && $key le $weekDay3) {
                $hour = ($#{$status[1]} == -1 ? 0: $#{$status[1]}+1);
                $status[1][$hour] = $key;
            } elsif ($key gt $weekDay3 && $key le $weekDay4) {
                $hour = ($#{$status[2]} == -1 ? 0: $#{$status[2]}+1);
                $status[2][$hour] = $key;
            } elsif ($key gt $weekDay4 && $key le $weekDay5) {
                $hour = ($#{$status[3]} ==  -1 ? 0: $#{$status[3]}+1);
                $status[3][$hour] = $key;
            } elsif ($key gt $weekDay5 && $key le $weekDay6) {
                $hour = ($#{$status[4]} ==  -1 ? 0: $#{$status[4]}+1);
                $status[4][$hour] = $key;
            } elsif ($key gt $weekDay6 && $key le $weekDay7) {
                $hour = ( $#{$status[5]} == -1 ? 0: $#{$status[5]}+1);
                $status[5][$hour] = $key;
            } elsif ($key gt $weekDay7) {
                $hour = ($#{$status[6]} == -1 ? 0: $#{$status[6]}+1);
                $status[6][$hour] = $key;
            }
        }      
        
        my @historyStatus;
        my @timeRange;
        my $flag = 1;
        for ($i=1; $i<=7; $i++) { 
            for ($j=0; $j<=23; $j++) {
                # Selects log based on hour's difference. In case of multiple logs within an hour the most recent
                # log entry will be used. i
                my $hourofDay1 = ($now - $days{$i}) + (60*60*($j));
                my $hourofDay2 = ($now - $days{$i}) + (60*60*($j+1));

                if($flag) {

                    $hour = (gmtime($hourofDay1))[2];
                    $min =  (gmtime($hourofDay1))[1];
                    $hour=($hour<=9?"0$hour":$hour);
                    $min =($min<=9?"0$min":$min);
                    $timeRange[$j]="$hour:$min";
                } 

                my $row = $status[$i-1];
                for $l(0 .. $#{$row}) {
                    if($status[$i-1][$l] >= $hourofDay1 && $status[$i-1][$l] < $hourofDay2) {
                        $historyStatus[$i-1][$j] = $status[$i-1][$l];        
                   }                                
                }
                if(! $historyStatus[$i-1][$j] ) {
                    $historyStatus[$i-1][$j] = "NO";
                }
            }
            $flag = 0;
        }

        $startTime = $now - $days{1};
        print "<br><br><a href=browser?page=statusHisto&source=$source&destin=$destin:$tool&start=$startTime>Previous Week</a>";                    if (($now+$days{1}) < (time())) {
            my $startNextWeek = $now + $days{1};
            print "| <a href=browser?page=statusHisto&source=$source&destin=$destin:$tool&start=$startNextWeek>Next Week</a>";
        }
        #Main table for displaying log history.
        print "<br><br><center><table class=striped width=80%><tr class='selected'>";
        my $weekDay1 = gmtime($now - $days{1});
        my $weekDay2 = gmtime($now - $days{7});
        print "<td>";
        #print "<td colspan=8 align=center><font size=4>$weekDay1 &nbsp;&nbsp  - &nbsp;&nbsp $weekDay2</font></td>";
        foreach $d (sort keys %days) {
            my $weekDay = $now - $days{$d};
            $weekDay = gmtime($weekDay);
            print "<th class=selected>$weekDay</th>";
        }
        print "</tr>";
        for ($i=0; $i<=23; $i++) {
            print "<tr><td bgcolor=pink>$timeRange[$i]-$timeRange[($i+1>23?0:($i+1))]</td>";
            for($j=0; $j<=6; $j++) {
                if($historyStatus[$j][$i] eq "NO") {
                    print "<td></td>";
                } else {
                    $timeofDay = gmtime($historyStatus[$j][$i]);
                    $logid = $logids{$historyStatus[$j][$i]};
                    if($timestamps{$historyStatus[$j][$i]} eq "OK") {
                        print "<td bgcolor=green><a href=/heartbeat/cgi-bin/browser?page=viewlog&id=$logid>$timeofDay</a></td>";
                    } else {
                        print "<td bgcolor=red><a href=/heartbeat/cgi-bin/browser?page=viewlog&id=$logid>$timeofDay</a></td>";
                    }
                }
            }
            print "</tr>";
        }
        print "</td>";
    }
}

sub warnings {

    my $dbh = shift;
    my %siteDown = ();
    my %noResponse = ();
    my $query = qq{SELECT site1.timestamp,site1.log_id,site1.source_site,site1.destin_site,
                   site1.logstatus,site1.tool FROM site_logs AS site1,
                   (SELECT MAX(timestamp) AS timestamp,source_site,destin_site,tool 
                   FROM site_logs GROUP BY source_site,destin_site,tool) as site2 
                   WHERE site1.timestamp=site2.timestamp AND site1.source_site=site2.source_site 
                   AND site1.destin_site=site2.destin_site and site1.tool=site2.tool};

    my $sth = $dbh ->prepare($query);
    $sth -> execute();
    my ($timestamp, $sourceSite, $logID, $destinSite, $logStatus, $tool);
    $sth -> bind_columns(undef, \$timestamp, \$logID, \$sourceSite, \$destinSite, \$logStatus, \$tool);
    #Go through each site and looks for time since its down and the time since last updated and select some recent ones
    while ($sth -> fetch) {
        if($logStatus eq "NOK") {
            #Site is down check for its downtime
            
            my $downT = downTime($dbh, $sourceSite, $destinSite, $tool);            
            $downT = time() - $downT;
            $downT = int($downT/3600);           
            $siteDown{$logID} = "$sourceSite TO $destinSite ($tool)";      
           
        }
        # Check for those sites for which we haven't received any  response for some hours. 
        my $lastResponse = time() - $timestamp;
        $lastResponse = int($lastResponse/3600);
        if($lastResponse >= 1) {
            $noResponse{$logID} = "$sourceSite TO $destinSite ($tool) ";
        }
    }     

    print "<div id=rightcol>", 
           "<p id=highlight>Warnings!</p>",
           "<p>&nbsp;</p><p><center><table class=striped>",
           "<tr class='selected'>",
           "<th>Sites Down Recently</th><tr>";

    my $count = 0;
    loop:
    foreach $key (sort keys %siteDown) {
        $count++;
        if ($count == 4) {
            last loop;
        }        
        print "<tr><td>$siteDown{$key}</td></tr>";
    }
    if(keys(%siteDown)<1) {
        print "<tr><td>No recently down links</td></tr>";
    }   
    print "</table>", 
          "<br><br><table class='striped'>",
          "<tr class='selected'>",
          "<th> No response </th></tr>";
    foreach $key (sort keys %noResponse) {
        print "<tr><td>$noResponse{$key}</td></tr>";
    }
    if(keys(%noResponse)<1) {
        print "<tr><td>All links are updated</td></tr>";
    }
    print "</table></center><br><br></p></div>";  

}
1;
#################################################
__END__
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>@PAGETITLE@</title>
<link rel="stylesheet" href="../navig.css" type="text/css" />
<link rel="stylesheet" href="../style.css" type="text/css" />
<script type="text/javascript" src="../stripe.js"></script>
</head>
<body onload='stripe("#fff","#edf3fe")'>
<table width="100%" height="967" border="0">
  <tr> 
    <th height="132" colspan="2" valign="top" bgcolor="#003399" style="border: #000 1px solid"> 
      <div align="center"> <img src="../heartbeat_logo.png" width="300" height="123"> 
      </div>
      <div align=right><font color="#FFFF00"  size="2"  face="Lucida Console">Date:
      @TIME@	
      </font> </div></th>
  </tr>
  <tr valign="top"> 
    <div id=leftcol> 
      <td width=10% align="left" valign="top"><p id="highlight">Navigation</p>
        <br>
        <ul id="navigation">
          <li><a href="heartbeat-browser">Home</a></li>
          <li><a href="heartbeat-browser?page=ostatus">Overall Site Status</a></li>
          <li><a href="heartbeat-browser?page=heartbeatQuality">Heartbeat Quality</a></li>
          <li><a href="heartbeat-browser?page=statusHisto">Status History</a><li>
          <li><a href="">Daily Reports</a></li>
          <li><a href=""></a></li>
        </ul></td>                     
        </div>
        <td align="left" valign="top">
        @WARNINGS@
        <div id="centercol"> 
          <p id="highlight">Status Information</p>
          <p>&nbsp;</p>
	  <p>@CONTENT@</p>
        </div></td>
    </div>
  </tr>
</table>
</body>
</html>

