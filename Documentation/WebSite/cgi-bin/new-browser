#!/usr/bin/env perl

use strict;
use warnings;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use POSIX;
use DBI;

my $cgi = new CGI;
my $db = $cgi->param("db") || "prod";    # tnsname of the database
my $dbh;
my %databases = ("prod" => [ "cms", 'CMS_TRANSFERMGMT', 'smallAND_round' ],
                 "rac" => [ "cmssg", 'CMS_TRANSFERMGMT', 'smallAND_round' ],
                 "test" => [ "devdb", 'CMS_TRANSFERMGMT', 'smallAND_round' ],
                 "testbed" => [ "devdb", 'CMS_TRANSFERMGMT_TESTBED', 'phedexedehp' ]);

my $badcolor = '#ff9e9e';
my $warncolor = '#ffd89e';
my $pendcolor = '#ccccff'; # ececff
my $goodcolor = '#ccffcc';
my $altcolor = '#e8e8e8';

# ###############################################
# Main loop
# ###############################################

$ENV{TNS_ADMIN} = "/afs/cern.ch/project/oracle/admin";
$ENV{ORACLE_HOME} = "/afs/cern.ch/project/oracle/\@sys/10103";
$ENV{LD_LIBRARY_PATH} = "/afs/cern.ch/project/oracle/\@sys/10103/lib";

$db = "prod" if ! grep ($db eq $_, keys %databases);
my ($dbname, $dbuser, $dbpass) = @{$databases{$db}};
$dbh = DBI->connect ("DBI:Oracle:$dbname", $dbuser, $dbpass,
                         { RaiseError=>1, AutoCommit =>1 });

intro();
end();

$dbh->disconnect();

# ###############################################
# Subroutines
# ###############################################
sub relurl
{
    my %args = ('db' => $db, @_);
    my $newcgi = new CGI ($cgi->query_string);
    map { $newcgi->param ($_, $args{$_}) } keys %args;
    return $newcgi->self_url(-full=>0, -relative=>1);
}

sub nodes_menu
{
    my @nodes = ();
    my $sql = "select * from t_node";
    my $query = $dbh->prepare($sql);
    $query->execute();
    while (my @row = $query->fetchrow_array) {
        push( @nodes, $row[0] );
    }
    $query->finish();
    push( @nodes, 'all' );
    return @nodes;
}


sub intro
{
    $| = 1;

    my $stamp = strftime ("%Y-%m-%d %H:%M:%S %Z", localtime(time()));
    print $cgi->header();

    # First print the main header, and set up the form with page and db choice tables
    print qq{
        <head>
        <title>PhEDEx monitoring</title>
        <meta http-equiv='refresh' content='60'>
        </head>
        <body>
        <h1>PhEDEx Monitoring</h1>
        <p>$stamp
        <form action='}, &relurl('page',$cgi->param('page')), qq{' method='GET'>
        <table>
        <tr>
        <td><a href='}, &relurl('page', 'main'), qq{'>Front page</a></td>
        <td><a href='}, &relurl('page', 'transfer'), qq{'>Transfer state</a></td>
        <td><a href='}, &relurl('page', 'replicas'), qq{'>Replica state</a></td>
        <td><a href='}, &relurl('page', 'subs'), qq{'>Subscriptions</a></td>
        <td><a href='}, &relurl('page', 'stats'), qq{'>File size stats</a></td>
        <td><a href='}, &relurl('page', 'rates'), qq{'>Transfer rate</a></td>
        <td><a href='}, &relurl('page', 'agents'), qq{'>Agent status</a></td>
        </tr>
        <tr>
        <td><a href='}, &relurl('db', 'testbed'), qq{'>Testbed</a></td>
       	<td><a href='}, &relurl('db', 'test'), qq{'>Test</a></td>
       	<td><a href='}, &relurl('db', 'rac'), qq{'>RAC Test</a></td>
       	<td><a href='}, &relurl('db', 'prod'), qq{'>Production</a></td>
        </tr>
        </tr>
    };

    # Now we need to let the user choose which nodes. Because it's refreshed
    # we need to check what they chose, and refresh the checks. We also need to
    # format it to make the table a reasonable size ...
    my @nodes = &nodes_menu();
    my $count = 1;
    foreach my $node (@nodes) {
        my $sel = '';
        foreach my $temp_node ($cgi->param('nodes')) {
            if ( $temp_node =~ /$node/ ) { $sel = "CHECKED"; }
        }
        print "<td><input type='checkbox' name='nodes' value='$node' $sel>$node</input></td>";
        $count++;
        if ($count == 8) { print "</tr><tr>"; $count = 1; }
    }
    
    # Now we can finish the menu off ...
    print qq{
        </tr>
        <tr><td><input type='submit' value='Refresh choices'>
        </table>
        </form>
    };
    
   my %pages = ('main' => \&main,	   'transfer' => \&transfer,
		 'replicas' => \&replicas, 'subs' => \&subs,
		 'stats' => \&stats,       'agents' => \&agents,
		 'rates' => \&rates);
    &{$pages{param('page')} || \&main}();
}

sub end
{
    print "</body></html>\n";
}

sub main
{
    print "<h2>System status</h2>";
    my $active = 60*5;
    my $offline = 60*15;
    my $now = time ();
    my $query = $dbh->prepare(q{select node,agent,timestamp from t_agent_status});
    my %agents;
    my %status;

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($node, $agent, $contact) = @$row;
        my %choice_nodes = ();
        foreach my $temp_node ($cgi->param('nodes')) {
            $choice_nodes{$temp_node} = 1;
        }
        if ( exists $choice_nodes{$node} || exists $choice_nodes{'all'} ) {
            $status{$node}{$agent} = $contact;
            $agents{$agent} = 1;
        }
    }
    $query->finish();

    print "<table><tr><th>Node</th>",
	  (map { "<th>$_</th>" } sort keys %agents),
	  "</tr>\n";

    foreach my $node (sort keys %status)
    {
	print "<tr><td>$node</td>";
        foreach my $agent (sort keys %agents)
	{
	    my $contact = $status{$node}{$agent};
	    if (! defined $contact)
	    {
		print "<td>&nbsp;</td>";
		next;
	    }

	    my $ago = &age ($now - $contact);
	    if (($now - $contact) < $active) {
                print "<td align='center' bgcolor='$goodcolor'>UP</td>";
	    } elsif (($now - $contact) < $offline) {
                print "<td align='center' bgcolor='$goodcolor'>UP ($ago ago)</td>";
            } else {
                print "<td align='center' bgcolor='$badcolor'>DOWN ($ago ago)</td>";
            }
	}
	print "</tr>\n";
    }
    print "</table>";
}

sub transfer
{
    print "<h2>Transfer status</h2>";
    my $rows = 0;
    my $now = time();
    my $query = $dbh->prepare(qq{
	    select
	      node, timestamp,
	      n_files, sz_files,
	      n_onsite, sz_onsite,
	      n_staged, sz_staged,
	      n_available, sz_available,
	      n_in_transfer, sz_in_transfer,
	      n_wanted, sz_wanted,
	      n_pending, sz_pending,
	      n_other, sz_other
	    from t_info_transfer_status
	    order by node});

    print "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Age</th>",
	  "<th rowspan='2'>Node</th>",
	  "<th colspan='2'>Files</th>",
	  "<th colspan='2'>On Site</th>",
	  "<th colspan='2'>Staged</th>",
	  "<th colspan='2'>Transferable</th>",
	  "<th colspan='2'>In Transfer</th>",
	  "<th colspan='2'>Wanted</th>",
	  "<th colspan='2'>Pending</th>",
	  "<th colspan='2'>Other</th>",
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
          "</tr>\n";

    $query->execute();
    my ($tfiles, $tfilesize,
	$tonsite, $tonsitesize,
	$tstaged, $tstagedsize,
	$tavail, $tavailsize,
	$ttransf, $ttransfsize,
	$twanted, $twantedsize,
	$tpending, $tpendingsize,
	$tother, $tothersize) = (0) x 14;

        my %choice_nodes = ();
        foreach my $temp_node ($cgi->param('nodes')) {
            $choice_nodes{$temp_node} = 1;
        }

    while (my $row = $query->fetchrow_arrayref)
    {
	my ($n, $stamp, $files, $filesize,
	    $onsite, $onsitesize,
	    $staged, $stagedsize,
	    $avail, $availsize,
	    $transf, $transfsize,
	    $wanted, $wantedsize,
	    $pending, $pendingsize,
	    $other, $othersize) = @$row;
        next if ! $files;

        my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $onscolor = ($onsite == $files) ? '' : " bgcolor='$pendcolor'";
	my $avacolor = (!$avail) ? '' : " bgcolor='$goodcolor'";
	my $tracolor = (!$transf) ? '' : " bgcolor='$goodcolor'";
	my $wancolor = (!$wanted) ? '' : " bgcolor='$goodcolor'";
	my $pencolor = ($files != $onsite + $transf + $wanted + $pending + $other)
		       ? " bgcolor='$warncolor'" : ! $pending ? ''
		       : " bgcolor='$pendcolor'";
		   
    if ( exists $choice_nodes{$n} || exists $choice_nodes{'all'} ) {

    $tfiles += $files; $tfilesize += $filesize;
	$tonsite += $onsite; $tonsitesize += $onsitesize;
	$tstaged += $staged; $tstagedsize += $stagedsize;
	$tavail += $avail; $tavailsize += $availsize;
	$ttransf += $transf; $ttransfsize += $transfsize;
	$twanted += $wanted; $twantedsize += $wantedsize;
	$tpending += $pending; $tpendingsize += $pendingsize;
	$tother += $other; $tothersize += $othersize;

        print "<tr valign='top'$rowcolor>",
	      "<td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>",
	      "<td>$n</td>",
	      "<td align='right'>@{[&format_num($files)]}</td>",
	      "<td align='right'>@{[&format_size($filesize)]}</td>",
	      "<td align='right'$onscolor>@{[&format_num($onsite)]}</td>",
	      "<td align='right'$onscolor>@{[&format_size($onsitesize)]}</td>",
	      "<td align='right'>@{[&format_num($staged)]}</td>",
	      "<td align='right'>@{[&format_size($stagedsize)]}</td>",
	      "<td align='right'$avacolor>@{[&format_num($avail)]}</td>",
	      "<td align='right'$avacolor>@{[&format_size($availsize)]}</td>",
	      "<td align='right'$tracolor>@{[&format_num($transf)]}</td>",
	      "<td align='right'$tracolor>@{[&format_size($transfsize)]}</td>",
	      "<td align='right'$wancolor>@{[&format_num($wanted)]}</td>",
	      "<td align='right'$wancolor>@{[&format_size($wantedsize)]}</td>",
	      "<td align='right'$pencolor>@{[&format_num($pending)]}</td>",
	      "<td align='right'$pencolor>@{[&format_size($pendingsize)]}</td>",
	      "<td align='right'>@{[&format_num($other)]}</td>",
	      "<td align='right'>@{[&format_size($othersize)]}</td>",
	      "</tr>\n";
    }
    
    my $onscolor = ($tonsite == $tfiles) ? '' : " bgcolor='$pendcolor'";
    my $tracolor = (!$ttransf) ? '' : " bgcolor='$goodcolor'";
    my $wancolor = (!$twanted) ? '' : " bgcolor='$goodcolor'";
    my $pencolor = ($tfiles != $tonsite + $ttransf + $twanted + $tpending + $tother)
		   ? " bgcolor='$warncolor'" : ! $tpending ? ''
		   : " bgcolor='$pendcolor'";

    print "<tr valign='top' bgcolor='$altcolor'>",
	  "<th>&nbsp;</th>",
	  "<th align='left'>Total</th>",
	  "<th align='right'>@{[&format_num($tfiles)]}</th>",
	  "<th align='right'>@{[&format_size($tfilesize)]}</th>",
	  "<th align='right'$onscolor>@{[&format_num($tonsite)]}</th>",
	  "<th align='right'$onscolor>@{[&format_size($tonsitesize)]}</th>",
	  "<th align='right'>@{[&format_num($tstaged)]}</th>",
	  "<th align='right'>@{[&format_size($tstagedsize)]}</th>",
	  "<th align='right'>@{[&format_num($tavail)]}</th>",
	  "<th align='right'>@{[&format_size($tavailsize)]}</th>",
	  "<th align='right'$tracolor>@{[&format_num($ttransf)]}</th>",
	  "<th align='right'$tracolor>@{[&format_size($ttransfsize)]}</th>",
	  "<th align='right'$wancolor>@{[&format_num($twanted)]}</th>",
	  "<th align='right'$wancolor>@{[&format_size($twantedsize)]}</th>",
	  "<th align='right'$pencolor>@{[&format_num($tpending)]}</th>",
	  "<th align='right'$pencolor>@{[&format_size($tpendingsize)]}</th>",
	  "<th align='right'>@{[&format_num($tother)]}</th>",
	  "<th align='right'>@{[&format_size($tothersize)]}</th>",
	  "</tr>\n";

    $query->finish();
    print "</table>";
}

sub replicas
{
    print "<h2>Replica state</h2>";
}

sub subs
{
    print "<h2>Subscriptions</h2>";
}

sub stats
{
    print "<h2>Status</h2>";
}

sub agents
{
    print "<h2>Agent status</h2>";
}

sub rates
{
}

sub age {
    my ($diff) = @_;
    my $str = "";
    my $full = 0;
    if ($diff >= 86400) {
	$str .= sprintf("%dd", $diff / 86400);
	$diff %= 86400;
	$full = 1;
    }
    $str .= sprintf("%dh", $diff / 3600);
    $diff %= 3600;
    $str .= sprintf("%02d", $diff / 60);
}

sub format_num {
    my ($n) = @_;
    return $n ? "$n" : '&#8211;';
}

sub format_size {
    my ($bytes, $nodash) = @_;
    my @bounds = ([ 2**10, 'k' ], [ 2**20, 'M' ], [ 2**30, 'G' ],
		  [ 2**40, 'T' ], [ 2**50, 'P' ], [ 2**60, 'E' ]);
    my ($val, $unit, $minus) = ($bytes, '', $bytes < 0 ? "-" : "");
    do { $val = -$val; $bytes = -$bytes; } if $minus;
    while (@bounds && $bytes >= $bounds [0][0])
    {
	$val = $bytes / $bounds[0][0];
	$unit = $bounds[0][1];
	shift (@bounds);
    }

    return $bytes || $nodash
           ? sprintf('%s%.1f&nbsp;%sB', $minus, $val, $unit)
	   : '&#8211;';
}