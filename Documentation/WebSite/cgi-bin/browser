#!/usr/bin/env perl

use strict;
use warnings;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use POSIX;
use DBI;

# Read database access tokens
my $home = $0; $home =~ s|/[^/]*$||; $home = "." if ! $home;
my @dbnames = ();
my %databases = ();
open (DBNAMES, "< $home/.db/names") || die "Failed to read database configuration\n";
while (<DBNAMES>)
{
    chomp;
    my ($db, @args) = split(/\s+/);
    $databases{$db} = [ @args ];
    push (@dbnames, $db);
}
close (DBNAMES);
my $cgi = new CGI;
my $db = $cgi->param("db") || "prod";    # tnsname of the database
my $dbversion = $databases{$db}[4] || 'V2.2';
my $dbid = $databases{$db}[3] || '';
my $dbh;

my $badcolor = '#ff9e9e';
my $warncolor = '#ffd89e';
my $pendcolor = '#ccccff'; # ececff
my $goodcolor = '#ccffcc';
my $altcolor = '#e8e8e8';

$cgi->param('db', 'prod') if ! $cgi->param('db');
$cgi->param('page', 'main') if ! $cgi->param('page');

# ###############################################
# Main loop
# ###############################################

intro();
end();

# ###############################################
# Subroutines
# ###############################################

sub relurl
{
    my %args = ('db' => $db, @_);
    my $newcgi = new CGI ($cgi->query_string);
    map { $newcgi->param ($_, $args{$_}) } keys %args;
    return $newcgi->self_url(-full=>0, -relative=>1);
}

sub urlencode
{
    eval "use CGI '-oldstyle_urls'";
    my %args = @_; return new CGI (\%args)->query_string();
}

sub intro
{
    $| = 1;
    my $stamp = strftime ("%Y-%m-%d %H:%M:%S %Z", localtime(time()));
    print $cgi->header();
    print qq{
      <html><title>PHEDEX Status</title><body bgcolor='#FFFFFF'>
      <center><h1>PHEDEX Status</h1><table><tr>
       	<td><a href='}, &relurl('page', 'main'), qq{'>Front page</a></td>
       	<td><a href='}, &relurl('page', 'transfer'), qq{'>Transfer state</a></td>
       	<td><a href='}, &relurl('page', 'tstates'), qq{'>State details</a></td>
       	<td><a href='}, &relurl('page', 'replicas'), qq{'>Replica state</a></td>
       	<td><a href='}, &relurl('page', 'subs'), qq{'>Subscriptions</a></td>
      </tr><tr>
       	<td><a href='}, &relurl('page', 'stats'), qq{'>File size stats</a></td>
       	<td><a href='}, &relurl('page', 'rates'), qq{'>Transfer rate</a></td>
       	<td><a href='}, &relurl('page', 'rateplot'), qq{'>Transfer plots<a></td>
       	<td><a href='}, &relurl('page', 'qplot'), qq{'>Transfer quality<a></td>
       	<td><a href='}, &relurl('page', 'agents'), qq{'>Agent status</a></td>
      </tr><tr>
       	<td><a href='}, &relurl('page', 'dbreports'), qq{'>Daily Reports</a></td>
       </tr>
       <tr><td colspan=5 align='center'>$stamp</td></tr>
       <tr>},
	 (map { "<td><a href='" . &relurl('db', $_) . "'>$databases{$_}[3]</a></td>\n" } @dbnames),
	 qq{</tr></table>};

    $ENV{TNS_ADMIN} = "/afs/cern.ch/project/oracle/admin";
    $ENV{ORACLE_HOME} = "/afs/cern.ch/project/oracle/\@sys/10103";
    $ENV{LD_LIBRARY_PATH} = "/afs/cern.ch/project/oracle/\@sys/10103/lib";
    $db = "prod" if ! grep ($db eq $_, keys %databases);
    my ($dbname, $dbuser, $dbpass, @dbjunk) = @{$databases{$db}};
    $dbh = DBI->connect ("DBI:Oracle:$dbname", $dbuser, $dbpass,
	    		 { RaiseError=>1, AutoCommit =>1 });

    my %pages = ('main' => \&main,	     'transfer' => \&transfer,
		 'replicas' => \&replicas,   'subs' => \&subs,
		 'stats' => \&stats,         'agents' => \&agents,
		 'rates' => \&rates,	     'rateplot' => \&rateplot,
		 'qplot' => \&qplot,	     'tstates' => \&tstates,
	 	 'dbreports' => \&dbreports, 'dbreport' => \&dbreport);
    &{$pages{param('page')} || \&main}();
    print "</body></html>\n";
}

sub main
{
    my $active = 60*5;
    my $offline = 60*15;
    my $now = time ();
    my $query = $dbh->prepare(q{select node,agent,timestamp from t_agent_status});
    my %agents;
    my %status;

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($node, $agent, $contact) = @$row;
	$status{$node}{$agent} = $contact;
	$agents{$agent} = 1;
    }
    $query->finish();

    my @admin = grep (/^Block/, sort keys %agents);
    my @standard = grep (!/^Block/, sort keys %agents);

    foreach my $item (([ "Administrative", @admin ], [ "Common", @standard ]))
    {
	my ($type, @agents) = @{$item};
	print "<h2>$type component status</h2>\n",
              "<table><tr><th>Node</th>",
	      (map { "<th>$_</th>" } @agents),
	      "</tr>\n";

        foreach my $node (sort keys %status)
        {
	    next if ! grep (defined $status{$node}{$_}, @agents);

	    print "<tr><td>$node</td>";
            foreach my $agent (@agents)
	    {
	        my $contact = $status{$node}{$agent};
	        if (! defined $contact)
	        {
		    print "<td>&nbsp;</td>";
		    next;
	        }

	        my $ago = &age ($now - $contact);
	        if (($now - $contact) < $active) {
                    print "<td align='center' bgcolor='$goodcolor'>UP</td>";
	        } elsif (($now - $contact) < $offline) {
                    print "<td align='center' bgcolor='$goodcolor'>UP ($ago ago)</td>";
                } else {
                    print "<td align='center' bgcolor='$badcolor'>DOWN ($ago ago)</td>";
                }
	    }
	    print "</tr>\n";
        }
        print "</table>";
   }
}

sub format_num {
    my ($n) = @_;
    return $n ? "$n" : '&#8211;';
}

sub format_size {
    my ($bytes, $nodash) = @_;
    my @bounds = ([ 2**10, 'k' ], [ 2**20, 'M' ], [ 2**30, 'G' ],
		  [ 2**40, 'T' ], [ 2**50, 'P' ], [ 2**60, 'E' ]);
    my ($val, $unit, $minus) = ($bytes, '', $bytes < 0 ? "-" : "");
    do { $val = -$val; $bytes = -$bytes; } if $minus;
    while (@bounds && $bytes >= $bounds [0][0])
    {
	$val = $bytes / $bounds[0][0];
	$unit = $bounds[0][1];
	shift (@bounds);
    }

    return $bytes || $nodash
           ? sprintf('%s%.1f&nbsp;%sB', $minus, $val, $unit)
	   : '&#8211;';
}

sub transfer {
    my $rows = 0;
    my $now = time();
    my $query = $dbh->prepare(qq{
	    select
	      node, timestamp,
	      dest_files, dest_bytes,
	      node_files, node_bytes,
	      xfer_files, xfer_bytes,
	      expt_files, expt_bytes
	    from t_info_transfer_status
	    order by node});

    print "<h2>Transfer status</h2>\n",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Age</th>",
	  "<th rowspan='2'>Node</th>",
    	  "<th colspan='2'>Destined</th>",
	  "<th colspan='2'>On Site</th>",
	  "<th colspan='2'>In Transfer</th>",
	  "<th colspan='2'>In Export</th>",
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
          "</tr>\n";

    $query->execute();
    my ($tdest_files, $tdest_size,
	$tnode_files, $tnode_size,
	$txfer_files, $txfer_size,
	$texpt_files, $texpt_size) = (0) x 8;

    while (my $row = $query->fetchrow_arrayref)
    {
	my ($n, $stamp,
	    $dest_files, $dest_size,
	    $node_files, $node_size,
	    $xfer_files, $xfer_size,
	    $expt_files, $expt_size) = @$row;

    	$tdest_files += $dest_files; $tdest_size += $dest_size;
    	$tnode_files += $node_files; $tnode_size += $node_size;
    	$txfer_files += $xfer_files; $txfer_size += $xfer_size;
    	$texpt_files += $expt_files; $texpt_size += $expt_size;

        my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $node_color = (($dest_files && $node_files < $dest_files) ? " bgcolor='$pendcolor'"
		   	  : $xfer_files ? " bgcolor='$pendcolor'" : "");
	my $xfer_color = (($xfer_files) ? " bgcolor='$goodcolor'"
			  : ($xfer_files + $node_files < $dest_files) ? " bgcolor='$pendcolor'"
			  : "");
	my $expt_color = (($expt_files) ? " bgcolor='$goodcolor'" : "");

        print "<tr valign='top'$rowcolor>",
	      "<td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>",
	      "<td>$n</td>",
	      "<td align='right'>@{[&format_num($dest_files)]}</td>",
	      "<td align='right'>@{[&format_size($dest_size)]}</td>",
	      "<td align='right'$node_color>@{[&format_num($node_files)]}</td>",
	      "<td align='right'$node_color>@{[&format_size($node_size)]}</td>",
	      "<td align='right'$xfer_color>@{[&format_num($xfer_files)]}</td>",
	      "<td align='right'$xfer_color>@{[&format_size($xfer_size)]}</td>",
	      "<td align='right'$expt_color>@{[&format_num($expt_files)]}</td>",
	      "<td align='right'$expt_color>@{[&format_size($expt_size)]}</td>",
	      "</tr>\n";
    }
    my $node_color = (($tdest_files && $tnode_files < $tdest_files) ? " bgcolor='$pendcolor'"
		      : ($txfer_files) ? " bgcolor='$pendcolor'" : "");
    my $xfer_color = (($txfer_files) ? " bgcolor='$goodcolor'"
		      : ($txfer_files + $tnode_files < $tdest_files) ? " bgcolor='$pendcolor'"
		      : "");
    my $expt_color = (($texpt_files) ? " bgcolor='$goodcolor'" : "");

    print "<tr valign='top' bgcolor='$altcolor'>",
	  "<th>&nbsp;</th>",
	  "<th align='left'>Total</th>",
	  "<th align='right'>@{[&format_num($tdest_files)]}</th>",
	  "<th align='right'>@{[&format_size($tdest_size)]}</th>",
	  "<th align='right'$node_color>@{[&format_num($tnode_files)]}</th>",
	  "<th align='right'$node_color>@{[&format_size($tnode_size)]}</th>",
	  "<th align='right'$xfer_color>@{[&format_num($txfer_files)]}</th>",
	  "<th align='right'$xfer_color>@{[&format_size($txfer_size)]}</th>",
	  "<th align='right'$expt_color>@{[&format_num($texpt_files)]}</th>",
	  "<th align='right'$expt_color>@{[&format_size($texpt_size)]}</th>",
	  "</tr>\n";
    $query->finish();
    print "</table>";
}

sub tstates {
    my $rows = 0;
    my $now = time();
    my $query = $dbh->prepare(qq{
	    select
	      timestamp,
	      to_node, from_node,
	      to_state, from_state,
	      files, bytes
	    from t_info_transfer_states
	    order by to_node, from_node, to_state, from_state});

    print "<h2>Transfer state details</h2>\n",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Age</th>",
	  "<th rowspan='2'>To node</th>",
	  "<th rowspan='2'>To state</th>",
	  "<th rowspan='2'>From node</th>",
	  "<th rowspan='2'>From state</th>",
	  "<th colspan='2'>Files</th>",
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
          "</tr>\n";

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($stamp,
	    $to_node, $from_node,
	    $to_state, $from_state,
	    $files, $bytes) = @$row;

        my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $to_state_name = ($to_state == 0 ? "assigned"
			     : $to_state == 1 ? "wanted"
			     : $to_state == 2 ? "in transfer"
			     : $to_state == 3 ? "transferred"
			     : ($to_state >= 100 && $to_state < 999)
			     ? "error cool-off @{[$to_state-100]}"
			     : "unknown");
	my $from_state_name = ($from_state == 0 ? "assigned"
			       : $from_state == 1 ? "transferrable"
			       : "unknown");
	my $to_color = (($to_state == 2) ? " bgcolor='$goodcolor'"
		   	: ($to_state == 1) ? " bgcolor='$pendcolor'"
		   	: ($to_state >= 100) ? " bgcolor='$warncolor'"
			: "");
	my $from_color = ($from_state == 1 ? " bgcolor='$goodcolor'" : "");
        print "<tr valign='top'$rowcolor>",
	      "<td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>",
	      "<td>$to_node</td>",
	      "<td$to_color>$to_state ($to_state_name)</td>",
	      "<td>$from_node</td>",
	      "<td$from_color>$from_state ($from_state_name)</td>",
	      "<td align='right'>@{[&format_num($files)]}</td>",
	      "<td align='right'>@{[&format_size($bytes)]}</td>",
	      "</tr>\n";
    }
    $query->finish();
    print "</table>";

    $query = $dbh->prepare(qq{
	    select timestamp, node, state, files, bytes
	    from t_info_replica_states order by node, state});

    print "<h2>Replica state details</h2>\n",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Age</th>",
	  "<th rowspan='2'>Node</th>",
	  "<th rowspan='2'>State</th>",
	  "<th colspan='2'>Files</th>",
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
          "</tr>\n";

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($stamp, $node, $state, $files, $bytes) = @$row;
        my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $state_name = ($state == 0 ? "at node"
			     : $state == 1 ? "on disk"
			     : "unknown");
	my $color = (($state == 1) ? " bgcolor='$goodcolor'" : "");
        print "<tr valign='top'$rowcolor>",
	      "<td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>",
	      "<td>$node</td>",
	      "<td$color>$state ($state_name)</td>",
	      "<td$color align='right'>@{[&format_num($files)]}</td>",
	      "<td$color align='right'>@{[&format_size($bytes)]}</td>",
	      "</tr>\n";
    }
    $query->finish();
    print "</table>";
}

sub replicas {
    my $rows = 0;
    my %data = ();
    my %sites = ();
    my $query = $dbh->prepare(qq{
	    select
	      owner,
	      dataset,
	      n_runs,
	      n_files,
	      sz_files
	    from t_info_replication_overview});
    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($o, $ds, $runs, $files, $total) = @$row;
	$data{"$o:$ds"} = [ $o, $ds, $files, $total, $runs, {} ];
    }
    $query->finish();

    $query = $dbh->prepare (qq{
	    select
	      owner,
	      dataset,
	      node,
	      n_files,
	      sz_files
	    from t_info_replication_details});
    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($o, $ds, $site, $files, $total) = @$row;
	$data{"$o:$ds"}[5]{$site} = [ $files, $total ];
	$sites{$site} = 1;
    }
    $query->finish();

    print "<h2>Replication status</h2>\n",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Owner</th>",
	  "<th rowspan='2'>Dataset</th>",
	  "<th rowspan='2' align='right'>Runs</th>",
	  "<th colspan='2' align='right'>Files</th>",
	  (map { "<th colspan='2'>$_</th>" } sort keys %sites),
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  (map { "<th align='right'>N</th><th align='right'>Size</th>" } sort keys %sites),
	  "</tr>\n";

    foreach my $dso (sort keys %data)
    {
        my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	my ($o, $ds, $files, $total, $runs, $sites) = @{$data{$dso}};
        print "<tr valign='top'$rowcolor>",
	      "<td>$o</td>",
	      "<td>$ds</td>",
	      "<td align='right'>$runs</td>",
	      "<td align='right'>$files</td>",
	      "<td align='right'>@{[&format_size($total)]}</td>";

	foreach my $site (sort keys %sites)
	{
	    if (exists $sites->{$site})
	    {
		my ($sfiles, $stotal) = @{$sites->{$site}};
		my $scolor = ($sfiles == $files) ? '' : " bgcolor='$pendcolor'";
		print "<td$scolor align='right'>@{[&format_num($sfiles)]}</td>",
		      "<td$scolor align='right'>@{[&format_size($stotal)]}</td>";
	    }
	    else
	    {
		print "<td colspan='2'>&nbsp;</td>";
	    }
        }
	print "</tr>\n";
    }
    print "</table>";
}

sub subs {
    my $rows = 0;
    my %data = ();
    my %sites = ();
    my $query = $dbh->prepare(qq{
	    select
	      owner,
	      dataset,
	      destination,
	      n_files,
	      sz_files,
	      n_files_at_dest,
	      sz_files_at_dest
	    from t_info_subscriptions});
    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($ow, $ds, $site, $files, $total, $sfiles, $stotal) = @$row;
	$data{$ow}{$ds} ||= [ $ow, $ds, $files, $total, {} ];
	if ($site)
	{
	    $data{$ow}{$ds}[4]{$site} = [ $sfiles, $stotal ];
	    $sites{$site} = 1;
        }
    }
    $query->finish();

    print "<h2>Subscriptions</h2>\n",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Owner</th>",
	  "<th rowspan='2'>Dataset</th>",
	  # "<th rowspan='2' align='right'>Runs</th>",
	  "<th colspan='2' align='right'>Files</th>",
	  (map { "<th rowspan='2'>$_</th>" } sort keys %sites),
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "</tr>\n";

    foreach my $ow (sort keys %data)
    {
        foreach my $ds (sort keys %{$data{$ow}})
        {
	    my ($ow, $ds, $files, $total, $sites) = @{$data{$ow}{$ds}};
            my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	    my $dscolor = (scalar (keys %$sites) ? '' : " bgcolor='$warncolor'");
            print "<tr valign='top'$rowcolor>",
	          "<td$dscolor><a href='subscribe?owner=$ow&dataset=$ds&db=$db'>$ow</a></td>",
	          "<td$dscolor><a href='subscribe?owner=$ow&dataset=$ds&db=$db'>$ds</a></td>",
	          "<td align='right'>@{[&format_num($files)]}</td>",
	          "<td align='right'>@{[&format_size($total)]}</td>";

	    foreach my $site (sort keys %sites)
	    {
	        if (exists $sites->{$site})
	        {
		    my ($sfiles, $stotal) = @{$sites->{$site}};
		    my $scolor = ($sfiles == $files) ? '' : " bgcolor='$pendcolor'";
		    print "<td$scolor align='right'>",
		          sprintf('%0.2f&nbsp;/&nbsp;%0.2f', ($sfiles / $files), ($stotal / $total)),
		          "</td>";
	        }
	        else
	        {
		    print "<td>&nbsp;</td>";
	        }
            }
	}
	print "</tr>\n";
    }
    print "</table>";
}

sub age {
    my ($diff) = @_;
    my $str = "";
    my $full = 0;
    if ($diff >= 86400) {
	$str .= sprintf("%dd", $diff / 86400);
	$diff %= 86400;
	$full = 1;
    }
    $str .= sprintf("%dh", $diff / 3600);
    $diff %= 3600;
    $str .= sprintf("%02d", $diff / 60);
}

sub stats {
    my $now = time();
    my $overview = $dbh->selectrow_arrayref(qq{
			select
			  timestamp,
			  n_files,
			  sz_total,
			  sz_min,
			  sz_max,
			  sz_mean,
			  sz_median
			from t_info_file_size_overview});
    my $histo = $dbh->selectall_arrayref(qq{
	    		select
			  timestamp,
			  bin_low,
			  bin_width,
			  n_total,
			  sz_total
			from t_info_file_size_histogram});

    print "<h2>File Size Statistics</h2>\n",
    	  "<p>", &age($now - $overview->[0]), " ago </td>",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th>Files</th>",
	  "<th>Total Size</th>",
	  "<th>Min Size</th>",
	  "<th>Max Size</th>",
	  "<th>Mean Size</th>",
	  "<th>Median Size</th>",
	  "</tr>\n",
	  "<tr>",
	  "<td align='right'>@{[&format_num($overview->[1])]}</td>",
	  "<td align='right'>@{[&format_size($overview->[2])]}</td>",
	  "<td align='right'>@{[&format_size($overview->[3])]}</td>",
	  "<td align='right'>@{[&format_size($overview->[4])]}</td>",
	  "<td align='right'>@{[&format_size($overview->[5])]}</td>",
	  "<td align='right'>@{[&format_size($overview->[6])]}</td>",
	  "</tr>\n",
	  "</table>\n",
    	  "<hr>\n";

    print "<h2>File Size Breakdown</h2>\n",
    	  "<p>", &age($now - $histo->[0][0]), " ago</p>",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th colspan='2'>Bin</th>",
	  "<th>Files</th>",
	  "<th>Total Size</th>",
	  "</tr>\n";
    foreach my $row (@$histo)
    {
	  print "<tr>",
	        "<td align='right'>@{[&format_size($row->[1] * $row->[2],1)]} ..</td>",
		"<td align='right'>@{[&format_size(($row->[1] + 1) * $row->[2],1)]}</td>",
	        "<td align='right'>@{[&format_num($row->[3])]}</td>",
	        "<td align='right'>@{[&format_size($row->[4])]}</td>",
	        "</tr>\n";
    }
    print "</table>\n";
}

sub agents {
    my $now = time();
    my %info = ();
    my @states = qw(pending received work completed bad outgoing);
    my %states = ();
    my %age = ();
    my %live = ();
    foreach my $row (@{$dbh->selectall_arrayref(qq{
				select
				  timestamp,
				  site,
				  host,
				  path,
				  agent,
				  worker,
				  pid,
				  live,
				  state,
				  value
				from t_info_agent_status})})
    {
	my ($stamp, $site, $host, $path, $agent, $worker, $pid, $live, $state, $value) = @$row;
	$age{$site}{$host}{$path} = $stamp;
	$live{$site}{$host}{$path}{$agent}{$worker} = { PID => $pid, LIVE => $live };
	$info{$site}{$host}{$path}{$agent}{$worker}{$state} = $value;
	$states{$state} = 1 if ! grep ($_ eq $state, @states);
    }

    print "<h2>Agent Status</h2>\n",
    	  "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th>Age</th>",
	  "<th>Site</th>",
	  "<th>Host</th>",
	  "<th>Path</th>",
	  "<th>Agent</th>",
	  "<th>Worker</th>",
	  "<th>Process</th>",
	  (map { "<th>$_</th>" } @states, sort keys %states),
	  "</tr>\n";

    foreach my $site (sort keys %info)
    {
	foreach my $host (sort keys %{$info{$site}})
	{
	    foreach my $path (sort keys %{$info{$site}{$host}})
	    {
	        foreach my $agent (sort keys %{$info{$site}{$host}{$path}})
	        {
		    foreach my $worker (sort keys %{$info{$site}{$host}{$path}{$agent}})
		    {
		        my $pid = $live{$site}{$host}{$path}{$agent}{$worker}{PID};
		        my $live = $live{$site}{$host}{$path}{$agent}{$worker}{LIVE};
		        my $pidcolor = $live ? "" : " bgcolor='$warncolor'";
		        print "<tr>",
			      "<td>", &age($now - $age{$site}{$host}{$path}), "</td>",
			      "<td>$site</td>",
			      "<td>$host</td>",
			      "<td>$path</td>",
			      "<td>$agent</td>",
			      "<td>$worker</td>",
			      "<td$pidcolor>$pid</td>";
		        foreach my $state (@states, sort keys %states)
		        {
			    my $value = $info{$site}{$host}{$path}{$agent}{$worker}{$state};
			    my $color = $value ? " bgcolor='$pendcolor'" : '';
			    print "<td$color>$value</td>";
		        }
		        print "</tr>\n";
	            }
	        }
	    }
	}
    }
    print "</table>\n";
}

sub format_timespan {
    my $span = shift;
    if ($span >= 86400) {
	$span /= 86400;
	return $span == 1 ? "day" : "$span days";
    } elsif ($span >= 3600) {
	$span /= 3600;
	return $span == 1 ? "hour" : "$span hours";
    } elsif ($span >= 60) {
	$span /= 60;
	return $span == 1 ? "minute" : "$span minutes";
    } else {
	return $span == 1 ? "second" : "$span seconds";
    }
}

sub rates {
    my $now = time();
    my %stats = ();
    my $q = $dbh->prepare(qq{
			select
			  timestamp,
			  time_span,
			  info_type,
			  from_node,
			  to_node,
			  n_total,
			  sz_total
			from t_info_transfer_rate});
    $q->execute();
    while (my $row = $q->fetchrow_hashref()) {
	push(@{$stats{$row->{TIME_SPAN}}{$row->{INFO_TYPE}}}, $row);
    }

    print "<h2>Transfer Rate Statistics</h2>\n";
    print "<p>CERN Daily External Internet Traffic<br>\n";
    if ($dbid !~ /SC/)
    {
        print "<a href='http://pcstats.cern.ch/misc/cern-all.html'><IMG
          VSPACE=10 WIDTH=600 HEIGHT=135 ALIGN=TOP
          SRC='http://pcstats.cern.ch/misc/cern-all-day.png' ALT='day'></a></p>\n";
    }
    else
    {
        print "<a href='http://pcstats.cern.ch/misc/openlab.html'><IMG
          VSPACE=10 WIDTH=600 HEIGHT=135 ALIGN=TOP
          SRC='http://pcstats.cern.ch/misc/openlab-day.png' ALT='day'></a></p>\n";
    }
    print "<table>\n";
    foreach my $span (sort { ($a || 9999999) <=> ($b || 9999999) } keys %stats)
    {
    	print
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th colspan='6'>", ($span == 0 ? "Overall" : "Last @{[&format_timespan($span)]}"), "</th></tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th>Age</th>",
	  "<th>From</th>",
	  "<th>To</th>",
	  "<th>Files</th>",
	  "<th>Total Size</th>",
	  "<th>Aggregate Rate</th>",
	  "</tr>\n";
	foreach my $row ((sort { $b->{SZ_TOTAL} <=> $a->{SZ_TOTAL} }
			  @{$stats{$span}{'N'}}), @{$stats{$span}{'T'}})
	{
	    my $bps = ($row->{TIME_SPAN} ? $row->{SZ_TOTAL} / $row->{TIME_SPAN} : -1);
	    print "<tr>",
		  "<td>", &age($now - $row->{TIMESTAMP}), "</td>",
		  ($row->{FROM_NODE}
		   ? "<td>$row->{FROM_NODE}</td><td>$row->{TO_NODE}</td>"
		   : "<td colspan='2'>Total</td>"),
	          "<td>$row->{N_TOTAL}</td>",
	          "<td align='right'>@{[&format_size($row->{SZ_TOTAL})]}</td>",
		  "<td align='right'>", ($bps >= 0 ? &format_size($bps) . '/s' : &format_num(0)), "</td>",
	          "</tr>\n";
	}
    }
    print "</table>\n<hr>\n";
}

sub dbreports
{
    my $reportdir = "/afs/cern.ch/cms/aprom/phedex/DailyReports";
    my @reports = sort <$reportdir/$dbid-*.txt*>;
    print "<h2>Daily Reports</h2>\n";
    print "<pre>\n";
    foreach my $file (@reports)
    {
	my $basename = $file; $basename =~ s|.*/||;
	my $cleanname = $basename; $cleanname =~ s|^$dbid-||;
	print "<a href='" . &relurl("page" => "dbreport", "reportfile" => $cleanname) . "'>$cleanname</a>\n";
    }

    print "</pre>\n";
}

sub dbreport
{
    my $reportdir = "/afs/cern.ch/cms/aprom/phedex/DailyReports";
    my $report = param('reportfile');
    print "<pre align='left'>\n";
    if ($report && $report =~ m|^[-A-Za-z0-9.]+$|)
    {
	my $reportfile = "$reportdir/$dbid-$report";
	if (-f $reportfile)
	{
	    open (REPORT, $reportfile =~ /.gz$/ ? "gzip -dc < $reportfile |" : "< $reportfile");
	    print <REPORT>;
	    close (REPORT);
	}
    }
    print "</pre>\n";
}

sub rateplot
{
    print "<h2>Transfer rate plots</h2>\n";
    my @plotorder = qw(l48h l72h l96h l132h l7d l14d l30d l90d l6w ad aw am);
    my %plots = ("l48h" => [ "48:hour", "Last 48 Hours" ],
	         "l72h" => [ "72:hour", "Last 72 Hours" ],
	         "l96h" => [ "96:hour", "Last 96 Hours" ],
	         "l132h" => [ "132:hour", "Last 132 Hours" ],
	         "l7d" => [ "7:day", "Last 7 Days" ],
	         "l14d" => [ "14:day", "Last 14 Days" ],
	         "l30d" => [ "30:day", "Last 30 Days" ],
	         "l90d" => [ "90:day", "Last 90 Days" ],
		 "l6w" => [ "6:week", "Last 6 Weeks" ],
	         "ad" => [ "0:day", "Daily Since Start" ],
		 "aw" => [ "0:week", "Weekly Since Start" ],
		 "am" => [ "0:month", "Monthly Since Start" ]);
    my $plot = param("plot");
    my $filter = param("filter") || '';
    $plot = 'l48h' if (! $plot || ! exists $plots{$plot});

    print "<p><form method='GET' action='@{[&relurl()]}'>\n",
          "<input type='hidden' name='page' value='@{[param('page')]}'>\n",
          "<input type='hidden' name='db' value='@{[param('db')]}'>\n",
          "<select name='plot' onchange='submit()'>";
    foreach my $p (@plotorder)
    {
	print "<option ", ($plot eq $p ? 'selected=selected' : ''),
	      " value='$p'>$plots{$p}[1]</option>";
    }
    print "</select>\n",
          "Filter ",
	  $cgi->textfield(-name=>'filter', -default=>$filter, -size=>15),
    	  "<input type='submit' value='Update'></form>\n";
    foreach my $kind (qw(rate total))
    {
	my ($last, $unit) = $plots{$plot}[0] =~ /([^:]+)/g;
	print "<p><img width=900 height=400 src='",
	      "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/perf-graph.php?",
	      &urlencode('db' => $db, 'span' => $unit, 'kind' => $kind,
		         'last' => $last, 'filter' => $filter),
	      "'>";
    }
}

sub qplot
{
    print "<h2>Transfer quality plots</h2>\n";
    my @plotorder = qw(l8h l12h l24h l48h l72h l96h l132h l7d l14d l30d l90d l6w ad aw am);
    my %plots = ("l8h" => [ "8:hour", "Last 8 Hours" ],
	         "l12h" => [ "12:hour", "Last 12 Hours" ],
	         "l24h" => [ "24:hour", "Last 24 Hours" ],
	         "l48h" => [ "48:hour", "Last 48 Hours" ],
	         "l72h" => [ "72:hour", "Last 72 Hours" ],
	         "l96h" => [ "96:hour", "Last 96 Hours" ],
	         "l132h" => [ "132:hour", "Last 132 Hours" ],
	         "l7d" => [ "7:day", "Last 7 Days" ],
	         "l14d" => [ "14:day", "Last 14 Days" ],
	         "l30d" => [ "30:day", "Last 30 Days" ],
	         "l90d" => [ "90:day", "Last 90 Days" ],
		 "l6w" => [ "6:week", "Last 6 Weeks" ],
	         "ad" => [ "0:day", "Daily Since Start" ],
		 "aw" => [ "0:week", "Weekly Since Start" ],
		 "am" => [ "0:month", "Monthly Since Start" ]);
    my $plot = param("plot");
    my $filter = param("filter") || '';
    $plot = $plotorder[0] if (! $plot || ! exists $plots{$plot});

    print "<p><form method='GET' action='@{[&relurl()]}'>\n",
          "<input type='hidden' name='page' value='@{[param('page')]}'>\n",
          "<input type='hidden' name='db' value='@{[param('db')]}'>\n",
          "<select name='plot' onchange='submit()'>";
    foreach my $p (@plotorder)
    {
	print "<option ", ($plot eq $p ? 'selected=selected' : ''),
	      " value='$p'>$plots{$p}[1]</option>";
    }
    print "</select>\n",
          "Filter ",
	  $cgi->textfield(-name=>'filter', -default=>$filter, -size=>15),
    	  "<input type='submit' value='Update'></form>\n";
    foreach my $kind (qw(completed_ratio failed_ratio attempted completed failed))
    {
	my ($last, $unit) = $plots{$plot}[0] =~ /([^:]+)/g;
	print "<p><img width=900 height=400 src='",
	      "http://cmsdoc.cern.ch/cms/aprom/phedex/WebSite/cgi-bin/quality-graph.php?",
	      &urlencode('db' => $db, 'span' => $unit, 'kind' => $kind,
		         'last' => $last, 'filter' => $filter),
	      "'>";
    }
}

sub end {
    print end_form();
    $dbh->disconnect();
}
