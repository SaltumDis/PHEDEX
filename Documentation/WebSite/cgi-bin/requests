#!/usr/bin/env perl

use strict;
use warnings;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use POSIX;
use DBI;

my $cgi = new CGI;
my $db = param("db") || "pdb01";    # tnsname of the database
my $dbh;

my $badcolor = '#ff9e9e';
my $warncolor = '#ffd89e';
my $pendcolor = '#ccccff'; # ececff
my $goodcolor = '#ccffcc';
my $altcolor = '#e8e8e8';

# ###############################################
# Main loop
# ###############################################

intro();
end();

# ###############################################
# Subroutines
# ###############################################

sub intro
{
    $| = 1;
    my $stamp = strftime ("%Y-%m-%d %H:%M:%S %Z", localtime(time()));
    print $cgi->header();
    print start_form();
    print qq{
    <html>
    <title>PhEDEx Transfer Request Status</title>
    <body bgcolor='#FFFFFF'>
    <center>
    <h1>PhEDEx Transfer Request Status</h1>
    <table>
    <tr><td colspan=7 align='center'>$stamp</td></tr>
    <tr><td colspan=7 align='center'><select name='db'>"},
    "<option value='devdb9'@{[$db eq 'devdb9' && ' selected=selected']}>Test</option>",
    "<option value='pdb01'@{[$db eq 'pdb01' && ' selected=selected']}>Production</option>",
    "</select></td></tr></table>\n";

    $ENV{TNS_ADMIN} = "/afs/cern.ch/project/oracle/admin";
    $ENV{ORACLE_HOME} = "/afs/cern.ch/project/oracle/\@sys/8174";
    $ENV{LD_LIBRARY_PATH} = "/afs/cern.ch/project/oracle/\@sys/8174/lib";
    $dbh = DBI->connect ("DBI:Oracle:$db", 'CMS_TRANSFERMGMT', 'smallAND_round',
	    		 { RaiseError=>1, AutoCommit =>1 });

    main();
    print "</body></html>\n";
}

sub end {
    print end_form();
    $dbh->disconnect();
}

sub main
{
    my %status = ();
    my %cats = ();
    my $query = $dbh->prepare(qq{
	select
	  fs.request_name,
	  f.drop_name,
	  d.drop_category,
	  fs.guid,
	  fs.location,
	  fs.is_available,
	  fs.is_pending,
	  fs.is_transferred
	from t_request_file_status fs
	left join t_request_file f
	  on f.request_name = fs.request_name
	  and f.guid = fs.guid
  	left join t_request_drop d
	  on d.request_name = f.request_name
	  and d.drop_name = f.drop_name});

    $query->execute();
    while (my ($req, $drop, $cat, $guid, $loc, @stats) = $query->fetchrow())
    {
	$cats{$cat} = 1;
	$status{$req}{DROPS}{$drop} = 1;
	$status{$req}{DROPS_IN_CAT}{$cat}{$drop} = 1;
	$status{$req}{LOCS}{$loc} = 1;
	$status{$req}{FILES}{$guid} = 1;
	$status{$req}{FILES_IN_CAT}{$cat}{$guid} = 1;
	$status{$req}{FILE_STATS}{$loc}
	   ||= { AVAILABLE => 0, PENDING => 0, TRANSFERRED => 0 };
	$status{$req}{FILE_STATS}{$loc}{AVAILABLE}++ if $stats[0];
	$status{$req}{FILE_STATS}{$loc}{PENDING}++ if $stats[1];
	$status{$req}{FILE_STATS}{$loc}{TRANSFERRED}++ if $stats[2];
    }
    $query->finish();

    print "<h2>Request status</h2>\n",
          "<table><tr valign='top' bgcolor='$altcolor'>",
	  "<th rowspan='2'>Request</th>",
	  "<th colspan='@{[scalar (keys %cats) + 1]}'>Drops</th>",
	  "<th colspan='@{[scalar (keys %cats) + 1]}'>Files</th>",
	  "<th rowspan='2'>Origin</th>",
	  "<th rowspan='2'>Transferred</th>",
	  "<th rowspan='2'>Pending</th>",
	  "<th rowspan='2'>Available</th>",
	  "</tr>\n",
	  "<tr valign='top' bgcolor='$altcolor'>",
	  "<th>Total</th>",
	  (map { "<th>$_</th>" } sort keys %cats),
	  "<th>Total</th>",
	  (map { "<th>$_</th>" } sort keys %cats),
	  "</tr>\n";

    foreach my $req (sort keys %status)
    {
	my $info = $status{$req};
	my %dincats = map { $_ => scalar keys %{$info->{DROPS_IN_CAT}{$_}} } keys %cats;
	my %fincats = map { $_ => scalar keys %{$info->{FILES_IN_CAT}{$_}} } keys %cats;
	my $ndrops = scalar keys %{$info->{DROPS}};
	my $nlocs = scalar keys %{$info->{LOCS}};
	my $nfiles = scalar keys %{$info->{FILES}};
	my $nfiles = scalar keys %{$info->{FILES}};
	print "<tr valign='top'>",
	      "<td rowspan='$nlocs'>$req</td>",
	      "<td rowspan='$nlocs'>$ndrops</td>",
	      (map { "<td rowspan='$nlocs'>$dincats{$_}</td>" } sort keys %cats),
	      "<td rowspan='$nlocs'>$nfiles</td>",
	      (map { "<td rowspan='$nlocs'>$fincats{$_}</td>" } sort keys %cats);
	my $first = 1;
        foreach my $loc (sort keys %{$info->{LOCS}})
	{
	    my $stats = $info->{FILE_STATS}{$loc};
	    print "<tr>" if ! $first;
	    print "<td>$loc</td>",
	          "<td>$stats->{TRANSFERRED}</td>",
	          "<td>$stats->{PENDING}</td>",
	          "<td>$stats->{AVAILABLE}</td>",
		  "</tr>\n";
	    $first = 0;
	}
    }
    print "</table>\n";
}

sub format_num {
    my ($n) = @_;
    return $n ? "$n" : '&#8211;';
}

sub format_size {
    my ($bytes, $nodash) = @_;
    my @bounds = ([ 2**10, 'k' ], [ 2**20, 'M' ], [ 2**30, 'G' ],
		  [ 2**40, 'T' ], [ 2**50, 'P' ], [ 2**60, 'E' ]);
    my ($val, $unit) = ($bytes, '');
    while (@bounds && $bytes >= $bounds [0][0])
    {
	$val = $bytes / $bounds[0][0];
	$unit = $bounds[0][1];
	shift (@bounds);
    }

    return $bytes || $nodash ? sprintf('%.1f&nbsp;%sB', $val, $unit) : '&#8211;';
}
