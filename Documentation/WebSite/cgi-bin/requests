#!/usr/bin/env perl

use strict;
use warnings;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use POSIX;
use DBI;

my %databases = ("prod" => [ "cms", 'CMS_TRANSFERMGMT', 'smallAND_round' ],
		 "rac" => [ "cmssg", 'CMS_TRANSFERMGMT', 'smallAND_round' ],
		 "test" => [ "devdb", 'CMS_TRANSFERMGMT', 'smallAND_round' ],
		 "testbed" => [ "devdb", 'CMS_TRANSFERMGMT_TESTBED', 'phedexedehp' ]);
my $cgi = new CGI;
my $db = param("db") || "prod";    # tnsname of the database
my $dbh;

my $badcolor = '#ff9e9e';
my $warncolor = '#ffd89e';
my $pendcolor = '#ccccff'; # ececff
my $goodcolor = '#ccffcc';
my $altcolor = '#e8e8e8';

# ###############################################
# Main loop
# ###############################################

intro();
end();

# ###############################################
# Subroutines
# ###############################################

sub intro
{
    $| = 1;
    my $stamp = strftime ("%Y-%m-%d %H:%M:%S %Z", localtime(time()));
    print $cgi->header();
    print start_form();
    print qq{
    <html>
    <title>PhEDEx Transfer Request Status</title>
    <body bgcolor='#FFFFFF'>
    <center>
    <h1>PhEDEx Transfer Request Status</h1>
    <table>
    <tr><td colspan=7 align='center'>$stamp</td></tr>
    <tr><td colspan=7 align='center'><select name='db'>"},
    "<option value='testbed'@{[$db eq 'testbed' && ' selected=selected']}>Testbed</option>",
    "<option value='test'@{[$db eq 'test' && ' selected=selected']}>Test</option>",
    "<option value='rac'@{[$db eq 'rac' && ' selected=selected']}>RAC Test</option>",
    "<option value='prod'@{[$db eq 'prod' && ' selected=selected']}>Production</option>",
    "</select></td></tr></table>\n";

    $ENV{TNS_ADMIN} = "/afs/cern.ch/project/oracle/admin";
    $ENV{ORACLE_HOME} = "/afs/cern.ch/project/oracle/\@sys/10103";
    $ENV{LD_LIBRARY_PATH} = "/afs/cern.ch/project/oracle/\@sys/10103/lib";
    $db = "prod" if ! grep ($db eq $_, keys %databases);
    my ($dbname, $dbuser, $dbpass) = @{$databases{$db}};
    $dbh = DBI->connect ("DBI:Oracle:$dbname", $dbuser, $dbpass,
	    		 { RaiseError=>1, AutoCommit =>1 });

    main();
    print "</body></html>\n";
}

sub end {
    print end_form();
    $dbh->disconnect();
}

sub main
{
    my %status = ();
    my %cats = ();
    my $dquery = $dbh->prepare(qq{
	select
	  d.request_name,
	  d.drop_category,
	  count(distinct d.drop_name),
	  count(f.guid)
	from t_request_drop d
	left join t_request_file f
	  on f.request_name = d.request_name
	 and f.drop_name = d.drop_name
	group by d.request_name, d.drop_category});
    $dquery->execute();
    while (my ($req, $cat, $ndrops, $nfiles) = $dquery->fetchrow())
    {
	$cats{$cat} = 1;
	$status{$req}{DROPS_IN_CAT}{$cat} = $ndrops;
	$status{$req}{DROPS} ||= 0;
	$status{$req}{DROPS} += $ndrops;
	$status{$req}{FILES_IN_CAT}{$cat} = $nfiles;
	$status{$req}{FILES} ||= 0;
	$status{$req}{FILES} += $nfiles;
    }
    $dquery->finish();

    my $fquery = $dbh->prepare(qq{
	select
	  request_name,
	  location,
	  sum(is_available),
	  sum(is_pending),
	  sum(is_transferred)
	from t_request_file_status fs
	group by request_name, location});
    $fquery->execute();
    while (my ($req, $loc, $av, $pend, $trans) = $fquery->fetchrow())
    {
	$status{$req}{FILE_STATS}{$loc}
	    = { AVAILABLE => $av, PENDING => $pend, TRANSFERRED => $trans };
    }
    $fquery->finish();

    print "<h2>Request status</h2>\n",
          "<table><tr valign='top' bgcolor='$altcolor' align='right'>",
	  "<th rowspan='2'>Request</th>",
	  "<th colspan='@{[scalar (keys %cats) + 1]}'>Runs</th>",
	  "<th colspan='@{[scalar (keys %cats) + 1]}'>Files</th>",
	  "<th rowspan='2'>Origin</th>",
	  "<th rowspan='2'>Transferred</th>",
	  "<th rowspan='2'>Pending</th>",
	  "<th rowspan='2'>Available</th>",
	  "</tr>\n",
	  "<tr valign='top' bgcolor='$altcolor'>",
	  "<th>Total</th>",
	  (map { "<th>$_</th>" } sort keys %cats),
	  "<th>Total</th>",
	  (map { "<th>$_</th>" } sort keys %cats),
	  "</tr>\n";

    my $color = "";
    foreach my $req (sort keys %status)
    {
	my $info = $status{$req};
	my %dincats = map { $_ => $info->{DROPS_IN_CAT}{$_} } keys %cats;
	my %fincats = map { $_ => $info->{FILES_IN_CAT}{$_} } keys %cats;
	my $nlocs = scalar keys %{$info->{FILE_STATS}};
	my $ndrops = $info->{DROPS};
	my $nfiles = $info->{FILES};
	print "<tr valign='top' align='right'$color>",
	      "<td rowspan='$nlocs'>@{[&format_num($req)]}</td>",
	      "<td rowspan='$nlocs'>@{[&format_num($ndrops)]}</td>",
	      (map { "<td rowspan='$nlocs'>@{[&format_num($dincats{$_})]}</td>" } sort keys %cats),
	      "<td rowspan='$nlocs'>@{[&format_num($nfiles)]}</td>",
	      (map { "<td rowspan='$nlocs'>@{[&format_num($fincats{$_})]}</td>" } sort keys %cats);
	my $first = 1;
        foreach my $loc (sort keys %{$info->{FILE_STATS}})
	{
	    my $stats = $info->{FILE_STATS}{$loc};
	    print "<tr>" if ! $first;
	    print "<td>$loc</td>",
	          "<td>@{[&format_num($stats->{TRANSFERRED})]}</td>",
	          "<td>@{[&format_num($stats->{PENDING})]}</td>",
	          "<td>@{[&format_num($stats->{AVAILABLE})]}</td>",
		  "</tr>\n";
	    $first = 0;
	}
	
	if (! $color) {
	    $color = " bgcolor='$altcolor'";
	 } else {
	    $color = "";
	 }
    }
    print "</table>\n";
}

sub format_num {
    my ($n) = @_;
    return $n ? "$n" : '&#8211;';
}

sub format_size {
    my ($bytes, $nodash) = @_;
    my @bounds = ([ 2**10, 'k' ], [ 2**20, 'M' ], [ 2**30, 'G' ],
		  [ 2**40, 'T' ], [ 2**50, 'P' ], [ 2**60, 'E' ]);
    my ($val, $unit) = ($bytes, '');
    while (@bounds && $bytes >= $bounds [0][0])
    {
	$val = $bytes / $bounds[0][0];
	$unit = $bounds[0][1];
	shift (@bounds);
    }

    return $bytes || $nodash ? sprintf('%.1f&nbsp;%sB', $val, $unit) : '&#8211;';
}
