#!/usr/bin/env perl
package browser22; use strict; use warnings; use base 'Exporter';
our @EXPORT = qw(runme);
use CGI qw(header param escapeHTML textfield query_string);
use CGI::Carp qw(fatalsToBrowser);
use POSIX qw(strftime);
use DBI;

my ($databases, $dbh, $db);
my $badcolor = '#ff9e9e';
my $warncolor = '#ffd89e';
my $pendcolor = '#ccccff'; # ececff
my $goodcolor = '#ccffcc';
my $altcolor = '#e8e8e8';

sub relurl
{
    my %args = ('db' => $db, @_);
    my $newcgi = new CGI (query_string());
    map { $newcgi->param ($_, $args{$_}) } keys %args;
    return $newcgi->self_url(-full=>0, -relative=>1);
}

sub baseurl
{
    my $curpage = param('page');
    my %args = ('db' => $db, ($curpage ? ('page' => $curpage) : ()), @_);
    my $newcgi = new CGI ("");
    map { $newcgi->param ($_, $args{$_}) } keys %args;
    return $newcgi->self_url(-full=>0, -relative=>1);
}

sub urlencode
{
    eval "use CGI '-oldstyle_urls'";
    my %args = @_; return new CGI (\%args)->query_string();
}

sub dblink
{
    my ($db, $dbother) = @_;
    my $othername = $$databases{$dbother}[3];
    return "<a href='" . &baseurl ('db' => $dbother)
         . ($db eq $dbother ? "' class='selected' " : "' ")
    	 . "title='$othername Database Instance'>$othername</a>";
}

sub runme
{
    $databases = shift(@_);
    $db = shift(@_);
    my @dbnames = @_;

    my ($dbtns, $dbuser, $dbpass, $dbid, $dbversion) = @{$$databases{$db}};

    # Select page we are visiting
    my @pageinfo = ([ 'main',		\&main,		"Component Status" ],
	            [ 'transfer',	\&transfer,	"Transfer State" ],
		    [ 'tstates',	\&tstates,	"Transfer State Details" ],
		    [ 'replicas',	\&replicas,	"Replica State" ],
		    [ 'subs',		\&subs,		"Subscriptions" ],
		    [ 'stats',		\&stats,	"File Size Stats" ],
		    [ 'rates',		\&rates,	"Transfer Rate" ],
		    [ 'rateplot',	\&rateplot,	"Transfer Rate Plots" ],
		    [ 'pplot',		\&rateplot,	"Transfer Queue Plots" ],
		    [ 'qplot',		\&qplot,	"Transfer Quality Plots" ],
		    [ 'agents',		\&agents,	"Agent Status" ],
		    [ 'dbreports',	\&dbreports,	"Daily Reports" ],
		    [ 'dbreport',	\&dbreport,	"Daily Report" ]);
    my %pagemap = map { $pageinfo[$_][0] => $_ } 0 .. $#pageinfo;
    my $pagename = param('page');
    my $page = ($pagename && exists $pagemap{$pagename} ? $pagemap{$pagename} : 0);

    # Initialise page template
    my $templatef = $0; $templatef =~ s|/[^/]+$||; $templatef .= "/template.html";
    my $template = do { open(T, "< $templatef"); local $/; undef $/; my $x = <T>; close(T); $x };
    my $replacements = {
     	'CONTENT' => '',
	'PAGETITLE' => $pageinfo[$page][2],
	'TIME'	=> strftime ("%Y-%m-%d %H:%M:%S GMT", gmtime(time())),
	'DBID' => $dbid,
	'DB' => $db,
	'DBSELECTOR' =>
	    ("  <ul id='navmain'>\n" .
	     "    <li class='first'>Database: " .  &dblink ($db, $dbnames[0]) .
	     "</li>\n    " .
	     join ("\n    ",
		   map { "<li>" . &dblink ($db, $_) . "</li>" }
		   @dbnames[1 .. $#dbnames]) .
	     "\n  </ul>\n"),
	'PAGESELECTOR' =>
	    (join("", map { ($_ ? "<br>" : "") .
			    "<a href='" . &baseurl ('page' => $pageinfo[$_][0]) .
			    "'>$pageinfo[$_][2]</a>\n    " }
		      grep (defined $pageinfo[$_][2], 0 .. $#pageinfo))),

    };

    # Execute the desired page.  We save old STDOUT to print to it
    # later, then redirect the page routine's output to CONTENT.
    my $output = "";
    open (OUT, ">", \$output);
    eval
    {
        # Connect to the database, do the page, the disconnect
        # $ENV{TNS_ADMIN} = "/afs/cern.ch/project/oracle/admin";
        # $ENV{ORACLE_HOME} = "/afs/cern.ch/project/oracle/\@sys/10103";
        # $ENV{LD_LIBRARY_PATH} = "/afs/cern.ch/project/oracle/\@sys/10103/lib";
	# print STDERR "\$TNS_ADMIN = $ENV{TNS_ADMIN}\n";
	# print STDERR "\$LD_LIBRARY_PATH = $ENV{LD_LIBRARY_PATH}\n";
        $dbh = DBI->connect ("DBI:Oracle:$dbtns", $dbuser, $dbpass,
	    		     { RaiseError=>1, AutoCommit =>1 });
	&{$pageinfo[$page][1]} ();
        $dbh->disconnect();
    };

    if ($@)
    {
	my $message = $@;
	$message = &escapeHTML($message);
	print OUT
	      "<div align='left'>\n",
	      "<p>Apologies, looks like we have a server error,",
	      " details of which below.</p>\n",
	      "<p><i>$message</i></p>\n",
	      "</div>\n";
    }
    close(OUT);
    $replacements->{CONTENT} = join("\n", $output);

    # Instantiate the template and spit it out
    while (my ($key, $value) = each %$replacements)
    {
	$template =~ s/\@$key\@/$value/g;
    }

    print header(-type => 'text/html');
    print $template;
}

sub main
{
    my $active = 60*5;
    my $offline = 60*15;
    my $now = time ();
    my $query = $dbh->prepare(q{select node,agent,timestamp from t_agent_status});
    my %agents;
    my %status;

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($node, $agent, $contact) = @$row;
	$status{$node}{$agent} = $contact;
	$agents{$agent} = 1;
    }
    $query->finish();

    my @admin = grep (/^Block/, sort keys %agents);
    my @standard = grep (!/^Block/, sort keys %agents);

    foreach my $item (([ "Administrative", @admin ], [ "Common", @standard ]))
    {
	my ($type, @agents) = @{$item};
        print OUT "<p><table class='striped'>\n",
	      "<tbody>\n",
	      "<tr class='selected'>\n",
	      " <td align='center' colspan='" . (scalar @agents + 1) . "'>$type Agents</td>\n",
	      "</tr>\n",
	      "<tr class='selected'>\n",
	      " <th>Node</th>\n",
	      (map { " <th>$_</th>\n" } @agents),
	      "</tr>\n";

        foreach my $node (sort keys %status)
        {
	    next if ! grep (defined $status{$node}{$_}, @agents);

	    print OUT "<tr>\n",
	          " <td>$node</td>\n";
            foreach my $agent (@agents)
	    {
	        my $contact = $status{$node}{$agent};
	        if (! defined $contact)
	        {
		    print OUT " <td>&nbsp;</td>\n";
		    next;
	        }

	        my $ago = &age ($now - $contact);
	        if (($now - $contact) < $active) {
                    print OUT "<td align='center' bgcolor='$goodcolor'>UP</td>\n";
	        } elsif (($now - $contact) < $offline) {
                    print OUT "<td align='center' bgcolor='$goodcolor'>UP ($ago ago)</td>\n";
                } else {
                    print OUT "<td align='center' bgcolor='$badcolor'>DOWN ($ago ago)</td>\n";
                }
	    }
	    print OUT "</tr>\n";
        }
        print OUT "</tbody>\n",
              "</table>\n";
   }
}

sub format_num {
    my ($n) = @_;
    return $n ? "$n" : '&#8211;';
}

sub format_size {
    my ($bytes, $nodash, $precision, $minscale) = @_;
    my @bounds = ([ 2**10, 'k' ], [ 2**20, 'M' ], [ 2**30, 'G' ],
		  [ 2**40, 'T' ], [ 2**50, 'P' ], [ 2**60, 'E' ]);
    my ($val, $unit, $minus) = ($bytes, '', $bytes < 0 ? "-" : "");
    do { $val = -$val; $bytes = -$bytes; } if $minus;
    while (@bounds && ($bytes >= $bounds [0][0] || defined $minscale))
    {
	$val = $bytes / $bounds[0][0];
	$unit = $bounds[0][1];
	undef $minscale if (defined $minscale && $minscale eq $unit);
	shift (@bounds);
    }

    $precision = "1" if ! defined $precision;
    return $bytes || $nodash
           ? sprintf("%s%.${precision}f&nbsp;%sB", $minus, $val, $unit)
	   : '&#8211;';
}

sub transfer {
    my $rows = 0;
    my $now = time();
    my $query = $dbh->prepare(qq{
	    select
	      node, timestamp,
	      dest_files, dest_bytes,
	      node_files, node_bytes,
	      xfer_files, xfer_bytes,
	      expt_files, expt_bytes
	    from t_info_transfer_status
	    order by node});

    print OUT "<p><table class='striped'>\n",
          "<tbody>\n",
          "<tr class='selected'>\n",
	  " <th rowspan='2'>Age</th>\n",
	  " <th rowspan='2'>Node</th>\n",
    	  " <th colspan='2'>Destined</th>\n",
	  " <th colspan='2'>On Site</th>\n",
	  " <th colspan='2'>In Transfer</th>\n",
	  " <th colspan='2'>In Export</th>\n",
          "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th align='right'>N</th><th align='right'>Size</th>\n",
	  " <th align='right'>N</th><th align='right'>Size</th>\n",
	  " <th align='right'>N</th><th align='right'>Size</th>\n",
	  " <th align='right'>N</th><th align='right'>Size</th>\n",
          "</tr>\n";

    $query->execute();
    my ($tdest_files, $tdest_size,
	$tnode_files, $tnode_size,
	$txfer_files, $txfer_size,
	$texpt_files, $texpt_size) = (0) x 8;

    while (my $row = $query->fetchrow_arrayref)
    {
	my ($n, $stamp,
	    $dest_files, $dest_size,
	    $node_files, $node_size,
	    $xfer_files, $xfer_size,
	    $expt_files, $expt_size) = @$row;

    	$tdest_files += $dest_files; $tdest_size += $dest_size;
    	$tnode_files += $node_files; $tnode_size += $node_size;
    	$txfer_files += $xfer_files; $txfer_size += $xfer_size;
    	$texpt_files += $expt_files; $texpt_size += $expt_size;

	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $node_color = (($dest_files && $node_files < $dest_files) ? " bgcolor='$pendcolor'"
		   	  : $xfer_files ? " bgcolor='$pendcolor'" : "");
	my $xfer_color = (($xfer_files) ? " bgcolor='$goodcolor'"
			  : ($xfer_files + $node_files < $dest_files) ? " bgcolor='$pendcolor'"
			  : "");
	my $expt_color = (($expt_files) ? " bgcolor='$goodcolor'" : "");

        print OUT "<tr>\n",
	      " <td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>\n",
	      " <td>$n</td>\n",
	      " <td align='right'>@{[&format_num($dest_files)]}</td>\n",
	      " <td align='right'>@{[&format_size($dest_size)]}</td>\n",
	      " <td align='right'$node_color>@{[&format_num($node_files)]}</td>\n",
	      " <td align='right'$node_color>@{[&format_size($node_size)]}</td>\n",
	      " <td align='right'$xfer_color>@{[&format_num($xfer_files)]}</td>\n",
	      " <td align='right'$xfer_color>@{[&format_size($xfer_size)]}</td>\n",
	      " <td align='right'$expt_color>@{[&format_num($expt_files)]}</td>\n",
	      " <td align='right'$expt_color>@{[&format_size($expt_size)]}</td>\n",
	      "</tr>\n";
    }
    my $node_color = (($tdest_files && $tnode_files < $tdest_files) ? " bgcolor='$pendcolor'"
		      : ($txfer_files) ? " bgcolor='$pendcolor'" : "");
    my $xfer_color = (($txfer_files) ? " bgcolor='$goodcolor'"
		      : ($txfer_files + $tnode_files < $tdest_files) ? " bgcolor='$pendcolor'"
		      : "");
    my $expt_color = (($texpt_files) ? " bgcolor='$goodcolor'" : "");

    print OUT "<tr>\n",
	  " <th>&nbsp;</th>\n",
	  " <th align='left'>Total</th>\n",
	  " <th align='right'>@{[&format_num($tdest_files)]}</th>\n",
	  " <th align='right'>@{[&format_size($tdest_size)]}</th>\n",
	  " <th align='right'$node_color>@{[&format_num($tnode_files)]}</th>\n",
	  " <th align='right'$node_color>@{[&format_size($tnode_size)]}</th>\n",
	  " <th align='right'$xfer_color>@{[&format_num($txfer_files)]}</th>\n",
	  " <th align='right'$xfer_color>@{[&format_size($txfer_size)]}</th>\n",
	  " <th align='right'$expt_color>@{[&format_num($texpt_files)]}</th>\n",
	  " <th align='right'$expt_color>@{[&format_size($texpt_size)]}</th>\n",
	  "</tr>\n";
    $query->finish();
    print OUT "</tbody>\n",
          "</table>\n";
}

sub tstates {
    my $rows = 0;
    my $now = time();
    my $query = $dbh->prepare(qq{
	    select
	      timestamp,
	      to_node, from_node,
	      to_state, from_state,
	      files, bytes
	    from t_info_transfer_states
	    order by to_node, from_node, to_state, from_state});

    print OUT "<p><table class='striped'>\n",
          "<tbody>\n",
	  "<tr class='selected'>\n",
	  " <th colspan='7' align='center'>Transfer State Details</th>\n",
	  "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th rowspan='2'>Age</th>\n",
	  " <th colspan='2'>To</th>\n",
	  " <th colspan='2'>From</th>\n",
	  " <th colspan='2'>Files</th>\n",
          "</tr>\n",
	  "<tr class='selected'>",
	  " <th>Node</th>\n",
	  " <th>State</th>\n",
	  " <th>Node</th>\n",
	  " <th>State</th>\n",
	  " <th>N</th>\n",
	  " <th>Size</th>\n",
          "</tr>\n";

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($stamp,
	    $to_node, $from_node,
	    $to_state, $from_state,
	    $files, $bytes) = @$row;

	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $to_state_name = ($to_state == 0 ? "assigned"
			     : $to_state == 1 ? "wanted"
			     : $to_state == 2 ? "in transfer"
			     : $to_state == 3 ? "transferred"
			     : ($to_state >= 100 && $to_state < 999)
			     ? "error cool-off @{[$to_state-100]}"
			     : "unknown");
	my $from_state_name = ($from_state == 0 ? "assigned"
			       : $from_state == 1 ? "transferrable"
			       : "unknown");
	my $to_color = (($to_state == 2) ? " bgcolor='$goodcolor'"
		   	: ($to_state == 1) ? " bgcolor='$pendcolor'"
		   	: ($to_state >= 100) ? " bgcolor='$warncolor'"
			: "");
	my $from_color = ($from_state == 1 ? " bgcolor='$goodcolor'" : "");
        print OUT "<tr>\n",
	      " <td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>\n",
	      " <td>$to_node</td>\n",
	      " <td align='right'$to_color>$to_state</td>\n", # ($to_state_name)
	      " <td>$from_node</td>\n",
	      " <td align='right'$from_color>$from_state</td>\n", # ($from_state_name)
	      " <td align='right'>@{[&format_num($files)]}</td>\n",
	      " <td align='right'>@{[&format_size($bytes)]}</td>\n",
	      "</tr>\n";
    }
    $query->finish();
    print OUT "</tbody>\n",
          "</table>\n",
	  "</p>\n";

    $query = $dbh->prepare(qq{
	    select timestamp, node, state, files, bytes
	    from t_info_replica_states order by node, state});

    print OUT "<table class='striped'>\n",
          "<tbody>\n",
	  "<tr class='selected'>\n",
	  " <th colspan='5' align='center'>Replica State Details</th>\n",
	  "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th rowspan='2'>Age</th>",
	  " <th rowspan='2'>Node</th>",
	  " <th rowspan='2'>State</th>",
	  " <th colspan='2'>Files</th>",
          "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th>N</th>\n",
	  " <th>Size</th>\n",
          "</tr>\n";

    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($stamp, $node, $state, $files, $bytes) = @$row;
	my $stampcolor = ($now - $stamp < 5*60) ? '' : " bgcolor='$warncolor'";
	my $state_name = ($state == 0 ? "at node"
			     : $state == 1 ? "on disk"
			     : "unknown");
	my $color = (($state == 1) ? " bgcolor='$goodcolor'" : "");
        print OUT "<tr>\n",
	      " <td$stampcolor>", ($now - $stamp < 5*60 ? 'Current' : &age($now - $stamp)), "</td>\n",
	      " <td>$node</td>\n",
	      " <td$color>$state</td>\n", # ($state_name)
	      " <td$color align='right'>@{[&format_num($files)]}</td>\n",
	      " <td$color align='right'>@{[&format_size($bytes)]}</td>\n",
	      "</tr>\n";
    }
    $query->finish();
    print OUT "</tbody>\n",
          "</table>\n",
	  "</p>\n";
}

sub replicas {
    my $rows = 0;
    my %data = ();
    my %sites = ();
    my $nodepat = param('nodepat') || 'CERN_MSS';
    my $datapat = param('datapat') || '';
    print OUT "<p style='text-align: left'><form method='GET' action='@{[&baseurl()]}'>\n",
          "<input type='hidden' name='page' value='@{[param('page')]}'>\n",
          "<input type='hidden' name='db' value='@{[param('db')]}'>\n",
          "Filter: Data ",
	  textfield(-name=>'datapat', -default=>$datapat, -size=>15),
          " Nodes ",
	  textfield(-name=>'nodepat', -default=>$nodepat, -size=>15),
    	  " <input type='submit' value='Update'></form></p>\n";

    my $query = $dbh->prepare(qq{
	    select
	      owner,
	      dataset,
	      n_runs,
	      n_files,
	      sz_files
	    from t_info_replication_overview});
    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($o, $ds, $runs, $files, $total) = @$row;
	next if ($datapat && "$o/$ds" !~ /$datapat/);
	$data{"$o:$ds"} = [ $o, $ds, $files, $total, $runs, {} ];
    }
    $query->finish();

    $query = $dbh->prepare (qq{
	    select
	      owner,
	      dataset,
	      node,
	      n_files,
	      sz_files
	    from t_info_replication_details});
    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($o, $ds, $site, $files, $total) = @$row;
	next if ($datapat && "$o/$ds" !~ /$datapat/);
	next if ($nodepat && $site !~ /$nodepat/);
	$data{"$o:$ds"}[5]{$site} = [ $files, $total ];
	$sites{$site} = 1;
    }
    $query->finish();

    print OUT "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Owner</th>",
	  "<th rowspan='2'>Dataset</th>",
	  "<th rowspan='2' align='right'>Runs</th>",
	  "<th colspan='2' align='right'>Files</th>",
	  (map { "<th colspan='2'>$_</th>" } sort keys %sites),
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  (map { "<th align='right'>N</th><th align='right'>Size</th>" } sort keys %sites),
	  "</tr>\n";

    foreach my $dso (sort { $a->[1] cmp $b->[1] || $a->[0] cmp $b->[0] } values %data)
    {
        my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	my ($o, $ds, $files, $total, $runs, $sites) = @$dso;
	next if ($nodepat && ! grep (/$nodepat/, keys %$sites));
        print OUT "<tr valign='top'$rowcolor>",
	      "<td>$o</td>",
	      "<td>$ds</td>",
	      "<td align='right'>$runs</td>",
	      "<td align='right'>$files</td>",
	      "<td align='right'>@{[&format_size($total)]}</td>";

	foreach my $site (sort keys %sites)
	{
	    if (exists $sites->{$site})
	    {
		my ($sfiles, $stotal) = @{$sites->{$site}};
		my $scolor = ($sfiles == $files) ? '' : " bgcolor='$pendcolor'";
		print OUT "<td$scolor align='right'>@{[&format_num($sfiles)]}</td>",
		      "<td$scolor align='right'>@{[&format_size($stotal)]}</td>";
	    }
	    else
	    {
		print OUT "<td colspan='2'>&nbsp;</td>";
	    }
        }
	print OUT "</tr>\n";
    }
    print OUT "</table>";
}

sub subs {
    my $rows = 0;
    my %data = ();
    my %sites = ();
    my $nodepat = param('nodepat') || 'CERN_MSS';
    my $datapat = param('datapat') || '';
    print OUT "<p style='text-align: left'><form method='GET' action='@{[&baseurl()]}'>\n",
          "<input type='hidden' name='page' value='@{[param('page')]}'>\n",
          "<input type='hidden' name='db' value='@{[param('db')]}'>\n",
          "Filter: Data ",
	  textfield(-name=>'datapat', -default=>$datapat, -size=>15),
          " Nodes ",
	  textfield(-name=>'nodepat', -default=>$nodepat, -size=>15),
    	  " <input type='submit' value='Update'></form></p>\n";

    my $query = $dbh->prepare(qq{
	    select
	      owner,
	      dataset,
	      destination,
	      n_files,
	      sz_files,
	      n_files_at_dest,
	      sz_files_at_dest
	    from t_info_subscriptions});
    $query->execute();
    while (my $row = $query->fetchrow_arrayref)
    {
	my ($ow, $ds, $site, $files, $total, $sfiles, $stotal) = @$row;
	next if ($datapat && "$ow/$ds" !~ /$datapat/);
	next if ($nodepat && $site !~ /$nodepat/);
	$data{$ds}{$ow} ||= [ $ow, $ds, $files, $total, {} ];
	if ($site)
	{
	    $data{$ds}{$ow}[4]{$site} = [ $sfiles, $stotal ];
	    $sites{$site} = 1;
        }
    }
    $query->finish();

    print OUT "<table><tr bgcolor='$altcolor' valign='top'>",
	  "<th rowspan='2'>Owner</th>",
	  "<th rowspan='2'>Dataset</th>",
	  # "<th rowspan='2' align='right'>Runs</th>",
	  "<th colspan='2' align='right'>Files</th>",
	  (map { "<th rowspan='2'>$_</th>" } sort keys %sites),
          "</tr>\n",
	  "<tr bgcolor='$altcolor' valign='top'>",
	  "<th align='right'>N</th><th align='right'>Size</th>",
	  "</tr>\n";

    foreach my $ds (sort keys %data)
    {
        foreach my $ow (sort keys %{$data{$ds}})
        {
	    my ($ow, $ds, $files, $total, $sites) = @{$data{$ds}{$ow}};
            my $rowcolor = ($rows++ % 8 < 4) ? '' : " bgcolor='$altcolor'";
	    my $dscolor = (scalar (keys %$sites) ? '' : " bgcolor='$warncolor'");
            print OUT "<tr valign='top'$rowcolor>",
	          "<td$dscolor><a href='subscribe?owner=$ow&dataset=$ds&db=$db'>$ow</a></td>",
	          "<td$dscolor><a href='subscribe?owner=$ow&dataset=$ds&db=$db'>$ds</a></td>",
	          "<td align='right'>@{[&format_num($files)]}</td>",
	          "<td align='right'>@{[&format_size($total)]}</td>";

	    foreach my $site (sort keys %sites)
	    {
	        if (exists $sites->{$site})
	        {
		    my ($sfiles, $stotal) = @{$sites->{$site}};
		    my $scolor = ($sfiles == $files) ? '' : " bgcolor='$pendcolor'";
		    my $fracfiles = ($files ? sprintf('%0.2f', $sfiles / $files) : '&#8211;');
		    my $fractotal = ($total ? sprintf('%0.2f', $stotal / $total) : '&#8211;');
		    print OUT "<td$scolor align='right'>$fracfiles&nbsp;/&nbsp;$fractotal</td>";
	        }
	        else
	        {
		    print OUT "<td>&nbsp;</td>";
	        }
            }
	    print OUT "</tr>\n";
	}
    }
    print OUT "</table>";
}

sub age {
    my ($diff) = @_;
    my $str = "";
    my $full = 0;
    if ($diff >= 86400) {
	$str .= sprintf("%dd", $diff / 86400);
	$diff %= 86400;
	$full = 1;
    }
    $str .= sprintf("%dh", $diff / 3600);
    $diff %= 3600;
    $str .= sprintf("%02d", $diff / 60);
}

sub stats {
    my $now = time();
    my $overview = $dbh->selectrow_arrayref(qq{
			select
			  timestamp,
			  n_files,
			  sz_total,
			  sz_min,
			  sz_max,
			  sz_mean,
			  sz_median
			from t_info_file_size_overview});
    my $histo = $dbh->selectall_arrayref(qq{
	    		select
			  timestamp,
			  bin_low,
			  bin_width,
			  n_total,
			  sz_total
			from t_info_file_size_histogram
			order by bin_low asc});

    print OUT "<p>",
          "<table class='striped'>\n",
          "<tbody>\n",
	  "<tr class='selected'>\n",
	  " <th colspan='6'>File size statistics ", &age($now - $overview->[0]), " ago</th>\n",
	  "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th>Files</th>\n",
	  " <th>Total Size</th>\n",
	  " <th>Min Size</th>\n",
	  " <th>Max Size</th>\n",
	  " <th>Mean Size</th>\n",
	  " <th>Median Size</th>\n",
	  "</tr>\n",
	  "<tr>\n",
	  " <td align='right'>@{[&format_num($overview->[1])]}</td>\n",
	  " <td align='right'>@{[&format_size($overview->[2], 0, 2, 'T')]}</td>\n",
	  " <td align='right'>@{[&format_size($overview->[3], 0, 2, 'M')]}</td>\n",
	  " <td align='right'>@{[&format_size($overview->[4], 0, 2, 'G')]}</td>\n",
	  " <td align='right'>@{[&format_size($overview->[5], 0, 2, 'M')]}</td>\n",
	  " <td align='right'>@{[&format_size($overview->[6], 0, 2, 'M')]}</td>\n",
	  "</tr>\n",
	  "</tbody>\n",
	  "</table>\n",
	  "</p>";

    print OUT "<p>",
          "<table class='striped'>\n",
          "<tbody>\n",
	  "<tr class='selected'>\n",
	  " <th colspan='4'>File size breakdown</th>\n",
	  "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th colspan='2'>Bin</th>\n",
	  " <th>Files</th>\n",
	  " <th>Total Size</th>\n",
	  "</tr>\n";
    foreach my $row (@$histo)
    {
	  print OUT "<tr>\n",
	        " <td align='right'>@{[&format_size($row->[1] * $row->[2],1,2,'G')]} ..</td>\n",
		" <td align='right'>@{[&format_size(($row->[1]+1) * $row->[2],1,2,'G')]}</td>\n",
	        " <td align='right'>@{[&format_num($row->[3])]}</td>\n",
	        " <td align='right'>@{[&format_size($row->[4],1,2,'T')]}</td>\n",
	        "</tr>\n";
    }
    print OUT "</tbody>\n",
          "</table>\n",
          "</p>\n";
}

sub agents {
    my $now = time();
    my %info = ();
    my @states = qw(pending received work completed bad outgoing);
    my %states = ();
    my %age = ();
    my %live = ();
    foreach my $row (@{$dbh->selectall_arrayref(qq{
				select
				  timestamp,
				  site,
				  host,
				  path,
				  agent,
				  worker,
				  pid,
				  live,
				  state,
				  value
				from t_info_agent_status})})
    {
	my ($stamp, $site, $host, $path, $agent, $worker, $pid, $live, $state, $value) = @$row;
	$age{$site}{$host}{$path} = $stamp;
	$live{$site}{$host}{$path}{$agent}{$worker} = { PID => $pid, LIVE => $live };
	$info{$site}{$host}{$path}{$agent}{$worker}{$state} = $value;
	$states{$state} = 1 if ! grep ($_ eq $state, @states);
    }

    print OUT "<p><table class='striped'><tbody>\n",
          "<tr class='selected'>",
	  " <th>Age</th>",
	  " <th>Site</th>",
	  " <th>Agent</th>",
	  " <th>Process</th>",
	  " <th>Host</th>",
	  " <th>Worker</th>",
	  (map { " <th>$_</th>\n" } @states, sort keys %states),
	  " <th>Path</th>",
	  "</tr>\n";

    foreach my $site (sort keys %info)
    {
	foreach my $host (sort keys %{$info{$site}})
	{
	    foreach my $path (sort keys %{$info{$site}{$host}})
	    {
	        foreach my $agent (sort keys %{$info{$site}{$host}{$path}})
	        {
		    foreach my $worker (sort keys %{$info{$site}{$host}{$path}{$agent}})
		    {
		        my $pid = $live{$site}{$host}{$path}{$agent}{$worker}{PID};
		        my $live = $live{$site}{$host}{$path}{$agent}{$worker}{LIVE};
		        my $agecolor = $now - $age{$site}{$host}{$path} <= 120 ? "" : " bgcolor='$warncolor'";
		        my $pidcolor = $live ? "" : " bgcolor='$warncolor'";
			my $agentname = $agent;
			$agentname =~ s/-/&#8209;/g;
		        print OUT "<tr>\n",
			      " <td$agecolor>", &age($now - $age{$site}{$host}{$path}), "</td>\n",
			      " <td>$site</td>\n",
			      " <td>$agentname</td>\n",
			      " <td$pidcolor>$pid</td>\n",
			      " <td>$host</td>\n",
			      " <td>$worker</td>\n";
		        foreach my $state (@states, sort keys %states)
		        {
			    my $value = $info{$site}{$host}{$path}{$agent}{$worker}{$state};
			    my $color = $value ? " bgcolor='$pendcolor'" : '';
			    print OUT " <td$color>$value</td>\n";
		        }
			print OUT " <td>$path</td>\n",
		              "</tr>\n";
	            }
	        }
	    }
	}
    }
    print OUT "</tbody></table></p>\n";
}

sub format_timespan {
    my $span = shift;
    if ($span >= 86400) {
	$span /= 86400;
	return $span == 1 ? "day" : "$span days";
    } elsif ($span >= 3600) {
	$span /= 3600;
	return $span == 1 ? "hour" : "$span hours";
    } elsif ($span >= 60) {
	$span /= 60;
	return $span == 1 ? "minute" : "$span minutes";
    } else {
	return $span == 1 ? "second" : "$span seconds";
    }
}

sub rates {
    my $now = time();
    my %stats = ();
    my $q = $dbh->prepare(qq{
			select
			  timestamp,
			  time_span,
			  info_type,
			  from_node,
			  to_node,
			  n_total,
			  sz_total
			from t_info_transfer_rate});
    $q->execute();
    while (my $row = $q->fetchrow_hashref()) {
	push(@{$stats{$row->{TIME_SPAN}}{$row->{INFO_TYPE}}}, $row);
    }

    print OUT "<p>CERN Daily External Internet Traffic<br>\n";
    print OUT "<a href='http://pcstats2.cern.ch/misc/cern-all.html'><IMG
      VSPACE=10 WIDTH=600 HEIGHT=135 ALIGN=TOP
      SRC='http://pcstats2.cern.ch/misc/cern-all-day.png' ALT='day'></a></p>\n";
    print OUT "<p><table class='striped'><tbody>\n";
    foreach my $span (sort { ($a || 9999999) <=> ($b || 9999999) } keys %stats)
    {
    	print OUT
	  "<tr class='selected'>\n",
	  " <th colspan='6'>",
	  ($span == 0 ? "Overall" : "Last @{[&format_timespan($span)]}"),
	  "</th>\n",
	  "</tr>\n",
	  "<tr class='selected'>\n",
	  " <th>Age</th>\n",
	  " <th>From</th>\n",
	  " <th>To</th>\n",
	  " <th>Files</th>\n",
	  " <th>Total Size</th>\n",
	  " <th>Aggregate Rate</th>\n",
	  "</tr>\n";
	foreach my $row ((sort { $b->{SZ_TOTAL} <=> $a->{SZ_TOTAL} }
			  @{$stats{$span}{'N'}}), @{$stats{$span}{'T'}})
	{
	    my $bps = ($row->{TIME_SPAN} ? $row->{SZ_TOTAL} / $row->{TIME_SPAN} : -1);
	    print OUT "<tr>",
		  "<td>", &age($now - $row->{TIMESTAMP}), "</td>",
		  ($row->{FROM_NODE}
		   ? "<td>$row->{FROM_NODE}</td><td>$row->{TO_NODE}</td>"
		   : "<td colspan='2'>Total</td>"),
	          "<td>$row->{N_TOTAL}</td>",
	          "<td align='right'>@{[&format_size($row->{SZ_TOTAL})]}</td>",
		  "<td align='right'>", ($bps >= 0 ? &format_size($bps) . '/s' : &format_num(0)), "</td>",
	          "</tr>\n";
	}
    }
    print OUT "</tbody></table></p>\n";
}

sub dbreports
{
    my $dbid = $$databases{$db}[3];
    my $reportdir = "/afs/cern.ch/cms/aprom/phedex/DailyReports";
    my @reports = sort <$reportdir/$dbid-*.txt*>;
    print OUT "<p><table class='striped'><tbody>\n",
          "<tr class='selected'><th colspan='32'>Available reports</th></tr>\n",
	  "<tr class='selected'>\n",
	  " <th>Month</td>\n",
	  (map { sprintf " <th>%02d</th>\n", $_ } 1 .. 31),
	  "</tr>\n";
    my $prev = "";
    my $prevday = 0;
    foreach my $file (@reports)
    {
	my $basename = $file; $basename =~ s|.*/||;
	my $cleanname = $basename; $cleanname =~ s|^$dbid-||;
	my $url = &baseurl("page" => "dbreport", "reportfile" => $cleanname);
	my ($year, $month, $day) = ($cleanname =~ /(\d\d\d\d)(\d\d)(\d\d)\..*/);
	if ("$year-$month" ne $prev)
	{
	    if ($prev)
	    {
	        while (++$prevday <= 31) { print OUT "<td></td>\n"; }
	        print OUT "</tr>\n";
	    }

	    print OUT "<tr>\n <td>$year&#8209;$month</td>\n";
	    $prev = "$year-$month";
	    $prevday = 0;
	}
	while (++$prevday < $day) { print OUT " <td></td>\n"; }
	print OUT "<td align='center'><a href='$url'>R</a></td>\n";
	$prevday = $day;
    }

    print OUT "</tbody></table></p>\n";
}

sub dbreport
{
    my $dbid = $$databases{$db}[3];
    my $reportdir = "/afs/cern.ch/cms/aprom/phedex/DailyReports";
    my $report = param('reportfile') || (strftime('%Y%m%d', gmtime()) . ".txt");
    print OUT "<pre align='left'>\n";
    if ($report && $report =~ m|^[-A-Za-z0-9.]+$|)
    {
	my $reportfile = "$reportdir/$dbid-$report";
	if (-f $reportfile)
	{
	    local $/ = undef;
	    open (REPORT, $reportfile =~ /.gz$/ ? "gzip -dc < $reportfile |" : "< $reportfile");
	    print OUT escapeHTML (<REPORT>);
	    close (REPORT);
	}
    }
    print OUT "</pre>\n";
}

sub rateplot
{
    my @plotorder = qw(l48h l72h l96h l132h l7d l14d l30d l90d l6w l26w l52w ad aw am);
    my %plots = ("l48h" => [ "48:hour", "Last 48 Hours" ],
	         "l72h" => [ "72:hour", "Last 72 Hours" ],
	         "l96h" => [ "96:hour", "Last 96 Hours" ],
	         "l132h" => [ "132:hour", "Last 132 Hours" ],
	         "l7d" => [ "7:day", "Last 7 Days" ],
	         "l14d" => [ "14:day", "Last 14 Days" ],
	         "l30d" => [ "30:day", "Last 30 Days" ],
	         "l90d" => [ "90:day", "Last 90 Days" ],
		 "l6w" => [ "6:week", "Last 6 Weeks" ],
		 "l26w" => [ "26:week", "Last 26 Weeks" ],
		 "l52w" => [ "52:week", "Last 52 Weeks" ],
	         "ad" => [ "0:day", "Daily Since Start" ],
		 "aw" => [ "0:week", "Weekly Since Start" ],
		 "am" => [ "0:month", "Monthly Since Start" ]);
    my $plot = param("plot");
    my $graph = param("graph") || 'bar';
    my $filter = param("filter") || '';
    my $upto = param("upto") || '';
    $plot = 'l48h' if (! $plot || ! exists $plots{$plot});

    print OUT "<p><form method='GET' action='@{[&baseurl()]}'>\n",
          "<input type='hidden' name='page' value='@{[param('page')]}'>\n",
          "<input type='hidden' name='db' value='@{[param('db')]}'>\n",
          "Graph ",
          "<select name='graph' onchange='submit()'>",
	  " <option ", ($graph eq 'bar' ? 'selected=selected' : ''),
	  "  value='bar'>Bar</option>",
	  " <option ", ($graph eq 'line' ? 'selected=selected' : ''),
	  "  value='line'>Line</option>",
          "</select>\n",
          "<select name='plot' onchange='submit()'>";
    foreach my $p (@plotorder)
    {
	print OUT "<option ", ($plot eq $p ? 'selected=selected' : ''),
	      " value='$p'>$plots{$p}[1]</option>";
    }
    print OUT "</select>\n",
          "Filter ",
	  textfield(-name=>'filter', -default=>$filter, -size=>15), "\n",
          "Up to ",
	  textfield(-name=>'upto', -default=>$upto, -size=>15), "\n",
    	  "<input type='submit' value='Update'></form></p>\n";
    foreach my $kind (param('page') eq 'rateplot' ? qw(rate total) : qw(pending))
    {
	next if ($graph eq 'line' && $kind ne 'total');
	my ($last, $unit) = $plots{$plot}[0] =~ /([^:]+)/g;
	my $suffix = ($graph eq 'bar' ? '' : '-line');
	print OUT "<p><img width=900 height=406 src='perf-graph$suffix.php?",
	      &urlencode('db' => $db, 'span' => $unit, 'kind' => $kind,
		         'last' => $last, 'filter' => $filter, 'upto' => $upto),
	      "'>";
    }
}

sub qplot
{
    my @plotorder = qw(l48h l72h l96h l132h l7d l14d l30d l90d l6w l26w l52w ad aw am);
    my %plots = ("l48h" => [ "48:hour", "Last 48 Hours" ],
	         "l72h" => [ "72:hour", "Last 72 Hours" ],
	         "l96h" => [ "96:hour", "Last 96 Hours" ],
	         "l132h" => [ "132:hour", "Last 132 Hours" ],
	         "l7d" => [ "7:day", "Last 7 Days" ],
	         "l14d" => [ "14:day", "Last 14 Days" ],
	         "l30d" => [ "30:day", "Last 30 Days" ],
	         "l90d" => [ "90:day", "Last 90 Days" ],
		 "l6w" => [ "6:week", "Last 6 Weeks" ],
		 "l26w" => [ "26:week", "Last 26 Weeks" ],
		 "l52w" => [ "52:week", "Last 52 Weeks" ],
	         "ad" => [ "0:day", "Daily Since Start" ],
		 "aw" => [ "0:week", "Weekly Since Start" ],
		 "am" => [ "0:month", "Monthly Since Start" ]);
    my $plot = param("plot");
    my $filter = param("filter") || '';
    my $upto = param("upto") || '';
    $plot = $plotorder[0] if (! $plot || ! exists $plots{$plot});

    print OUT "<p><form method='GET' action='@{[&baseurl()]}'>\n",
          "<input type='hidden' name='page' value='@{[param('page')]}'>\n",
          "<input type='hidden' name='db' value='@{[param('db')]}'>\n",
          "<select name='plot' onchange='submit()'>";
    foreach my $p (@plotorder)
    {
	print OUT "<option ", ($plot eq $p ? 'selected=selected' : ''),
	      " value='$p'>$plots{$p}[1]</option>";
    }
    print OUT "</select>\n",
          "Filter ",
	  textfield(-name=>'filter', -default=>$filter, -size=>15), "\n",
          "Up to ",
	  textfield(-name=>'upto', -default=>$upto, -size=>15), "\n",
    	  "<input type='submit' value='Update'></form></p>\n";
    foreach my $kind (qw(completed_ratio attempted completed failed))
    {
	my ($last, $unit) = $plots{$plot}[0] =~ /([^:]+)/g;
	my $php = ($kind =~ /_/ ? "quality-map.php" : "quality-graph.php");
	print OUT "<p><img width=900 height=406 src='$php?",
	      &urlencode('db' => $db, 'span' => $unit, 'kind' => $kind,
		         'last' => $last, 'filter' => $filter, 'upto' => $upto),
	      "'>";
    }
}

1;
