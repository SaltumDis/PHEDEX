This document explains how to host the PhEDEx web browser.  Usually
there is only one web browser for the entire experiment; an average
site deploying PhEDEx most definitely isn't expected to host the web
browser as well.

The PhEDEx status monitoring web pages are generated by CGI scripts
stored in Documentation/WebSite/cgi-bin; the front page of the whole
web spae is Documentation/WebSite.  In addition the main web site
contains directories not stored in CVS, mainly "Documents", our
repository of past one-off documents.

The status monitoring scripts are CGI scripts.  They can be hosted
by any normal unix web server, e.g. Apache, provided the server has
been configured to include Oracle environment and DBD::Oracle.  The
relevant details are below.

A better configuration is to use mod_perl, as this makes the pages
load faster due to database connection pooling and more integrated
processing chain.  The same CGI scripts can be executed under the
mod_perl environment without changes.  To use the scripts in this
environment, two things are needed: an Apache configuration file
for the browser, and pre-load module file.

The mod_perl configuration, e.g. /etc/httpd/conf.d/phedex.conf, should
look something like the extract below.  This assumes SLC4, Apache 2 as
provided by the system (httpd-2.0.52-22.ent), mod_perl2 installed into
a separate directory (/opt/mod_perl2 -- do not use the mod_perl that
comes with SLC4!), DBI, DBD::Oracle, Oracle 10.2.0.2 for the system,
and /etc/rc.d/init.d/httpd changed to source the Oracle environment.

The environment that should be used for normal CGI scripts is included
below, commented out at the very end.  Those three lines are all that
are required, in addition to changing /etc/rc.d/init.d/httpd, to get
the scripts to work as normal CGI scripts, without using mod_perl.

  LoadModule perl_module modules/mod_perl.so
  PerlSwitches -I/opt/mod_perl2/lib/perl5/site_perl/5.8.5/i386-linux-thread-multi -I/opt/mod_perl2/lib/perl5/5.8.5 -I/opt/mod_perl2/lib/perl5/site_perl/5.8.5/
  PerlModule ModPerl::Registry
  PerlModule Apache2::Reload
  PerlInitHandler Apache2::Reload
  PerlRequire /data/perl-preload.pm
  PerlPassEnv ORACLE_HOME
  PerlPassEnv TNS_ADMIN
  PerlPassEnv LD_LIBRARY_PATH

  Alias /cms/aprom/phedex /data/PHEDEX/Documentation/WebSite
  <Directory "/data/PHEDEX/Documentation/WebSite">
    Options Indexes FollowSymLinks Multiviews ExecCGI
    AllowOverride all
  </Directory>
  <Directory "/data/PHEDEX/Documentation/WebSite/cgi-bin">
    <FilesMatch "^browser">
      SetHandler perl-script
      PerlResponseHandler ModPerl::Registry
      PerlOptions +ParseHeaders
      SetOutputFilter DEFLATE
      # SetHandler cgi-script
      # PassEnv ORACLE_HOME TNS_ADMIN LD_LIBRARY_PATH
      # SetEnv PERL5LIB /afs/cern.ch/cms/aprom/phedex/Tools/perl-modules/lib:/afs/cern.ch/cms/aprom/phedex/Tools/perl-modules/lib/i386-linux-thread-multi
    </FilesMatch>
  </Directory>


The /data/perl-preload.pm loaded by mod_perl at server startup to
preload all perl code required by the status monitor should look
something like this:

  # use Apache2 ();   # <-- only for mod_perl 1.99!
  # use ModPerl::MethodLookup ();
  # ModPerl::MethodLookup::preload_all_modules ();
  use ModPerl::Util ();
  use Apache2::RequestRec ();
  use Apache2::RequestIO ();
  use Apache2::RequestUtil ();
  use Apache2::ServerRec ();
  use Apache2::ServerUtil ();
  use Apache2::Connection ();
  use Apache2::Log ();
  use APR::Table ();
  use ModPerl::Registry ();
  use Apache2::Const -compile => ':common';
  use APR::Const -compile => ':common';

  BEGIN {
    use strict; use warnings; $^W=1; use Config;
    unshift (@INC, "/data/DBSPerlLib/lib/$Config{archname}");
    unshift (@INC, "/data/DBSPerlLib/lib");
    # unshift (@INC, "/data/PHEDEX/Toolkit/Common");
    unshift (@INC, "/afs/cern.ch/cms/aprom/phedex/PHEDEX/Toolkit/Common");
  }

  use CGI ();
  CGI->compile(':all');
  use Apache::DBI ();
  use DBD::Oracle ();
  use POSIX ();

  1;

Above, /data/DBSPerlLib/lib contains any additional perl modules not
available on the system, such as DBI, DBD::Oracle, etc.  In future we
will replace the above paths with those from binaries distributed via
the CMS RPMs (oracle, p5-* RPMs).  In principle, it's sufficient to
expand the environment that would be set by etc/profile.d/env.sh; this
could also be done in /etc/rc.d/init.d/httpd, in which case there is
no need to modify @INC in the preload package.
