#!/usr/bin/env perl

##H Setup a POOL MySQL file catalogue needed for Phedex transfers
##H
##H This script is meant to automize the setup of a MySQL based POOL
##H catalogue. It checks for the existence of another POOL catalogue
##H on the same server and aborts unless forced to overwrite. Needless
##H to say, that one has to use utmost care when overwriting an
##H already existing DB.
##H
##H Usage:
##H   SetupPOOLFileCatalogue
##H       [-help] -dbrootpass PASSWORD [-pooluser USERNAME] [-poolpass PASSWORD]
##H       [-dbname DBNAME] -dbtype {MYSQL | ORACLE} [-overwrite]
##H       [-dbhost HOSTNAME] [-poolhost HOSTNAME] -phedexbase BASEDIR
##H
##H    -help          this help text
##H    -dbrootpass    root password for the DB server
##H                   (NOT the system's rootpass !!)
##H    -pooluser      user for accessing the POOL catalogue
##H    -poolpass      passwd for accessing the POOL catalogue
##H    -poolhost      host(s) allowed to contact catalogue (default: %)
##H    -dbname        name of the DB hosting the POOL file catalogue
##H    -dbtype        type of DB in use: MYSQL, ORACLE
##H    -overwrite     force installation of POOL SQL although DB seems
##H                   to exist already
##H    -dbhost        host on which the DB server resides
##H    -phedexbase    basedir of the Phedex installation
##H

BEGIN {
  use strict; use warnings; $^W=1;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../Toolkit/Common";
  unshift(@INC, $home);
}

use UtilsHelp;
use Getopt::Long;

my %args = (POOLUSER =>"phedex", POOLPASS =>"phedex", DBNAME =>"phedexcat", HOST =>"localhost", POOLHOST =>'%');

&GetOptions("help"                  =>\$args{HELP},
	    "overwrite"             =>\$args{OVERWRITE},
	    "pooluser=s"            =>\$args{POOLUSER},
	    "poolpass=s"            =>\$args{POOLPASS},
	    "poolhost=s"            =>\$args{POOLHOST},
	    "dbname=s"              =>\$args{DBNAME},
	    "dbhost=s"              =>\$args{HOST},
	    "dbrootpass=s"          =>\$args{ROOTPASS},
	    "phedexbase=s"          =>\$args{BASEDIR},
	    "dbtype=s"              =>\$args{DBTYPE});

if ($args{HELP} || !$args{BASEDIR} || !$args{ROOTPASS} || !$args{DBTYPE})
{ &usage(); }

# POOL schema and client binary location for supported DB types
my %SCHEMA = (MYSQL    => ["$args{BASEDIR}/PHEDEX/Schema/FC-MySQL.sql","mysql"],
	      ORACLE   => undef);

# privileges for phedex MySQL POOL user
my $priv = 'select, insert, update, create, delete, drop';

eval
{
    # check if we have a schema ready for the requested DB type
    die "no SQL file available in Schema dir for your DB type $args{DBTYPE}... Sorry\n"
	if !$SCHEMA{$args{DBTYPE}}->[0];

    # check for client software to access DB
    die "The client binary is not in your path or not installed... Aborting !\n"
	if system("which $SCHEMA{$args{DBTYPE}}->[1] >& /dev/null");
    
    # find out if a DB server is running and accessible
    my $cmd = "mysql -h $args{HOST} -u root -p$args{ROOTPASS} -e \'show databases\'";
    my @databases = ();
    @databases = `$cmd 2>/dev/null` if !system("$cmd &>/dev/null");
    die "Problems accessing DB on host $args{HOST} using command\n$cmd\n"
	if (scalar(@databases) == 0);

    # check for existing POOL catalogue
    my $DBexists = grep(m|$args{DBNAME}|,@databases);
    die "The database seems to exist already and you did not ask to overwrite it !\n"
	if ($DBexists && !$args{OVERWRITE});

    my @cmda = ();
    # remove old DB
    if ($DBexists)
    {
	@cmda = ('mysql', '-h', "$args{HOST}", '-u', 'root', "-p$args{ROOTPASS}",
		'-Ne', "drop database $args{DBNAME}");
	die "Drop of old DB $args{DBNAME} failed using command:\n@cmda\n"
	    if &runcmd (@cmda);
    }
    
    # Create user and database
    @cmda = ('mysql', '-h', "$args{HOST}", '-u', 'root', "-p$args{ROOTPASS}",
	    '-Ne', "create database if not exists $args{DBNAME}");
    die "Creation of DB $args{DBNAME} failed using command:\n@cmda\n"
	if &runcmd (@cmda);
    @cmda = ('mysql', '-h', "$args{HOST}", '-u', 'root', "-p$args{ROOTPASS}",
	     '-Ne',
	     "grant $priv ON $args{DBNAME}.* TO".
	     " \'$args{POOLUSER}\'\@\'$args{POOLHOST}\' identified by \"$args{POOLPASS}\", ".
	     " \'$args{POOLUSER}\'\@\'localhost\' identified by \"$args{POOLPASS}\"");
    die "Creation of DB $args{DBNAME} failed using command:\n@cmda\n"
	if &runcmd (@cmda);
    
    # setup the catalogue using the Phedex MySQL SQL schema
    $cmd = "mysql -h $args{HOST} -u root -p$args{ROOTPASS} $args{DBNAME} < $SCHEMA{MYSQL}->[0]";
    die "Couldn't apply $SCHEMA{MYSQL}->[0] on database $args{DBNAME} using command:\n$cmd\n"
	if system($cmd);
};

# interpret the outcome of the setup procedure
do
{
    print "Setup of MySQL POOL DB aborted. The error was:\n";
    print "$@\n";
    exit 5;
} if $@;

print "Setup of MySQL POOL DB seemed to be successful\n";
exit 0;

# Borrowed from UtilsCommand.pm
sub runcmd
{
    my ($cmd, @args) = @_;
    my $pid = open(SUBCMD, "|-");
    if (! defined $pid) {
	return 255;
    } elsif (! $pid) {
	(exec $cmd $cmd, @args) || exit (255);
    } else {
	return close(SUBCMD) ? 0 : $?;
    }
}
