#!/usr/bin/env perl
BEGIN
{
    use strict;
    use warnings;
    use Getopt::Long;
    use English;
}

my $lversion = qx(cat /etc/redhat-release 2>/dev/null);
my %args = (LVERSION => ($lversion =~ /Scientific/ ? "SLC3" : "RH73"));

&GetOptions("standalone" => \$args{STANDALONE},
	    "cms"        => \$args{CMS},
	    "arch=s"     => \$args{LVERSION},
	    "help"       => \$args{HELP},
	    "xcmsi"      => \$args{XCMSI});

$args{ROOT} = shift(@ARGV);

if ($args{HELP} || (!$args{STANDALONE} && !$args{CMS} && !$args{XCMSI})
    || !$args{ROOT}) {
    print "Usage: $0 [-help] [-arch {RH73 | SLC3}] {-cms | -standalone | -xcmsi} DESTINATION\n";
    print " -help        This help text\n";
    print " -cms         Use existing CMS software environment, ask scram for environment\n";
    print " -standalone  Make standalone installation from RPMs\n";
    print " -xcmsi       XCMSi driven installation... don't use this interactively !!\n";
    print " -arch        Force architecture to RH73 (default for non-RH OS) or SLC3\n";
    print "\nThe tools (for standalone installation) and the environment set up script will\n",
    "be installed into DESTINATION.\n";
    exit 1;
}

# make sure all kinds of architecure strings are interpreted correctly
$args{LVERSION} = ($args{LVERSION} =~ m|slc|i ? "SLC3" : "RH73");

if ($args{CMS}) {
    print "Installing POOL tools from SCRAM environment into $args{ROOT} for $args{LVERSION}\n";
    my $success = installScram($args{ROOT}, $args{LVERSION});
    exit 1 if (!$success);
} elsif ($args{STANDALONE}){
    print "Installing POOL tools from RPMS into $args{ROOT} for $args{LVERSION}\n";
    my $success = installStandalone($args{ROOT}, $args{LVERSION});
    exit 1 if (!$success);
} elsif ($args{XCMSI}) {
    print "Installing sourcable scripts for POOL tools into $args{ROOT} for $args{LVERSION}\n";
    my $success = installStandalone($args{ROOT}, $args{LVERSION});
    exit 1 if (!$success);
} else {
    print "Don't know what to do. Please use \"-help\".... This shouldn't happen !!\n";
    exit 5;
}

exit 0;


sub installStandalone
{
    my ($InstallRoot, $Lversion) = @_;
    my $RPMSource='http://cmsdoc.cern.ch/cms/oo/repos_standalone/download';
    my $versionTag='cms101';
    my $Linux_V = undef;
    my $Linux_Vshort = undef;
    my $Xerces = undef;
    my $PI = undef;
    my $POOL = undef;
    my $SEAL = undef;
    my $PYTHON = undef;
    my $MYSQLPP = undef;

    my @packetlist = ();
    if ($Lversion eq 'RH73') {
	$Linux_V = 'rh73_gcc323';
	$Linux_Vshort = 'rh73_gcc32';
	$Xerces = '2.3.0-1/rh73_gcc32';
	$PI = 'PI_1_2_5';
	$POOL = 'POOL_1_8_1';
	$SEAL = 'SEAL_1_4_3';
	$PYTHON = '2.3.4';
	$MYSQLPP = '1.7.9_mysql.4.0.18';
	@packetlist = ("LCG.POOL_1_8_1-rh73_gcc323-cms-1.i386.rpm",
		       "LCG.SEAL_1_4_3-rh73_gcc323-cms-1.i386.rpm",
		       "LCG.PI_1_2_5-rh73_gcc323-cms-1.i386.rpm",
		       "LCG.mysql-rh73_gcc32-4.0.18-cms-1.i386.rpm",
		       "LCG.mysqlpp-rh73_gcc32-1.7.9_mysql.4.0.18-cms-1.i386.rpm",
		       "LCG.xerces-c-rh73_gcc32-2.3.0-1-cms-1.i386.rpm",
		       "LCG.python-rh73_gcc32-2.3.4-cms-1.i386.rpm");
    } elsif ($Lversion eq 'SLC3') {
	$versionTag='cms111';
	$Linux_V = 'slc3_ia32_gcc323';
	$Linux_Vshort = 'slc3_ia32_gcc323';
	$Xerces = '2.3.0/slc3_ia32_gcc323';
	$PI = 'PI_1_3_1';
	$POOL = 'POOL_2_0_3';
	$SEAL = 'SEAL_1_6_1';
	$PYTHON = '2.3.4';
	$MYSQLPP = '1.7.31_mysql.4.0.18';
	@packetlist = ("LCG.POOL_2_0_3-slc3_ia32_gcc323-cms-1.i386.rpm",
		       "LCG.SEAL_1_6_1-slc3_ia32_gcc323-cms-1.i386.rpm",
		       "LCG.PI_1_3_1-slc3_ia32_gcc323-cms-1.i386.rpm",
		       "LCG.mysql-slc3_ia32_gcc323-4.0.18-cms-1.i386.rpm",
		       "LCG.mysqlpp-slc3_ia32_gcc323-1.7.31_mysql.4.0.18-cms-1.i386.rpm",
		       "LCG.xerces-c-slc3_ia32_gcc323-2.3.0-cms-1.i386.rpm",
		       "LCG.python-slc3_ia32_gcc323-2.3.4-cms-2.i386.rpm");
    } else {
	die "Unsupported linux version chosen !!\n";
    }

    # start the RPM installation.... omitted in case of XCMSi
    if (!$args{XCMSI}) {
	my $success = &InstallRPMs($InstallRoot, $RPMSource, $versionTag, @packetlist);
	return 0 if !$success;
    }

    
    # now finally provide a script to set some environment variables (has to be sourced later)
    my $rpath = "$InstallRoot/lcg/app/releases/PI/$PI/$Linux_V/lib:$InstallRoot/lcg/app/releases/POOL/$POOL/$Linux_V/lib:$InstallRoot/lcg/app/releases/SEAL/$SEAL/$Linux_V/lib:$InstallRoot/lcg/external/xerces-c/$Xerces/lib:$InstallRoot/lcg/external/mysql/4.0.18/$Linux_Vshort/lib:$InstallRoot/lcg/external/mysqlpp/$MYSQLPP/$Linux_Vshort/lib:$InstallRoot/lcg/external/python/$PYTHON/$Linux_Vshort/lib";
    my $ppath = "$InstallRoot/lcg/app/releases/PI/$PI/$Linux_V/lib/modules:$InstallRoot/lcg/app/releases/POOL/$POOL/$Linux_V/lib/modules";
    my $bpath = "$InstallRoot/lcg/app/releases/POOL/$POOL/$Linux_V/bin";
    my $pypath = "$InstallRoot/lcg/app/releases/POOL/$POOL/$Linux_V/lib:$InstallRoot/lcg/app/releases/POOL/$POOL/$Linux_V/bin";

    open(FH, ">$InstallRoot/poolenv.sh");
    print FH "export LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:$rpath;\n";
    print FH "export SEAL_PLUGINS=$ppath;\n";
    print FH "export PATH=\${PATH}:$bpath;\n";
    print FH "export PYTHONPATH=$pypath;\n";
    close(FH);

    open(FH,">$InstallRoot/poolenv.csh");
    print FH "setenv LD_LIBRARY_PATH \${LD_LIBRARY_PATH}:$rpath;\n";
    print FH "setenv SEAL_PLUGINS $ppath;\n";
    print FH "setenv PATH \${PATH}:$bpath;\n";
    print FH "setenv PYTHONPATH $pypath;\n";
    close(FH);

    return 1; # report success
}

sub installScram
{
    my ($InstallRoot, $LVERSION) = @_;
    my $VO_CMS_SW_DIR = '/afs/cern.ch/sw';
    my $arch = 'rh73_gcc323';
    $arch = 'slc3_ia32_gcc323' if ($LVERSION eq 'SLC3');

    # check for existence of VO_CMS_SW_DIR. If it dosn't exist we assume
    # we are at Cern and have afs available.
    $VO_CMS_SW_DIR = $ENV{VO_CMS_SW_DIR} if $ENV{VO_CMS_SW_DIR};
    print "\nwarning: VO_CMS_SW_DIR env variable is not set....\n",
    "this is fine, if we have access to afs\n",
    "if this is not the case, please set VO_CMS_SW_DIR to point\n",
    "to your CMS installation and restart this script !!\n\n"
	if (! $ENV{VO_CMS_SW_DIR});
    

    eval {
	foreach my $sh ("sh", "csh") {
	    (! system("mkdir -p $InstallRoot"))
		or die "Failed to create $InstallRoot directory.  Please check permissions.\n";
	    open(FH,">$InstallRoot/poolenv.$sh");
	    print FH "cd $VO_CMS_SW_DIR/lcg/app/releases/POOL/POOL_2_0_3; ",
	    "eval \`scram -arch $arch runtime -$sh\` \n";
	    print FH "cd - \n";
	    close(FH);
	}
    };
    if ($@) {
	print "ERROR: $@ERROR: Environment setup creation failed, installation terminated.\n";
	return 0; #report failure
    }
    
    return 1; # report success
}

sub InstallRPMs
{
    my ($InstallRoot, $RPMSource, $versionTag, @packetlist) = @_;

    # perform the RPM intallation voodoo
    eval {
	# additional rpm options needed due to unsatisfied dependencies
	my $RPMopt = '--nodeps --nopost';


	# prepare a local dummy RPM DB and copy over the system wide DB
	if (!-e "$InstallRoot/RPMDB")
	{
	    (! system("mkdir -p $InstallRoot/RPMDB"))
		or die "Couldn't create $InstallRoot/RPMDB directory.  Please check permissions.\n";
	}
	else
	{
	    system("rm $InstallRoot/RPMDB/\*");
	}

	(! system("cp -r /var/lib/rpm/\* $InstallRoot/RPMDB/"))
	    or warn "No system-wide RPMDB found in /var/lib/rpm.  Proceeding without copying.\n";

	# get rid of the index files (caused trouble in the past)
	system("rm -f $InstallRoot/RPMDB/__db\*");

	# get the initial RPMs needed from the web
	if (!-e "$InstallRoot/RPMs") {
	    (! system("mkdir $InstallRoot/RPMs"))
		or die "Couldn't create $InstallRoot/RPMs directory.  Please check permissions.\n";
	} else {
	    system("rm $InstallRoot/RPMs/\*");
	    system("rm -rf $InstallRoot/lcg") if (-e "$InstallRoot/lcg");
	}
    
	foreach my $packet (@packetlist){
	    my $cmd = "wget -q -P $InstallRoot/RPMs -N $RPMSource/$versionTag/$packet";
	    (! system($cmd)) or die "Couldn't download all RPMs.  Installation terminated.\n";
	}

	# lets install the stuff if we succeded to download the RPMs
	my $RPMcmd="rpm --dbpath $InstallRoot/RPMDB --prefix $InstallRoot -i $RPMopt $InstallRoot/RPMs/\*";
	(! system($RPMcmd)) or
	    die "Installation of RPMs failed.  Installation terminated.\n";
    } if !$args{XCMSI};

    if (!$args{XCMSI} && $@) {
	print "ERROR: $@ERROR: RPM installation failed, cleaning up.\n";
	system("rm -r $InstallRoot/RPMDB") if (-e "$InstallRoot/RPMDB");
	system("rm -r $InstallRoot/RPMs") if (-e "$InstallRoot/RPMs");
	return 0; # report failure
    }
    return 1; # report success
}
